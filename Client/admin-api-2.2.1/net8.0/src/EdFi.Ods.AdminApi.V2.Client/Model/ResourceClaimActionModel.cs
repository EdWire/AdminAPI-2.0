// <auto-generated>
/*
 * Admin API Documentation
 *
 * The Ed-Fi Admin API is a REST API-based administrative interface for managing vendors, applications, client credentials, and authorization rules for accessing an Ed-Fi API.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.Ods.AdminApi.V2.Client.Client;

namespace EdFi.Ods.AdminApi.V2.Client.Model
{
    /// <summary>
    /// ResourceClaimActionModel
    /// </summary>
    public partial class ResourceClaimActionModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceClaimActionModel" /> class.
        /// </summary>
        /// <param name="resourceClaimId">resourceClaimId</param>
        /// <param name="resourceName">resourceName</param>
        /// <param name="claimName">claimName</param>
        /// <param name="actions">actions</param>
        [JsonConstructor]
        public ResourceClaimActionModel(Option<int?> resourceClaimId = default, Option<string?> resourceName = default, Option<string?> claimName = default, Option<List<ActionForResourceClaimModel>?> actions = default)
        {
            ResourceClaimIdOption = resourceClaimId;
            ResourceNameOption = resourceName;
            ClaimNameOption = claimName;
            ActionsOption = actions;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ResourceClaimId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ResourceClaimIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ResourceClaimId
        /// </summary>
        [JsonPropertyName("resourceClaimId")]
        public int? ResourceClaimId { get { return this.ResourceClaimIdOption; } set { this.ResourceClaimIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ResourceName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ResourceNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets ResourceName
        /// </summary>
        [JsonPropertyName("resourceName")]
        public string? ResourceName { get { return this.ResourceNameOption; } set { this.ResourceNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of ClaimName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClaimNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets ClaimName
        /// </summary>
        [JsonPropertyName("claimName")]
        public string? ClaimName { get { return this.ClaimNameOption; } set { this.ClaimNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Actions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ActionForResourceClaimModel>?> ActionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets Actions
        /// </summary>
        [JsonPropertyName("actions")]
        public List<ActionForResourceClaimModel>? Actions { get { return this.ActionsOption; } set { this.ActionsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResourceClaimActionModel {\n");
            sb.Append("  ResourceClaimId: ").Append(ResourceClaimId).Append("\n");
            sb.Append("  ResourceName: ").Append(ResourceName).Append("\n");
            sb.Append("  ClaimName: ").Append(ClaimName).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ResourceClaimActionModel" />
    /// </summary>
    public class ResourceClaimActionModelJsonConverter : JsonConverter<ResourceClaimActionModel>
    {
        /// <summary>
        /// Deserializes json to <see cref="ResourceClaimActionModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ResourceClaimActionModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> resourceClaimId = default;
            Option<string?> resourceName = default;
            Option<string?> claimName = default;
            Option<List<ActionForResourceClaimModel>?> actions = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "resourceClaimId":
                            resourceClaimId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "resourceName":
                            resourceName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "claimName":
                            claimName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "actions":
                            actions = new Option<List<ActionForResourceClaimModel>?>(JsonSerializer.Deserialize<List<ActionForResourceClaimModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (resourceClaimId.IsSet && resourceClaimId.Value == null)
                throw new ArgumentNullException(nameof(resourceClaimId), "Property is not nullable for class ResourceClaimActionModel.");

            return new ResourceClaimActionModel(resourceClaimId, resourceName, claimName, actions);
        }

        /// <summary>
        /// Serializes a <see cref="ResourceClaimActionModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="resourceClaimActionModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ResourceClaimActionModel resourceClaimActionModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, resourceClaimActionModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ResourceClaimActionModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="resourceClaimActionModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ResourceClaimActionModel resourceClaimActionModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (resourceClaimActionModel.ResourceClaimIdOption.IsSet)
                writer.WriteNumber("resourceClaimId", resourceClaimActionModel.ResourceClaimIdOption.Value!.Value);

            if (resourceClaimActionModel.ResourceNameOption.IsSet)
                if (resourceClaimActionModel.ResourceNameOption.Value != null)
                    writer.WriteString("resourceName", resourceClaimActionModel.ResourceName);
                else
                    writer.WriteNull("resourceName");

            if (resourceClaimActionModel.ClaimNameOption.IsSet)
                if (resourceClaimActionModel.ClaimNameOption.Value != null)
                    writer.WriteString("claimName", resourceClaimActionModel.ClaimName);
                else
                    writer.WriteNull("claimName");

            if (resourceClaimActionModel.ActionsOption.IsSet)
                if (resourceClaimActionModel.ActionsOption.Value != null)
                {
                    writer.WritePropertyName("actions");
                    JsonSerializer.Serialize(writer, resourceClaimActionModel.Actions, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("actions");
        }
    }
}
