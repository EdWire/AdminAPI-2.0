// <auto-generated>
/*
 * Admin API Documentation
 *
 * The Ed-Fi Admin API is a REST API-based administrative interface for managing vendors, applications, client credentials, and authorization rules for accessing an Ed-Fi API.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.Ods.AdminApi.V2.Client.Client;

namespace EdFi.Ods.AdminApi.V2.Client.Model
{
    /// <summary>
    /// ActionWithAuthorizationStrategy
    /// </summary>
    public partial class ActionWithAuthorizationStrategy : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActionWithAuthorizationStrategy" /> class.
        /// </summary>
        /// <param name="actionId">actionId</param>
        /// <param name="actionName">actionName</param>
        /// <param name="authorizationStrategies">authorizationStrategies</param>
        [JsonConstructor]
        public ActionWithAuthorizationStrategy(Option<int?> actionId = default, Option<string?> actionName = default, Option<List<AuthorizationStrategyModelForAction>?> authorizationStrategies = default)
        {
            ActionIdOption = actionId;
            ActionNameOption = actionName;
            AuthorizationStrategiesOption = authorizationStrategies;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ActionId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ActionIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ActionId
        /// </summary>
        [JsonPropertyName("actionId")]
        public int? ActionId { get { return this.ActionIdOption; } set { this.ActionIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ActionName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ActionNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets ActionName
        /// </summary>
        [JsonPropertyName("actionName")]
        public string? ActionName { get { return this.ActionNameOption; } set { this.ActionNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of AuthorizationStrategies
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<AuthorizationStrategyModelForAction>?> AuthorizationStrategiesOption { get; private set; }

        /// <summary>
        /// Gets or Sets AuthorizationStrategies
        /// </summary>
        [JsonPropertyName("authorizationStrategies")]
        public List<AuthorizationStrategyModelForAction>? AuthorizationStrategies { get { return this.AuthorizationStrategiesOption; } set { this.AuthorizationStrategiesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ActionWithAuthorizationStrategy {\n");
            sb.Append("  ActionId: ").Append(ActionId).Append("\n");
            sb.Append("  ActionName: ").Append(ActionName).Append("\n");
            sb.Append("  AuthorizationStrategies: ").Append(AuthorizationStrategies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ActionWithAuthorizationStrategy" />
    /// </summary>
    public class ActionWithAuthorizationStrategyJsonConverter : JsonConverter<ActionWithAuthorizationStrategy>
    {
        /// <summary>
        /// Deserializes json to <see cref="ActionWithAuthorizationStrategy" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ActionWithAuthorizationStrategy Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> actionId = default;
            Option<string?> actionName = default;
            Option<List<AuthorizationStrategyModelForAction>?> authorizationStrategies = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "actionId":
                            actionId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "actionName":
                            actionName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "authorizationStrategies":
                            authorizationStrategies = new Option<List<AuthorizationStrategyModelForAction>?>(JsonSerializer.Deserialize<List<AuthorizationStrategyModelForAction>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (actionId.IsSet && actionId.Value == null)
                throw new ArgumentNullException(nameof(actionId), "Property is not nullable for class ActionWithAuthorizationStrategy.");

            return new ActionWithAuthorizationStrategy(actionId, actionName, authorizationStrategies);
        }

        /// <summary>
        /// Serializes a <see cref="ActionWithAuthorizationStrategy" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="actionWithAuthorizationStrategy"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ActionWithAuthorizationStrategy actionWithAuthorizationStrategy, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, actionWithAuthorizationStrategy, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ActionWithAuthorizationStrategy" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="actionWithAuthorizationStrategy"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ActionWithAuthorizationStrategy actionWithAuthorizationStrategy, JsonSerializerOptions jsonSerializerOptions)
        {
            if (actionWithAuthorizationStrategy.ActionIdOption.IsSet)
                writer.WriteNumber("actionId", actionWithAuthorizationStrategy.ActionIdOption.Value!.Value);

            if (actionWithAuthorizationStrategy.ActionNameOption.IsSet)
                if (actionWithAuthorizationStrategy.ActionNameOption.Value != null)
                    writer.WriteString("actionName", actionWithAuthorizationStrategy.ActionName);
                else
                    writer.WriteNull("actionName");

            if (actionWithAuthorizationStrategy.AuthorizationStrategiesOption.IsSet)
                if (actionWithAuthorizationStrategy.AuthorizationStrategiesOption.Value != null)
                {
                    writer.WritePropertyName("authorizationStrategies");
                    JsonSerializer.Serialize(writer, actionWithAuthorizationStrategy.AuthorizationStrategies, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("authorizationStrategies");
        }
    }
}
