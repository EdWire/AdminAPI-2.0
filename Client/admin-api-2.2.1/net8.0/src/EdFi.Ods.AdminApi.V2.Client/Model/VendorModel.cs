// <auto-generated>
/*
 * Admin API Documentation
 *
 * The Ed-Fi Admin API is a REST API-based administrative interface for managing vendors, applications, client credentials, and authorization rules for accessing an Ed-Fi API.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.Ods.AdminApi.V2.Client.Client;

namespace EdFi.Ods.AdminApi.V2.Client.Model
{
    /// <summary>
    /// VendorModel
    /// </summary>
    public partial class VendorModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VendorModel" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="company">company</param>
        /// <param name="namespacePrefixes">namespacePrefixes</param>
        /// <param name="contactName">contactName</param>
        /// <param name="contactEmailAddress">contactEmailAddress</param>
        [JsonConstructor]
        public VendorModel(Option<int?> id = default, Option<string?> company = default, Option<string?> namespacePrefixes = default, Option<string?> contactName = default, Option<string?> contactEmailAddress = default)
        {
            IdOption = id;
            CompanyOption = company;
            NamespacePrefixesOption = namespacePrefixes;
            ContactNameOption = contactName;
            ContactEmailAddressOption = contactEmailAddress;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Company
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CompanyOption { get; private set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [JsonPropertyName("company")]
        public string? Company { get { return this.CompanyOption; } set { this.CompanyOption = new(value); } }

        /// <summary>
        /// Used to track the state of NamespacePrefixes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NamespacePrefixesOption { get; private set; }

        /// <summary>
        /// Gets or Sets NamespacePrefixes
        /// </summary>
        [JsonPropertyName("namespacePrefixes")]
        public string? NamespacePrefixes { get { return this.NamespacePrefixesOption; } set { this.NamespacePrefixesOption = new(value); } }

        /// <summary>
        /// Used to track the state of ContactName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ContactNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets ContactName
        /// </summary>
        [JsonPropertyName("contactName")]
        public string? ContactName { get { return this.ContactNameOption; } set { this.ContactNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of ContactEmailAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ContactEmailAddressOption { get; private set; }

        /// <summary>
        /// Gets or Sets ContactEmailAddress
        /// </summary>
        [JsonPropertyName("contactEmailAddress")]
        public string? ContactEmailAddress { get { return this.ContactEmailAddressOption; } set { this.ContactEmailAddressOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VendorModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  NamespacePrefixes: ").Append(NamespacePrefixes).Append("\n");
            sb.Append("  ContactName: ").Append(ContactName).Append("\n");
            sb.Append("  ContactEmailAddress: ").Append(ContactEmailAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="VendorModel" />
    /// </summary>
    public class VendorModelJsonConverter : JsonConverter<VendorModel>
    {
        /// <summary>
        /// Deserializes json to <see cref="VendorModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override VendorModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<string?> company = default;
            Option<string?> namespacePrefixes = default;
            Option<string?> contactName = default;
            Option<string?> contactEmailAddress = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "company":
                            company = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "namespacePrefixes":
                            namespacePrefixes = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "contactName":
                            contactName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "contactEmailAddress":
                            contactEmailAddress = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new VendorModel(id, company, namespacePrefixes, contactName, contactEmailAddress);
        }

        /// <summary>
        /// Serializes a <see cref="VendorModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="vendorModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, VendorModel vendorModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, vendorModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="VendorModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="vendorModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, VendorModel vendorModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (vendorModel.IdOption.IsSet)
                if (vendorModel.IdOption.Value != null)
                    writer.WriteNumber("id", vendorModel.IdOption.Value!.Value);
                else
                    writer.WriteNull("id");

            if (vendorModel.CompanyOption.IsSet)
                if (vendorModel.CompanyOption.Value != null)
                    writer.WriteString("company", vendorModel.Company);
                else
                    writer.WriteNull("company");

            if (vendorModel.NamespacePrefixesOption.IsSet)
                if (vendorModel.NamespacePrefixesOption.Value != null)
                    writer.WriteString("namespacePrefixes", vendorModel.NamespacePrefixes);
                else
                    writer.WriteNull("namespacePrefixes");

            if (vendorModel.ContactNameOption.IsSet)
                if (vendorModel.ContactNameOption.Value != null)
                    writer.WriteString("contactName", vendorModel.ContactName);
                else
                    writer.WriteNull("contactName");

            if (vendorModel.ContactEmailAddressOption.IsSet)
                if (vendorModel.ContactEmailAddressOption.Value != null)
                    writer.WriteString("contactEmailAddress", vendorModel.ContactEmailAddress);
                else
                    writer.WriteNull("contactEmailAddress");
        }
    }
}
