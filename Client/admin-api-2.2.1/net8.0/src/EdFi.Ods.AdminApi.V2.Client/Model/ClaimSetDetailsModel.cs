// <auto-generated>
/*
 * Admin API Documentation
 *
 * The Ed-Fi Admin API is a REST API-based administrative interface for managing vendors, applications, client credentials, and authorization rules for accessing an Ed-Fi API.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.Ods.AdminApi.V2.Client.Client;

namespace EdFi.Ods.AdminApi.V2.Client.Model
{
    /// <summary>
    /// ClaimSetDetailsModel
    /// </summary>
    public partial class ClaimSetDetailsModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClaimSetDetailsModel" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="name">name</param>
        /// <param name="isSystemReserved">isSystemReserved</param>
        /// <param name="applications">applications</param>
        /// <param name="resourceClaims">resourceClaims</param>
        [JsonConstructor]
        public ClaimSetDetailsModel(Option<int?> id = default, Option<string?> name = default, Option<bool?> isSystemReserved = default, Option<List<SimpleApplicationModel>?> applications = default, Option<List<ClaimSetResourceClaimModel>?> resourceClaims = default)
        {
            IdOption = id;
            NameOption = name;
            IsSystemReservedOption = isSystemReserved;
            ApplicationsOption = applications;
            ResourceClaimsOption = resourceClaims;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new(value); } }

        /// <summary>
        /// Used to track the state of IsSystemReserved
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsSystemReservedOption { get; }

        /// <summary>
        /// Gets or Sets IsSystemReserved
        /// </summary>
        [JsonPropertyName("_isSystemReserved")]
        public bool? IsSystemReserved { get { return this.IsSystemReservedOption; } }

        /// <summary>
        /// Used to track the state of Applications
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<SimpleApplicationModel>?> ApplicationsOption { get; }

        /// <summary>
        /// Gets or Sets Applications
        /// </summary>
        [JsonPropertyName("_applications")]
        public List<SimpleApplicationModel>? Applications { get { return this.ApplicationsOption; } }

        /// <summary>
        /// Used to track the state of ResourceClaims
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ClaimSetResourceClaimModel>?> ResourceClaimsOption { get; private set; }

        /// <summary>
        /// Gets or Sets ResourceClaims
        /// </summary>
        [JsonPropertyName("resourceClaims")]
        public List<ClaimSetResourceClaimModel>? ResourceClaims { get { return this.ResourceClaimsOption; } set { this.ResourceClaimsOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ClaimSetDetailsModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IsSystemReserved: ").Append(IsSystemReserved).Append("\n");
            sb.Append("  Applications: ").Append(Applications).Append("\n");
            sb.Append("  ResourceClaims: ").Append(ResourceClaims).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ClaimSetDetailsModel" />
    /// </summary>
    public class ClaimSetDetailsModelJsonConverter : JsonConverter<ClaimSetDetailsModel>
    {
        /// <summary>
        /// Deserializes json to <see cref="ClaimSetDetailsModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ClaimSetDetailsModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<string?> name = default;
            Option<bool?> isSystemReserved = default;
            Option<List<SimpleApplicationModel>?> applications = default;
            Option<List<ClaimSetResourceClaimModel>?> resourceClaims = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "_isSystemReserved":
                            isSystemReserved = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "_applications":
                            applications = new Option<List<SimpleApplicationModel>?>(JsonSerializer.Deserialize<List<SimpleApplicationModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "resourceClaims":
                            resourceClaims = new Option<List<ClaimSetResourceClaimModel>?>(JsonSerializer.Deserialize<List<ClaimSetResourceClaimModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ClaimSetDetailsModel.");

            if (isSystemReserved.IsSet && isSystemReserved.Value == null)
                throw new ArgumentNullException(nameof(isSystemReserved), "Property is not nullable for class ClaimSetDetailsModel.");

            return new ClaimSetDetailsModel(id, name, isSystemReserved, applications, resourceClaims);
        }

        /// <summary>
        /// Serializes a <see cref="ClaimSetDetailsModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="claimSetDetailsModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ClaimSetDetailsModel claimSetDetailsModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, claimSetDetailsModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ClaimSetDetailsModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="claimSetDetailsModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ClaimSetDetailsModel claimSetDetailsModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (claimSetDetailsModel.IdOption.IsSet)
                writer.WriteNumber("id", claimSetDetailsModel.IdOption.Value!.Value);

            if (claimSetDetailsModel.NameOption.IsSet)
                if (claimSetDetailsModel.NameOption.Value != null)
                    writer.WriteString("name", claimSetDetailsModel.Name);
                else
                    writer.WriteNull("name");

            if (claimSetDetailsModel.IsSystemReservedOption.IsSet)
                writer.WriteBoolean("_isSystemReserved", claimSetDetailsModel.IsSystemReservedOption.Value!.Value);

            if (claimSetDetailsModel.ApplicationsOption.IsSet)
                if (claimSetDetailsModel.ApplicationsOption.Value != null)
                {
                    writer.WritePropertyName("_applications");
                    JsonSerializer.Serialize(writer, claimSetDetailsModel.Applications, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("_applications");
            if (claimSetDetailsModel.ResourceClaimsOption.IsSet)
                if (claimSetDetailsModel.ResourceClaimsOption.Value != null)
                {
                    writer.WritePropertyName("resourceClaims");
                    JsonSerializer.Serialize(writer, claimSetDetailsModel.ResourceClaims, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("resourceClaims");
        }
    }
}
