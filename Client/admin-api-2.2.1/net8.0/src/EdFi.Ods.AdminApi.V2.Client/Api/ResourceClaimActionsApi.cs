// <auto-generated>
/*
 * Admin API Documentation
 *
 * The Ed-Fi Admin API is a REST API-based administrative interface for managing vendors, applications, client credentials, and authorization rules for accessing an Ed-Fi API.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using EdFi.Ods.AdminApi.V2.Client.Client;
using EdFi.Ods.AdminApi.V2.Client.Model;
using System.Diagnostics.CodeAnalysis;

namespace EdFi.Ods.AdminApi.V2.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IResourceClaimActionsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ResourceClaimActionsApiEvents Events { get; }

        /// <summary>
        /// Retrieves all resourceClaimActions.
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="resourceName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ResourceClaimActionsGetApiResponse"/>&gt;</returns>
        Task<IV2ResourceClaimActionsGetApiResponse> V2ResourceClaimActionsGetAsync(Option<int> offset = default, Option<int> limit = default, Option<string> orderBy = default, Option<string> direction = default, Option<string> resourceName = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves all resourceClaimActions.
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="resourceName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ResourceClaimActionsGetApiResponse"/>?&gt;</returns>
        Task<IV2ResourceClaimActionsGetApiResponse?> V2ResourceClaimActionsGetOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> orderBy = default, Option<string> direction = default, Option<string> resourceName = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IV2ResourceClaimActionsGetApiResponse"/>
    /// </summary>
    public interface IV2ResourceClaimActionsGetApiResponse : EdFi.Ods.AdminApi.V2.Client.Client.IApiResponse, IOk<List<ResourceClaimActionModel>?>
    {
        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ResourceClaimActionsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV2ResourceClaimActionsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV2ResourceClaimActionsGet;

        internal void ExecuteOnV2ResourceClaimActionsGet(ResourceClaimActionsApi.V2ResourceClaimActionsGetApiResponse apiResponse)
        {
            OnV2ResourceClaimActionsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV2ResourceClaimActionsGet(Exception exception)
        {
            OnErrorV2ResourceClaimActionsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ResourceClaimActionsApi : IResourceClaimActionsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ResourceClaimActionsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ResourceClaimActionsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceClaimActionsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ResourceClaimActionsApi(ILogger<ResourceClaimActionsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ResourceClaimActionsApiEvents resourceClaimActionsApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ResourceClaimActionsApi>();
            HttpClient = httpClient;
            Events = resourceClaimActionsApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatV2ResourceClaimActionsGet(ref Option<int> offset, ref Option<int> limit, ref Option<string> orderBy, ref Option<string> direction, ref Option<string> resourceName);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="orderBy"></param>
        /// <param name="direction"></param>
        /// <param name="resourceName"></param>
        /// <returns></returns>
        private void ValidateV2ResourceClaimActionsGet(Option<string> orderBy, Option<string> direction, Option<string> resourceName)
        {
            if (orderBy.IsSet && orderBy.Value == null)
                throw new ArgumentNullException(nameof(orderBy));

            if (direction.IsSet && direction.Value == null)
                throw new ArgumentNullException(nameof(direction));

            if (resourceName.IsSet && resourceName.Value == null)
                throw new ArgumentNullException(nameof(resourceName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="orderBy"></param>
        /// <param name="direction"></param>
        /// <param name="resourceName"></param>
        private void AfterV2ResourceClaimActionsGetDefaultImplementation(IV2ResourceClaimActionsGetApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> orderBy, Option<string> direction, Option<string> resourceName)
        {
            bool suppressDefaultLog = false;
            AfterV2ResourceClaimActionsGet(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, orderBy, direction, resourceName);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="orderBy"></param>
        /// <param name="direction"></param>
        /// <param name="resourceName"></param>
        partial void AfterV2ResourceClaimActionsGet(ref bool suppressDefaultLog, IV2ResourceClaimActionsGetApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> orderBy, Option<string> direction, Option<string> resourceName);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="orderBy"></param>
        /// <param name="direction"></param>
        /// <param name="resourceName"></param>
        private void OnErrorV2ResourceClaimActionsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> orderBy, Option<string> direction, Option<string> resourceName)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV2ResourceClaimActionsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, orderBy, direction, resourceName);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="orderBy"></param>
        /// <param name="direction"></param>
        /// <param name="resourceName"></param>
        partial void OnErrorV2ResourceClaimActionsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> orderBy, Option<string> direction, Option<string> resourceName);

        /// <summary>
        /// Retrieves all resourceClaimActions. This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="resourceName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ResourceClaimActionsGetApiResponse"/>&gt;</returns>
        public async Task<IV2ResourceClaimActionsGetApiResponse?> V2ResourceClaimActionsGetOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> orderBy = default, Option<string> direction = default, Option<string> resourceName = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V2ResourceClaimActionsGetAsync(offset, limit, orderBy, direction, resourceName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves all resourceClaimActions. This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="resourceName"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ResourceClaimActionsGetApiResponse"/>&gt;</returns>
        public async Task<IV2ResourceClaimActionsGetApiResponse> V2ResourceClaimActionsGetAsync(Option<int> offset = default, Option<int> limit = default, Option<string> orderBy = default, Option<string> direction = default, Option<string> resourceName = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV2ResourceClaimActionsGet(orderBy, direction, resourceName);

                FormatV2ResourceClaimActionsGet(ref offset, ref limit, ref orderBy, ref direction, ref resourceName);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v2/resourceClaimActions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v2/resourceClaimActions");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (orderBy.IsSet)
                        parseQueryStringLocalVar["orderBy"] = ClientUtils.ParameterToString(orderBy.Value);

                    if (direction.IsSet)
                        parseQueryStringLocalVar["direction"] = ClientUtils.ParameterToString(direction.Value);

                    if (resourceName.IsSet)
                        parseQueryStringLocalVar["resourceName"] = ClientUtils.ParameterToString(resourceName.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V2ResourceClaimActionsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V2ResourceClaimActionsGetApiResponse>();

                        V2ResourceClaimActionsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/resourceClaimActions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV2ResourceClaimActionsGetDefaultImplementation(apiResponseLocalVar, offset, limit, orderBy, direction, resourceName);

                        Events.ExecuteOnV2ResourceClaimActionsGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV2ResourceClaimActionsGetDefaultImplementation(e, "/v2/resourceClaimActions", uriBuilderLocalVar.Path, offset, limit, orderBy, direction, resourceName);
                Events.ExecuteOnErrorV2ResourceClaimActionsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V2ResourceClaimActionsGetApiResponse"/>
        /// </summary>
        public partial class V2ResourceClaimActionsGetApiResponse : EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse, IV2ResourceClaimActionsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V2ResourceClaimActionsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V2ResourceClaimActionsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V2ResourceClaimActionsGetApiResponse(ILogger<V2ResourceClaimActionsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ResourceClaimActionModel>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ResourceClaimActionModel>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ResourceClaimActionModel>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
