// <auto-generated>
/*
 * Admin API Documentation
 *
 * The Ed-Fi Admin API is a REST API-based administrative interface for managing vendors, applications, client credentials, and authorization rules for accessing an Ed-Fi API.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using EdFi.Ods.AdminApi.V2.Client.Client;
using EdFi.Ods.AdminApi.V2.Client.Model;
using System.Diagnostics.CodeAnalysis;

namespace EdFi.Ods.AdminApi.V2.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IClaimSetsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ClaimSetsApiEvents Events { get; }

        /// <summary>
        /// Adds ResourceClaimAction association to a claim set.
        /// </summary>
        /// <remarks>
        /// Add resourceClaimAction association to claim set. At least one action should be enabled. Valid actions are read, create, update, delete, readchanges.  resouceclaimId is required fields.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="addResourceClaimOnClaimSetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsClaimSetIdResourceClaimActionsPostApiResponse"/>&gt;</returns>
        Task<IV2ClaimSetsClaimSetIdResourceClaimActionsPostApiResponse> V2ClaimSetsClaimSetIdResourceClaimActionsPostAsync(int claimSetId, AddResourceClaimOnClaimSetRequest addResourceClaimOnClaimSetRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Adds ResourceClaimAction association to a claim set.
        /// </summary>
        /// <remarks>
        /// Add resourceClaimAction association to claim set. At least one action should be enabled. Valid actions are read, create, update, delete, readchanges.  resouceclaimId is required fields.
        /// </remarks>
        /// <param name="claimSetId"></param>
        /// <param name="addResourceClaimOnClaimSetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsClaimSetIdResourceClaimActionsPostApiResponse"/>?&gt;</returns>
        Task<IV2ClaimSetsClaimSetIdResourceClaimActionsPostApiResponse?> V2ClaimSetsClaimSetIdResourceClaimActionsPostOrDefaultAsync(int claimSetId, AddResourceClaimOnClaimSetRequest addResourceClaimOnClaimSetRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes a resource claims association from a claimset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteApiResponse"/>&gt;</returns>
        Task<IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteApiResponse> V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteAsync(int claimSetId, int resourceClaimId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes a resource claims association from a claimset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteApiResponse"/>?&gt;</returns>
        Task<IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteApiResponse?> V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteOrDefaultAsync(int claimSetId, int resourceClaimId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Overrides the default authorization strategies on provided resource claim for a specific action.
        /// </summary>
        /// <remarks>
        /// Override the default authorization strategies on provided resource claim for a specific action.    ex: actionName &#x3D; read,  authorizationStrategies&#x3D; [ \&quot;Ownershipbased\&quot; ]
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="overrideAuthStategyOnClaimSetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostApiResponse"/>&gt;</returns>
        Task<IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostApiResponse> V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostAsync(int claimSetId, int resourceClaimId, OverrideAuthStategyOnClaimSetRequest overrideAuthStategyOnClaimSetRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Overrides the default authorization strategies on provided resource claim for a specific action.
        /// </summary>
        /// <remarks>
        /// Override the default authorization strategies on provided resource claim for a specific action.    ex: actionName &#x3D; read,  authorizationStrategies&#x3D; [ \&quot;Ownershipbased\&quot; ]
        /// </remarks>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="overrideAuthStategyOnClaimSetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostApiResponse"/>?&gt;</returns>
        Task<IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostApiResponse?> V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostOrDefaultAsync(int claimSetId, int resourceClaimId, OverrideAuthStategyOnClaimSetRequest overrideAuthStategyOnClaimSetRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates the ResourceClaimActions to a specific resource claim on a claimset.
        /// </summary>
        /// <remarks>
        /// Updates  the resourceClaimActions to a  specific resource claim on a claimset. At least one action should be enabled. Valid actions are read, create, update, delete, readchanges.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="editResourceClaimOnClaimSetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutApiResponse"/>&gt;</returns>
        Task<IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutApiResponse> V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutAsync(int claimSetId, int resourceClaimId, EditResourceClaimOnClaimSetRequest editResourceClaimOnClaimSetRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates the ResourceClaimActions to a specific resource claim on a claimset.
        /// </summary>
        /// <remarks>
        /// Updates  the resourceClaimActions to a  specific resource claim on a claimset. At least one action should be enabled. Valid actions are read, create, update, delete, readchanges.
        /// </remarks>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="editResourceClaimOnClaimSetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutApiResponse"/>?&gt;</returns>
        Task<IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutApiResponse?> V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutOrDefaultAsync(int claimSetId, int resourceClaimId, EditResourceClaimOnClaimSetRequest editResourceClaimOnClaimSetRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Resets to default authorization strategies on provided resource claim.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostApiResponse"/>&gt;</returns>
        Task<IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostApiResponse> V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostAsync(int claimSetId, int resourceClaimId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Resets to default authorization strategies on provided resource claim.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostApiResponse"/>?&gt;</returns>
        Task<IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostApiResponse?> V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostOrDefaultAsync(int claimSetId, int resourceClaimId, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Copies the existing claimset and create a new one.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyClaimSetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsCopyPostApiResponse"/>&gt;</returns>
        Task<IV2ClaimSetsCopyPostApiResponse> V2ClaimSetsCopyPostAsync(CopyClaimSetRequest copyClaimSetRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Copies the existing claimset and create a new one.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="copyClaimSetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsCopyPostApiResponse"/>?&gt;</returns>
        Task<IV2ClaimSetsCopyPostApiResponse?> V2ClaimSetsCopyPostOrDefaultAsync(CopyClaimSetRequest copyClaimSetRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves all claimSets.
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="id">Claim set id (optional)</param>
        /// <param name="name">Claim set name (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsGetApiResponse"/>&gt;</returns>
        Task<IV2ClaimSetsGetApiResponse> V2ClaimSetsGetAsync(Option<int> offset = default, Option<int> limit = default, Option<string> orderBy = default, Option<string> direction = default, Option<int> id = default, Option<string> name = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves all claimSets.
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="id">Claim set id (optional)</param>
        /// <param name="name">Claim set name (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsGetApiResponse"/>?&gt;</returns>
        Task<IV2ClaimSetsGetApiResponse?> V2ClaimSetsGetOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> orderBy = default, Option<string> direction = default, Option<int> id = default, Option<string> name = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes an existing claimSet using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsIdDeleteApiResponse"/>&gt;</returns>
        Task<IV2ClaimSetsIdDeleteApiResponse> V2ClaimSetsIdDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes an existing claimSet using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsIdDeleteApiResponse"/>?&gt;</returns>
        Task<IV2ClaimSetsIdDeleteApiResponse?> V2ClaimSetsIdDeleteOrDefaultAsync(int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Exports a specific claimset by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsIdExportGetApiResponse"/>&gt;</returns>
        Task<IV2ClaimSetsIdExportGetApiResponse> V2ClaimSetsIdExportGetAsync(int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Exports a specific claimset by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsIdExportGetApiResponse"/>?&gt;</returns>
        Task<IV2ClaimSetsIdExportGetApiResponse?> V2ClaimSetsIdExportGetOrDefaultAsync(int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific claimSet based on the identifier.
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsIdGetApiResponse"/>&gt;</returns>
        Task<IV2ClaimSetsIdGetApiResponse> V2ClaimSetsIdGetAsync(int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific claimSet based on the identifier.
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsIdGetApiResponse"/>?&gt;</returns>
        Task<IV2ClaimSetsIdGetApiResponse?> V2ClaimSetsIdGetOrDefaultAsync(int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates claimSet based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="editClaimSetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsIdPutApiResponse"/>&gt;</returns>
        Task<IV2ClaimSetsIdPutApiResponse> V2ClaimSetsIdPutAsync(int id, EditClaimSetRequest editClaimSetRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates claimSet based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="editClaimSetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsIdPutApiResponse"/>?&gt;</returns>
        Task<IV2ClaimSetsIdPutApiResponse?> V2ClaimSetsIdPutOrDefaultAsync(int id, EditClaimSetRequest editClaimSetRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Imports a new claimset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="importClaimSetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsImportPostApiResponse"/>&gt;</returns>
        Task<IV2ClaimSetsImportPostApiResponse> V2ClaimSetsImportPostAsync(ImportClaimSetRequest importClaimSetRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Imports a new claimset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="importClaimSetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsImportPostApiResponse"/>?&gt;</returns>
        Task<IV2ClaimSetsImportPostApiResponse?> V2ClaimSetsImportPostOrDefaultAsync(ImportClaimSetRequest importClaimSetRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates claimSet based on the supplied values.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addClaimSetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsPostApiResponse"/>&gt;</returns>
        Task<IV2ClaimSetsPostApiResponse> V2ClaimSetsPostAsync(AddClaimSetRequest addClaimSetRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates claimSet based on the supplied values.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <param name="addClaimSetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsPostApiResponse"/>?&gt;</returns>
        Task<IV2ClaimSetsPostApiResponse?> V2ClaimSetsPostOrDefaultAsync(AddClaimSetRequest addClaimSetRequest, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IV2ClaimSetsClaimSetIdResourceClaimActionsPostApiResponse"/>
    /// </summary>
    public interface IV2ClaimSetsClaimSetIdResourceClaimActionsPostApiResponse : EdFi.Ods.AdminApi.V2.Client.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteApiResponse"/>
    /// </summary>
    public interface IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteApiResponse : EdFi.Ods.AdminApi.V2.Client.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostApiResponse"/>
    /// </summary>
    public interface IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostApiResponse : EdFi.Ods.AdminApi.V2.Client.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutApiResponse"/>
    /// </summary>
    public interface IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutApiResponse : EdFi.Ods.AdminApi.V2.Client.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostApiResponse"/>
    /// </summary>
    public interface IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostApiResponse : EdFi.Ods.AdminApi.V2.Client.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV2ClaimSetsCopyPostApiResponse"/>
    /// </summary>
    public interface IV2ClaimSetsCopyPostApiResponse : EdFi.Ods.AdminApi.V2.Client.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="IV2ClaimSetsGetApiResponse"/>
    /// </summary>
    public interface IV2ClaimSetsGetApiResponse : EdFi.Ods.AdminApi.V2.Client.Client.IApiResponse, IOk<List<ClaimSetModel>?>
    {
        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV2ClaimSetsIdDeleteApiResponse"/>
    /// </summary>
    public interface IV2ClaimSetsIdDeleteApiResponse : EdFi.Ods.AdminApi.V2.Client.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV2ClaimSetsIdExportGetApiResponse"/>
    /// </summary>
    public interface IV2ClaimSetsIdExportGetApiResponse : EdFi.Ods.AdminApi.V2.Client.Client.IApiResponse, IOk<EdFi.Ods.AdminApi.V2.Client.Model.ClaimSetDetailsModel?>
    {
        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV2ClaimSetsIdGetApiResponse"/>
    /// </summary>
    public interface IV2ClaimSetsIdGetApiResponse : EdFi.Ods.AdminApi.V2.Client.Client.IApiResponse, IOk<EdFi.Ods.AdminApi.V2.Client.Model.ClaimSetDetailsModel?>
    {
        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV2ClaimSetsIdPutApiResponse"/>
    /// </summary>
    public interface IV2ClaimSetsIdPutApiResponse : EdFi.Ods.AdminApi.V2.Client.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV2ClaimSetsImportPostApiResponse"/>
    /// </summary>
    public interface IV2ClaimSetsImportPostApiResponse : EdFi.Ods.AdminApi.V2.Client.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// The <see cref="IV2ClaimSetsPostApiResponse"/>
    /// </summary>
    public interface IV2ClaimSetsPostApiResponse : EdFi.Ods.AdminApi.V2.Client.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ClaimSetsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV2ClaimSetsClaimSetIdResourceClaimActionsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV2ClaimSetsClaimSetIdResourceClaimActionsPost;

        internal void ExecuteOnV2ClaimSetsClaimSetIdResourceClaimActionsPost(ClaimSetsApi.V2ClaimSetsClaimSetIdResourceClaimActionsPostApiResponse apiResponse)
        {
            OnV2ClaimSetsClaimSetIdResourceClaimActionsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV2ClaimSetsClaimSetIdResourceClaimActionsPost(Exception exception)
        {
            OnErrorV2ClaimSetsClaimSetIdResourceClaimActionsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDelete;

        internal void ExecuteOnV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDelete(ClaimSetsApi.V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteApiResponse apiResponse)
        {
            OnV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDelete(Exception exception)
        {
            OnErrorV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPost;

        internal void ExecuteOnV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPost(ClaimSetsApi.V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostApiResponse apiResponse)
        {
            OnV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPost(Exception exception)
        {
            OnErrorV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPut;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPut;

        internal void ExecuteOnV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPut(ClaimSetsApi.V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutApiResponse apiResponse)
        {
            OnV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPut?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPut(Exception exception)
        {
            OnErrorV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPut?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPost;

        internal void ExecuteOnV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPost(ClaimSetsApi.V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostApiResponse apiResponse)
        {
            OnV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPost(Exception exception)
        {
            OnErrorV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV2ClaimSetsCopyPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV2ClaimSetsCopyPost;

        internal void ExecuteOnV2ClaimSetsCopyPost(ClaimSetsApi.V2ClaimSetsCopyPostApiResponse apiResponse)
        {
            OnV2ClaimSetsCopyPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV2ClaimSetsCopyPost(Exception exception)
        {
            OnErrorV2ClaimSetsCopyPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV2ClaimSetsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV2ClaimSetsGet;

        internal void ExecuteOnV2ClaimSetsGet(ClaimSetsApi.V2ClaimSetsGetApiResponse apiResponse)
        {
            OnV2ClaimSetsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV2ClaimSetsGet(Exception exception)
        {
            OnErrorV2ClaimSetsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV2ClaimSetsIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV2ClaimSetsIdDelete;

        internal void ExecuteOnV2ClaimSetsIdDelete(ClaimSetsApi.V2ClaimSetsIdDeleteApiResponse apiResponse)
        {
            OnV2ClaimSetsIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV2ClaimSetsIdDelete(Exception exception)
        {
            OnErrorV2ClaimSetsIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV2ClaimSetsIdExportGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV2ClaimSetsIdExportGet;

        internal void ExecuteOnV2ClaimSetsIdExportGet(ClaimSetsApi.V2ClaimSetsIdExportGetApiResponse apiResponse)
        {
            OnV2ClaimSetsIdExportGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV2ClaimSetsIdExportGet(Exception exception)
        {
            OnErrorV2ClaimSetsIdExportGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV2ClaimSetsIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV2ClaimSetsIdGet;

        internal void ExecuteOnV2ClaimSetsIdGet(ClaimSetsApi.V2ClaimSetsIdGetApiResponse apiResponse)
        {
            OnV2ClaimSetsIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV2ClaimSetsIdGet(Exception exception)
        {
            OnErrorV2ClaimSetsIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV2ClaimSetsIdPut;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV2ClaimSetsIdPut;

        internal void ExecuteOnV2ClaimSetsIdPut(ClaimSetsApi.V2ClaimSetsIdPutApiResponse apiResponse)
        {
            OnV2ClaimSetsIdPut?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV2ClaimSetsIdPut(Exception exception)
        {
            OnErrorV2ClaimSetsIdPut?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV2ClaimSetsImportPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV2ClaimSetsImportPost;

        internal void ExecuteOnV2ClaimSetsImportPost(ClaimSetsApi.V2ClaimSetsImportPostApiResponse apiResponse)
        {
            OnV2ClaimSetsImportPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV2ClaimSetsImportPost(Exception exception)
        {
            OnErrorV2ClaimSetsImportPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnV2ClaimSetsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorV2ClaimSetsPost;

        internal void ExecuteOnV2ClaimSetsPost(ClaimSetsApi.V2ClaimSetsPostApiResponse apiResponse)
        {
            OnV2ClaimSetsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV2ClaimSetsPost(Exception exception)
        {
            OnErrorV2ClaimSetsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ClaimSetsApi : IClaimSetsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ClaimSetsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ClaimSetsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClaimSetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClaimSetsApi(ILogger<ClaimSetsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ClaimSetsApiEvents claimSetsApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ClaimSetsApi>();
            HttpClient = httpClient;
            Events = claimSetsApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatV2ClaimSetsClaimSetIdResourceClaimActionsPost(ref int claimSetId, AddResourceClaimOnClaimSetRequest addResourceClaimOnClaimSetRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="addResourceClaimOnClaimSetRequest"></param>
        /// <returns></returns>
        private void ValidateV2ClaimSetsClaimSetIdResourceClaimActionsPost(AddResourceClaimOnClaimSetRequest addResourceClaimOnClaimSetRequest)
        {
            if (addResourceClaimOnClaimSetRequest == null)
                throw new ArgumentNullException(nameof(addResourceClaimOnClaimSetRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="claimSetId"></param>
        /// <param name="addResourceClaimOnClaimSetRequest"></param>
        private void AfterV2ClaimSetsClaimSetIdResourceClaimActionsPostDefaultImplementation(IV2ClaimSetsClaimSetIdResourceClaimActionsPostApiResponse apiResponseLocalVar, int claimSetId, AddResourceClaimOnClaimSetRequest addResourceClaimOnClaimSetRequest)
        {
            bool suppressDefaultLog = false;
            AfterV2ClaimSetsClaimSetIdResourceClaimActionsPost(ref suppressDefaultLog, apiResponseLocalVar, claimSetId, addResourceClaimOnClaimSetRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="claimSetId"></param>
        /// <param name="addResourceClaimOnClaimSetRequest"></param>
        partial void AfterV2ClaimSetsClaimSetIdResourceClaimActionsPost(ref bool suppressDefaultLog, IV2ClaimSetsClaimSetIdResourceClaimActionsPostApiResponse apiResponseLocalVar, int claimSetId, AddResourceClaimOnClaimSetRequest addResourceClaimOnClaimSetRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="claimSetId"></param>
        /// <param name="addResourceClaimOnClaimSetRequest"></param>
        private void OnErrorV2ClaimSetsClaimSetIdResourceClaimActionsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int claimSetId, AddResourceClaimOnClaimSetRequest addResourceClaimOnClaimSetRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV2ClaimSetsClaimSetIdResourceClaimActionsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, claimSetId, addResourceClaimOnClaimSetRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="claimSetId"></param>
        /// <param name="addResourceClaimOnClaimSetRequest"></param>
        partial void OnErrorV2ClaimSetsClaimSetIdResourceClaimActionsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int claimSetId, AddResourceClaimOnClaimSetRequest addResourceClaimOnClaimSetRequest);

        /// <summary>
        /// Adds ResourceClaimAction association to a claim set. Add resourceClaimAction association to claim set. At least one action should be enabled. Valid actions are read, create, update, delete, readchanges.  resouceclaimId is required fields.
        /// </summary>
        /// <param name="claimSetId"></param>
        /// <param name="addResourceClaimOnClaimSetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsClaimSetIdResourceClaimActionsPostApiResponse"/>&gt;</returns>
        public async Task<IV2ClaimSetsClaimSetIdResourceClaimActionsPostApiResponse?> V2ClaimSetsClaimSetIdResourceClaimActionsPostOrDefaultAsync(int claimSetId, AddResourceClaimOnClaimSetRequest addResourceClaimOnClaimSetRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V2ClaimSetsClaimSetIdResourceClaimActionsPostAsync(claimSetId, addResourceClaimOnClaimSetRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Adds ResourceClaimAction association to a claim set. Add resourceClaimAction association to claim set. At least one action should be enabled. Valid actions are read, create, update, delete, readchanges.  resouceclaimId is required fields.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="addResourceClaimOnClaimSetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsClaimSetIdResourceClaimActionsPostApiResponse"/>&gt;</returns>
        public async Task<IV2ClaimSetsClaimSetIdResourceClaimActionsPostApiResponse> V2ClaimSetsClaimSetIdResourceClaimActionsPostAsync(int claimSetId, AddResourceClaimOnClaimSetRequest addResourceClaimOnClaimSetRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV2ClaimSetsClaimSetIdResourceClaimActionsPost(addResourceClaimOnClaimSetRequest);

                FormatV2ClaimSetsClaimSetIdResourceClaimActionsPost(ref claimSetId, addResourceClaimOnClaimSetRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v2/claimSets/{claimSetId}/resourceClaimActions"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v2/claimSets/{claimSetId}/resourceClaimActions");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BclaimSetId%7D", Uri.EscapeDataString(claimSetId.ToString()));

                    httpRequestMessageLocalVar.Content = (addResourceClaimOnClaimSetRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(addResourceClaimOnClaimSetRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V2ClaimSetsClaimSetIdResourceClaimActionsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V2ClaimSetsClaimSetIdResourceClaimActionsPostApiResponse>();

                        V2ClaimSetsClaimSetIdResourceClaimActionsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/claimSets/{claimSetId}/resourceClaimActions", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV2ClaimSetsClaimSetIdResourceClaimActionsPostDefaultImplementation(apiResponseLocalVar, claimSetId, addResourceClaimOnClaimSetRequest);

                        Events.ExecuteOnV2ClaimSetsClaimSetIdResourceClaimActionsPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV2ClaimSetsClaimSetIdResourceClaimActionsPostDefaultImplementation(e, "/v2/claimSets/{claimSetId}/resourceClaimActions", uriBuilderLocalVar.Path, claimSetId, addResourceClaimOnClaimSetRequest);
                Events.ExecuteOnErrorV2ClaimSetsClaimSetIdResourceClaimActionsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V2ClaimSetsClaimSetIdResourceClaimActionsPostApiResponse"/>
        /// </summary>
        public partial class V2ClaimSetsClaimSetIdResourceClaimActionsPostApiResponse : EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse, IV2ClaimSetsClaimSetIdResourceClaimActionsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V2ClaimSetsClaimSetIdResourceClaimActionsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V2ClaimSetsClaimSetIdResourceClaimActionsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V2ClaimSetsClaimSetIdResourceClaimActionsPostApiResponse(ILogger<V2ClaimSetsClaimSetIdResourceClaimActionsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDelete(ref int claimSetId, ref int resourceClaimId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        private void AfterV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteDefaultImplementation(IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteApiResponse apiResponseLocalVar, int claimSetId, int resourceClaimId)
        {
            bool suppressDefaultLog = false;
            AfterV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDelete(ref suppressDefaultLog, apiResponseLocalVar, claimSetId, resourceClaimId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        partial void AfterV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDelete(ref bool suppressDefaultLog, IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteApiResponse apiResponseLocalVar, int claimSetId, int resourceClaimId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        private void OnErrorV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int claimSetId, int resourceClaimId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, claimSetId, resourceClaimId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        partial void OnErrorV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int claimSetId, int resourceClaimId);

        /// <summary>
        /// Deletes a resource claims association from a claimset 
        /// </summary>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteApiResponse?> V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteOrDefaultAsync(int claimSetId, int resourceClaimId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteAsync(claimSetId, resourceClaimId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes a resource claims association from a claimset 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteApiResponse> V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteAsync(int claimSetId, int resourceClaimId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDelete(ref claimSetId, ref resourceClaimId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v2/claimSets/{claimSetId}/resourceClaimActions/{resourceClaimId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v2/claimSets/{claimSetId}/resourceClaimActions/{resourceClaimId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BclaimSetId%7D", Uri.EscapeDataString(claimSetId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BresourceClaimId%7D", Uri.EscapeDataString(resourceClaimId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteApiResponse>();

                        V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/claimSets/{claimSetId}/resourceClaimActions/{resourceClaimId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteDefaultImplementation(apiResponseLocalVar, claimSetId, resourceClaimId);

                        Events.ExecuteOnV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteDefaultImplementation(e, "/v2/claimSets/{claimSetId}/resourceClaimActions/{resourceClaimId}", uriBuilderLocalVar.Path, claimSetId, resourceClaimId);
                Events.ExecuteOnErrorV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteApiResponse"/>
        /// </summary>
        public partial class V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteApiResponse : EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse, IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteApiResponse(ILogger<V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPost(ref int claimSetId, ref int resourceClaimId, OverrideAuthStategyOnClaimSetRequest overrideAuthStategyOnClaimSetRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="overrideAuthStategyOnClaimSetRequest"></param>
        /// <returns></returns>
        private void ValidateV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPost(OverrideAuthStategyOnClaimSetRequest overrideAuthStategyOnClaimSetRequest)
        {
            if (overrideAuthStategyOnClaimSetRequest == null)
                throw new ArgumentNullException(nameof(overrideAuthStategyOnClaimSetRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="overrideAuthStategyOnClaimSetRequest"></param>
        private void AfterV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostDefaultImplementation(IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostApiResponse apiResponseLocalVar, int claimSetId, int resourceClaimId, OverrideAuthStategyOnClaimSetRequest overrideAuthStategyOnClaimSetRequest)
        {
            bool suppressDefaultLog = false;
            AfterV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPost(ref suppressDefaultLog, apiResponseLocalVar, claimSetId, resourceClaimId, overrideAuthStategyOnClaimSetRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="overrideAuthStategyOnClaimSetRequest"></param>
        partial void AfterV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPost(ref bool suppressDefaultLog, IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostApiResponse apiResponseLocalVar, int claimSetId, int resourceClaimId, OverrideAuthStategyOnClaimSetRequest overrideAuthStategyOnClaimSetRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="overrideAuthStategyOnClaimSetRequest"></param>
        private void OnErrorV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int claimSetId, int resourceClaimId, OverrideAuthStategyOnClaimSetRequest overrideAuthStategyOnClaimSetRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, claimSetId, resourceClaimId, overrideAuthStategyOnClaimSetRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="overrideAuthStategyOnClaimSetRequest"></param>
        partial void OnErrorV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int claimSetId, int resourceClaimId, OverrideAuthStategyOnClaimSetRequest overrideAuthStategyOnClaimSetRequest);

        /// <summary>
        /// Overrides the default authorization strategies on provided resource claim for a specific action. Override the default authorization strategies on provided resource claim for a specific action.    ex: actionName &#x3D; read,  authorizationStrategies&#x3D; [ \&quot;Ownershipbased\&quot; ]
        /// </summary>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="overrideAuthStategyOnClaimSetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostApiResponse"/>&gt;</returns>
        public async Task<IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostApiResponse?> V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostOrDefaultAsync(int claimSetId, int resourceClaimId, OverrideAuthStategyOnClaimSetRequest overrideAuthStategyOnClaimSetRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostAsync(claimSetId, resourceClaimId, overrideAuthStategyOnClaimSetRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Overrides the default authorization strategies on provided resource claim for a specific action. Override the default authorization strategies on provided resource claim for a specific action.    ex: actionName &#x3D; read,  authorizationStrategies&#x3D; [ \&quot;Ownershipbased\&quot; ]
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="overrideAuthStategyOnClaimSetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostApiResponse"/>&gt;</returns>
        public async Task<IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostApiResponse> V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostAsync(int claimSetId, int resourceClaimId, OverrideAuthStategyOnClaimSetRequest overrideAuthStategyOnClaimSetRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPost(overrideAuthStategyOnClaimSetRequest);

                FormatV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPost(ref claimSetId, ref resourceClaimId, overrideAuthStategyOnClaimSetRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v2/claimSets/{claimSetId}/resourceClaimActions/{resourceClaimId}/overrideAuthorizationStrategy"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v2/claimSets/{claimSetId}/resourceClaimActions/{resourceClaimId}/overrideAuthorizationStrategy");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BclaimSetId%7D", Uri.EscapeDataString(claimSetId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BresourceClaimId%7D", Uri.EscapeDataString(resourceClaimId.ToString()));

                    httpRequestMessageLocalVar.Content = (overrideAuthStategyOnClaimSetRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(overrideAuthStategyOnClaimSetRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostApiResponse>();

                        V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/claimSets/{claimSetId}/resourceClaimActions/{resourceClaimId}/overrideAuthorizationStrategy", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostDefaultImplementation(apiResponseLocalVar, claimSetId, resourceClaimId, overrideAuthStategyOnClaimSetRequest);

                        Events.ExecuteOnV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostDefaultImplementation(e, "/v2/claimSets/{claimSetId}/resourceClaimActions/{resourceClaimId}/overrideAuthorizationStrategy", uriBuilderLocalVar.Path, claimSetId, resourceClaimId, overrideAuthStategyOnClaimSetRequest);
                Events.ExecuteOnErrorV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostApiResponse"/>
        /// </summary>
        public partial class V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostApiResponse : EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse, IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostApiResponse(ILogger<V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPut(ref int claimSetId, ref int resourceClaimId, EditResourceClaimOnClaimSetRequest editResourceClaimOnClaimSetRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="editResourceClaimOnClaimSetRequest"></param>
        /// <returns></returns>
        private void ValidateV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPut(EditResourceClaimOnClaimSetRequest editResourceClaimOnClaimSetRequest)
        {
            if (editResourceClaimOnClaimSetRequest == null)
                throw new ArgumentNullException(nameof(editResourceClaimOnClaimSetRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="editResourceClaimOnClaimSetRequest"></param>
        private void AfterV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutDefaultImplementation(IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutApiResponse apiResponseLocalVar, int claimSetId, int resourceClaimId, EditResourceClaimOnClaimSetRequest editResourceClaimOnClaimSetRequest)
        {
            bool suppressDefaultLog = false;
            AfterV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPut(ref suppressDefaultLog, apiResponseLocalVar, claimSetId, resourceClaimId, editResourceClaimOnClaimSetRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="editResourceClaimOnClaimSetRequest"></param>
        partial void AfterV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPut(ref bool suppressDefaultLog, IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutApiResponse apiResponseLocalVar, int claimSetId, int resourceClaimId, EditResourceClaimOnClaimSetRequest editResourceClaimOnClaimSetRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="editResourceClaimOnClaimSetRequest"></param>
        private void OnErrorV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int claimSetId, int resourceClaimId, EditResourceClaimOnClaimSetRequest editResourceClaimOnClaimSetRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPut(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, claimSetId, resourceClaimId, editResourceClaimOnClaimSetRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="editResourceClaimOnClaimSetRequest"></param>
        partial void OnErrorV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPut(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int claimSetId, int resourceClaimId, EditResourceClaimOnClaimSetRequest editResourceClaimOnClaimSetRequest);

        /// <summary>
        /// Updates the ResourceClaimActions to a specific resource claim on a claimset. Updates  the resourceClaimActions to a  specific resource claim on a claimset. At least one action should be enabled. Valid actions are read, create, update, delete, readchanges.
        /// </summary>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="editResourceClaimOnClaimSetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutApiResponse"/>&gt;</returns>
        public async Task<IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutApiResponse?> V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutOrDefaultAsync(int claimSetId, int resourceClaimId, EditResourceClaimOnClaimSetRequest editResourceClaimOnClaimSetRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutAsync(claimSetId, resourceClaimId, editResourceClaimOnClaimSetRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Updates the ResourceClaimActions to a specific resource claim on a claimset. Updates  the resourceClaimActions to a  specific resource claim on a claimset. At least one action should be enabled. Valid actions are read, create, update, delete, readchanges.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="editResourceClaimOnClaimSetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutApiResponse"/>&gt;</returns>
        public async Task<IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutApiResponse> V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutAsync(int claimSetId, int resourceClaimId, EditResourceClaimOnClaimSetRequest editResourceClaimOnClaimSetRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPut(editResourceClaimOnClaimSetRequest);

                FormatV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPut(ref claimSetId, ref resourceClaimId, editResourceClaimOnClaimSetRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v2/claimSets/{claimSetId}/resourceClaimActions/{resourceClaimId}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v2/claimSets/{claimSetId}/resourceClaimActions/{resourceClaimId}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BclaimSetId%7D", Uri.EscapeDataString(claimSetId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BresourceClaimId%7D", Uri.EscapeDataString(resourceClaimId.ToString()));

                    httpRequestMessageLocalVar.Content = (editResourceClaimOnClaimSetRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(editResourceClaimOnClaimSetRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutApiResponse>();

                        V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/claimSets/{claimSetId}/resourceClaimActions/{resourceClaimId}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutDefaultImplementation(apiResponseLocalVar, claimSetId, resourceClaimId, editResourceClaimOnClaimSetRequest);

                        Events.ExecuteOnV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPut(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutDefaultImplementation(e, "/v2/claimSets/{claimSetId}/resourceClaimActions/{resourceClaimId}", uriBuilderLocalVar.Path, claimSetId, resourceClaimId, editResourceClaimOnClaimSetRequest);
                Events.ExecuteOnErrorV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPut(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutApiResponse"/>
        /// </summary>
        public partial class V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutApiResponse : EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse, IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutApiResponse(ILogger<V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPost(ref int claimSetId, ref int resourceClaimId);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        private void AfterV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostDefaultImplementation(IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostApiResponse apiResponseLocalVar, int claimSetId, int resourceClaimId)
        {
            bool suppressDefaultLog = false;
            AfterV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPost(ref suppressDefaultLog, apiResponseLocalVar, claimSetId, resourceClaimId);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        partial void AfterV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPost(ref bool suppressDefaultLog, IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostApiResponse apiResponseLocalVar, int claimSetId, int resourceClaimId);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        private void OnErrorV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int claimSetId, int resourceClaimId)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, claimSetId, resourceClaimId);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        partial void OnErrorV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int claimSetId, int resourceClaimId);

        /// <summary>
        /// Resets to default authorization strategies on provided resource claim. 
        /// </summary>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostApiResponse"/>&gt;</returns>
        public async Task<IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostApiResponse?> V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostOrDefaultAsync(int claimSetId, int resourceClaimId, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostAsync(claimSetId, resourceClaimId, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Resets to default authorization strategies on provided resource claim. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostApiResponse"/>&gt;</returns>
        public async Task<IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostApiResponse> V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostAsync(int claimSetId, int resourceClaimId, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPost(ref claimSetId, ref resourceClaimId);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v2/claimSets/{claimSetId}/resourceClaimActions/{resourceClaimId}/resetAuthorizationStrategies"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v2/claimSets/{claimSetId}/resourceClaimActions/{resourceClaimId}/resetAuthorizationStrategies");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BclaimSetId%7D", Uri.EscapeDataString(claimSetId.ToString()));
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7BresourceClaimId%7D", Uri.EscapeDataString(resourceClaimId.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostApiResponse>();

                        V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/claimSets/{claimSetId}/resourceClaimActions/{resourceClaimId}/resetAuthorizationStrategies", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostDefaultImplementation(apiResponseLocalVar, claimSetId, resourceClaimId);

                        Events.ExecuteOnV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostDefaultImplementation(e, "/v2/claimSets/{claimSetId}/resourceClaimActions/{resourceClaimId}/resetAuthorizationStrategies", uriBuilderLocalVar.Path, claimSetId, resourceClaimId);
                Events.ExecuteOnErrorV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostApiResponse"/>
        /// </summary>
        public partial class V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostApiResponse : EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse, IV2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostApiResponse(ILogger<V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV2ClaimSetsCopyPost(CopyClaimSetRequest copyClaimSetRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="copyClaimSetRequest"></param>
        /// <returns></returns>
        private void ValidateV2ClaimSetsCopyPost(CopyClaimSetRequest copyClaimSetRequest)
        {
            if (copyClaimSetRequest == null)
                throw new ArgumentNullException(nameof(copyClaimSetRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="copyClaimSetRequest"></param>
        private void AfterV2ClaimSetsCopyPostDefaultImplementation(IV2ClaimSetsCopyPostApiResponse apiResponseLocalVar, CopyClaimSetRequest copyClaimSetRequest)
        {
            bool suppressDefaultLog = false;
            AfterV2ClaimSetsCopyPost(ref suppressDefaultLog, apiResponseLocalVar, copyClaimSetRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="copyClaimSetRequest"></param>
        partial void AfterV2ClaimSetsCopyPost(ref bool suppressDefaultLog, IV2ClaimSetsCopyPostApiResponse apiResponseLocalVar, CopyClaimSetRequest copyClaimSetRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="copyClaimSetRequest"></param>
        private void OnErrorV2ClaimSetsCopyPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CopyClaimSetRequest copyClaimSetRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV2ClaimSetsCopyPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, copyClaimSetRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="copyClaimSetRequest"></param>
        partial void OnErrorV2ClaimSetsCopyPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, CopyClaimSetRequest copyClaimSetRequest);

        /// <summary>
        /// Copies the existing claimset and create a new one. 
        /// </summary>
        /// <param name="copyClaimSetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsCopyPostApiResponse"/>&gt;</returns>
        public async Task<IV2ClaimSetsCopyPostApiResponse?> V2ClaimSetsCopyPostOrDefaultAsync(CopyClaimSetRequest copyClaimSetRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V2ClaimSetsCopyPostAsync(copyClaimSetRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Copies the existing claimset and create a new one. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyClaimSetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsCopyPostApiResponse"/>&gt;</returns>
        public async Task<IV2ClaimSetsCopyPostApiResponse> V2ClaimSetsCopyPostAsync(CopyClaimSetRequest copyClaimSetRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV2ClaimSetsCopyPost(copyClaimSetRequest);

                FormatV2ClaimSetsCopyPost(copyClaimSetRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v2/claimSets/copy"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v2/claimSets/copy");

                    httpRequestMessageLocalVar.Content = (copyClaimSetRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(copyClaimSetRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V2ClaimSetsCopyPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V2ClaimSetsCopyPostApiResponse>();

                        V2ClaimSetsCopyPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/claimSets/copy", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV2ClaimSetsCopyPostDefaultImplementation(apiResponseLocalVar, copyClaimSetRequest);

                        Events.ExecuteOnV2ClaimSetsCopyPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV2ClaimSetsCopyPostDefaultImplementation(e, "/v2/claimSets/copy", uriBuilderLocalVar.Path, copyClaimSetRequest);
                Events.ExecuteOnErrorV2ClaimSetsCopyPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V2ClaimSetsCopyPostApiResponse"/>
        /// </summary>
        public partial class V2ClaimSetsCopyPostApiResponse : EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse, IV2ClaimSetsCopyPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V2ClaimSetsCopyPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V2ClaimSetsCopyPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V2ClaimSetsCopyPostApiResponse(ILogger<V2ClaimSetsCopyPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV2ClaimSetsGet(ref Option<int> offset, ref Option<int> limit, ref Option<string> orderBy, ref Option<string> direction, ref Option<int> id, ref Option<string> name);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="orderBy"></param>
        /// <param name="direction"></param>
        /// <param name="name"></param>
        /// <returns></returns>
        private void ValidateV2ClaimSetsGet(Option<string> orderBy, Option<string> direction, Option<string> name)
        {
            if (orderBy.IsSet && orderBy.Value == null)
                throw new ArgumentNullException(nameof(orderBy));

            if (direction.IsSet && direction.Value == null)
                throw new ArgumentNullException(nameof(direction));

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="orderBy"></param>
        /// <param name="direction"></param>
        /// <param name="id"></param>
        /// <param name="name"></param>
        private void AfterV2ClaimSetsGetDefaultImplementation(IV2ClaimSetsGetApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> orderBy, Option<string> direction, Option<int> id, Option<string> name)
        {
            bool suppressDefaultLog = false;
            AfterV2ClaimSetsGet(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, orderBy, direction, id, name);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="orderBy"></param>
        /// <param name="direction"></param>
        /// <param name="id"></param>
        /// <param name="name"></param>
        partial void AfterV2ClaimSetsGet(ref bool suppressDefaultLog, IV2ClaimSetsGetApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> orderBy, Option<string> direction, Option<int> id, Option<string> name);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="orderBy"></param>
        /// <param name="direction"></param>
        /// <param name="id"></param>
        /// <param name="name"></param>
        private void OnErrorV2ClaimSetsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> orderBy, Option<string> direction, Option<int> id, Option<string> name)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV2ClaimSetsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, orderBy, direction, id, name);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="orderBy"></param>
        /// <param name="direction"></param>
        /// <param name="id"></param>
        /// <param name="name"></param>
        partial void OnErrorV2ClaimSetsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> orderBy, Option<string> direction, Option<int> id, Option<string> name);

        /// <summary>
        /// Retrieves all claimSets. This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="id">Claim set id (optional)</param>
        /// <param name="name">Claim set name (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsGetApiResponse"/>&gt;</returns>
        public async Task<IV2ClaimSetsGetApiResponse?> V2ClaimSetsGetOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> orderBy = default, Option<string> direction = default, Option<int> id = default, Option<string> name = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V2ClaimSetsGetAsync(offset, limit, orderBy, direction, id, name, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves all claimSets. This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="id">Claim set id (optional)</param>
        /// <param name="name">Claim set name (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsGetApiResponse"/>&gt;</returns>
        public async Task<IV2ClaimSetsGetApiResponse> V2ClaimSetsGetAsync(Option<int> offset = default, Option<int> limit = default, Option<string> orderBy = default, Option<string> direction = default, Option<int> id = default, Option<string> name = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV2ClaimSetsGet(orderBy, direction, name);

                FormatV2ClaimSetsGet(ref offset, ref limit, ref orderBy, ref direction, ref id, ref name);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v2/claimSets"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v2/claimSets");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (orderBy.IsSet)
                        parseQueryStringLocalVar["orderBy"] = ClientUtils.ParameterToString(orderBy.Value);

                    if (direction.IsSet)
                        parseQueryStringLocalVar["direction"] = ClientUtils.ParameterToString(direction.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (name.IsSet)
                        parseQueryStringLocalVar["name"] = ClientUtils.ParameterToString(name.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V2ClaimSetsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V2ClaimSetsGetApiResponse>();

                        V2ClaimSetsGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/claimSets", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV2ClaimSetsGetDefaultImplementation(apiResponseLocalVar, offset, limit, orderBy, direction, id, name);

                        Events.ExecuteOnV2ClaimSetsGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV2ClaimSetsGetDefaultImplementation(e, "/v2/claimSets", uriBuilderLocalVar.Path, offset, limit, orderBy, direction, id, name);
                Events.ExecuteOnErrorV2ClaimSetsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V2ClaimSetsGetApiResponse"/>
        /// </summary>
        public partial class V2ClaimSetsGetApiResponse : EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse, IV2ClaimSetsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V2ClaimSetsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V2ClaimSetsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V2ClaimSetsGetApiResponse(ILogger<V2ClaimSetsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ClaimSetModel>? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ClaimSetModel>>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out List<ClaimSetModel>? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV2ClaimSetsIdDelete(ref int id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterV2ClaimSetsIdDeleteDefaultImplementation(IV2ClaimSetsIdDeleteApiResponse apiResponseLocalVar, int id)
        {
            bool suppressDefaultLog = false;
            AfterV2ClaimSetsIdDelete(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterV2ClaimSetsIdDelete(ref bool suppressDefaultLog, IV2ClaimSetsIdDeleteApiResponse apiResponseLocalVar, int id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorV2ClaimSetsIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV2ClaimSetsIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorV2ClaimSetsIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id);

        /// <summary>
        /// Deletes an existing claimSet using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IV2ClaimSetsIdDeleteApiResponse?> V2ClaimSetsIdDeleteOrDefaultAsync(int id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V2ClaimSetsIdDeleteAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes an existing claimSet using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IV2ClaimSetsIdDeleteApiResponse> V2ClaimSetsIdDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatV2ClaimSetsIdDelete(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v2/claimSets/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v2/claimSets/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    httpRequestMessageLocalVar.Method = HttpMethod.Delete;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V2ClaimSetsIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V2ClaimSetsIdDeleteApiResponse>();

                        V2ClaimSetsIdDeleteApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/claimSets/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV2ClaimSetsIdDeleteDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnV2ClaimSetsIdDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV2ClaimSetsIdDeleteDefaultImplementation(e, "/v2/claimSets/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorV2ClaimSetsIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V2ClaimSetsIdDeleteApiResponse"/>
        /// </summary>
        public partial class V2ClaimSetsIdDeleteApiResponse : EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse, IV2ClaimSetsIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V2ClaimSetsIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V2ClaimSetsIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V2ClaimSetsIdDeleteApiResponse(ILogger<V2ClaimSetsIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV2ClaimSetsIdExportGet(ref int id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterV2ClaimSetsIdExportGetDefaultImplementation(IV2ClaimSetsIdExportGetApiResponse apiResponseLocalVar, int id)
        {
            bool suppressDefaultLog = false;
            AfterV2ClaimSetsIdExportGet(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterV2ClaimSetsIdExportGet(ref bool suppressDefaultLog, IV2ClaimSetsIdExportGetApiResponse apiResponseLocalVar, int id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorV2ClaimSetsIdExportGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV2ClaimSetsIdExportGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorV2ClaimSetsIdExportGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id);

        /// <summary>
        /// Exports a specific claimset by id 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsIdExportGetApiResponse"/>&gt;</returns>
        public async Task<IV2ClaimSetsIdExportGetApiResponse?> V2ClaimSetsIdExportGetOrDefaultAsync(int id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V2ClaimSetsIdExportGetAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Exports a specific claimset by id 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsIdExportGetApiResponse"/>&gt;</returns>
        public async Task<IV2ClaimSetsIdExportGetApiResponse> V2ClaimSetsIdExportGetAsync(int id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatV2ClaimSetsIdExportGet(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v2/claimSets/{id}/export"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v2/claimSets/{id}/export");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V2ClaimSetsIdExportGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V2ClaimSetsIdExportGetApiResponse>();

                        V2ClaimSetsIdExportGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/claimSets/{id}/export", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV2ClaimSetsIdExportGetDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnV2ClaimSetsIdExportGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV2ClaimSetsIdExportGetDefaultImplementation(e, "/v2/claimSets/{id}/export", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorV2ClaimSetsIdExportGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V2ClaimSetsIdExportGetApiResponse"/>
        /// </summary>
        public partial class V2ClaimSetsIdExportGetApiResponse : EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse, IV2ClaimSetsIdExportGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V2ClaimSetsIdExportGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V2ClaimSetsIdExportGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V2ClaimSetsIdExportGetApiResponse(ILogger<V2ClaimSetsIdExportGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.Ods.AdminApi.V2.Client.Model.ClaimSetDetailsModel? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.Ods.AdminApi.V2.Client.Model.ClaimSetDetailsModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.Ods.AdminApi.V2.Client.Model.ClaimSetDetailsModel? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV2ClaimSetsIdGet(ref int id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterV2ClaimSetsIdGetDefaultImplementation(IV2ClaimSetsIdGetApiResponse apiResponseLocalVar, int id)
        {
            bool suppressDefaultLog = false;
            AfterV2ClaimSetsIdGet(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterV2ClaimSetsIdGet(ref bool suppressDefaultLog, IV2ClaimSetsIdGetApiResponse apiResponseLocalVar, int id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorV2ClaimSetsIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV2ClaimSetsIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorV2ClaimSetsIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id);

        /// <summary>
        /// Retrieves a specific claimSet based on the identifier. This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsIdGetApiResponse"/>&gt;</returns>
        public async Task<IV2ClaimSetsIdGetApiResponse?> V2ClaimSetsIdGetOrDefaultAsync(int id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V2ClaimSetsIdGetAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a specific claimSet based on the identifier. This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsIdGetApiResponse"/>&gt;</returns>
        public async Task<IV2ClaimSetsIdGetApiResponse> V2ClaimSetsIdGetAsync(int id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatV2ClaimSetsIdGet(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v2/claimSets/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v2/claimSets/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string? acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));

                    httpRequestMessageLocalVar.Method = HttpMethod.Get;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V2ClaimSetsIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V2ClaimSetsIdGetApiResponse>();

                        V2ClaimSetsIdGetApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/claimSets/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV2ClaimSetsIdGetDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnV2ClaimSetsIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV2ClaimSetsIdGetDefaultImplementation(e, "/v2/claimSets/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorV2ClaimSetsIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V2ClaimSetsIdGetApiResponse"/>
        /// </summary>
        public partial class V2ClaimSetsIdGetApiResponse : EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse, IV2ClaimSetsIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V2ClaimSetsIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V2ClaimSetsIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V2ClaimSetsIdGetApiResponse(ILogger<V2ClaimSetsIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.Ods.AdminApi.V2.Client.Model.ClaimSetDetailsModel? Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.Ods.AdminApi.V2.Client.Model.ClaimSetDetailsModel>(RawContent, _jsonSerializerOptions)
                    : null;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk([NotNullWhen(true)]out EdFi.Ods.AdminApi.V2.Client.Model.ClaimSetDetailsModel? result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV2ClaimSetsIdPut(ref int id, EditClaimSetRequest editClaimSetRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="editClaimSetRequest"></param>
        /// <returns></returns>
        private void ValidateV2ClaimSetsIdPut(EditClaimSetRequest editClaimSetRequest)
        {
            if (editClaimSetRequest == null)
                throw new ArgumentNullException(nameof(editClaimSetRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="editClaimSetRequest"></param>
        private void AfterV2ClaimSetsIdPutDefaultImplementation(IV2ClaimSetsIdPutApiResponse apiResponseLocalVar, int id, EditClaimSetRequest editClaimSetRequest)
        {
            bool suppressDefaultLog = false;
            AfterV2ClaimSetsIdPut(ref suppressDefaultLog, apiResponseLocalVar, id, editClaimSetRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="editClaimSetRequest"></param>
        partial void AfterV2ClaimSetsIdPut(ref bool suppressDefaultLog, IV2ClaimSetsIdPutApiResponse apiResponseLocalVar, int id, EditClaimSetRequest editClaimSetRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="editClaimSetRequest"></param>
        private void OnErrorV2ClaimSetsIdPutDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id, EditClaimSetRequest editClaimSetRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV2ClaimSetsIdPut(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, editClaimSetRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="editClaimSetRequest"></param>
        partial void OnErrorV2ClaimSetsIdPut(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id, EditClaimSetRequest editClaimSetRequest);

        /// <summary>
        /// Updates claimSet based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="editClaimSetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsIdPutApiResponse"/>&gt;</returns>
        public async Task<IV2ClaimSetsIdPutApiResponse?> V2ClaimSetsIdPutOrDefaultAsync(int id, EditClaimSetRequest editClaimSetRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V2ClaimSetsIdPutAsync(id, editClaimSetRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Updates claimSet based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="editClaimSetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsIdPutApiResponse"/>&gt;</returns>
        public async Task<IV2ClaimSetsIdPutApiResponse> V2ClaimSetsIdPutAsync(int id, EditClaimSetRequest editClaimSetRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV2ClaimSetsIdPut(editClaimSetRequest);

                FormatV2ClaimSetsIdPut(ref id, editClaimSetRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v2/claimSets/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v2/claimSets/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (editClaimSetRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(editClaimSetRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Put;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V2ClaimSetsIdPutApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V2ClaimSetsIdPutApiResponse>();

                        V2ClaimSetsIdPutApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/claimSets/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV2ClaimSetsIdPutDefaultImplementation(apiResponseLocalVar, id, editClaimSetRequest);

                        Events.ExecuteOnV2ClaimSetsIdPut(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV2ClaimSetsIdPutDefaultImplementation(e, "/v2/claimSets/{id}", uriBuilderLocalVar.Path, id, editClaimSetRequest);
                Events.ExecuteOnErrorV2ClaimSetsIdPut(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V2ClaimSetsIdPutApiResponse"/>
        /// </summary>
        public partial class V2ClaimSetsIdPutApiResponse : EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse, IV2ClaimSetsIdPutApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V2ClaimSetsIdPutApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V2ClaimSetsIdPutApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V2ClaimSetsIdPutApiResponse(ILogger<V2ClaimSetsIdPutApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV2ClaimSetsImportPost(ImportClaimSetRequest importClaimSetRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="importClaimSetRequest"></param>
        /// <returns></returns>
        private void ValidateV2ClaimSetsImportPost(ImportClaimSetRequest importClaimSetRequest)
        {
            if (importClaimSetRequest == null)
                throw new ArgumentNullException(nameof(importClaimSetRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="importClaimSetRequest"></param>
        private void AfterV2ClaimSetsImportPostDefaultImplementation(IV2ClaimSetsImportPostApiResponse apiResponseLocalVar, ImportClaimSetRequest importClaimSetRequest)
        {
            bool suppressDefaultLog = false;
            AfterV2ClaimSetsImportPost(ref suppressDefaultLog, apiResponseLocalVar, importClaimSetRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="importClaimSetRequest"></param>
        partial void AfterV2ClaimSetsImportPost(ref bool suppressDefaultLog, IV2ClaimSetsImportPostApiResponse apiResponseLocalVar, ImportClaimSetRequest importClaimSetRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="importClaimSetRequest"></param>
        private void OnErrorV2ClaimSetsImportPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ImportClaimSetRequest importClaimSetRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV2ClaimSetsImportPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, importClaimSetRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="importClaimSetRequest"></param>
        partial void OnErrorV2ClaimSetsImportPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, ImportClaimSetRequest importClaimSetRequest);

        /// <summary>
        /// Imports a new claimset 
        /// </summary>
        /// <param name="importClaimSetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsImportPostApiResponse"/>&gt;</returns>
        public async Task<IV2ClaimSetsImportPostApiResponse?> V2ClaimSetsImportPostOrDefaultAsync(ImportClaimSetRequest importClaimSetRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V2ClaimSetsImportPostAsync(importClaimSetRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Imports a new claimset 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="importClaimSetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsImportPostApiResponse"/>&gt;</returns>
        public async Task<IV2ClaimSetsImportPostApiResponse> V2ClaimSetsImportPostAsync(ImportClaimSetRequest importClaimSetRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV2ClaimSetsImportPost(importClaimSetRequest);

                FormatV2ClaimSetsImportPost(importClaimSetRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v2/claimSets/import"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v2/claimSets/import");

                    httpRequestMessageLocalVar.Content = (importClaimSetRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(importClaimSetRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V2ClaimSetsImportPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V2ClaimSetsImportPostApiResponse>();

                        V2ClaimSetsImportPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/claimSets/import", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV2ClaimSetsImportPostDefaultImplementation(apiResponseLocalVar, importClaimSetRequest);

                        Events.ExecuteOnV2ClaimSetsImportPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV2ClaimSetsImportPostDefaultImplementation(e, "/v2/claimSets/import", uriBuilderLocalVar.Path, importClaimSetRequest);
                Events.ExecuteOnErrorV2ClaimSetsImportPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V2ClaimSetsImportPostApiResponse"/>
        /// </summary>
        public partial class V2ClaimSetsImportPostApiResponse : EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse, IV2ClaimSetsImportPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V2ClaimSetsImportPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V2ClaimSetsImportPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V2ClaimSetsImportPostApiResponse(ILogger<V2ClaimSetsImportPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV2ClaimSetsPost(AddClaimSetRequest addClaimSetRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="addClaimSetRequest"></param>
        /// <returns></returns>
        private void ValidateV2ClaimSetsPost(AddClaimSetRequest addClaimSetRequest)
        {
            if (addClaimSetRequest == null)
                throw new ArgumentNullException(nameof(addClaimSetRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="addClaimSetRequest"></param>
        private void AfterV2ClaimSetsPostDefaultImplementation(IV2ClaimSetsPostApiResponse apiResponseLocalVar, AddClaimSetRequest addClaimSetRequest)
        {
            bool suppressDefaultLog = false;
            AfterV2ClaimSetsPost(ref suppressDefaultLog, apiResponseLocalVar, addClaimSetRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="addClaimSetRequest"></param>
        partial void AfterV2ClaimSetsPost(ref bool suppressDefaultLog, IV2ClaimSetsPostApiResponse apiResponseLocalVar, AddClaimSetRequest addClaimSetRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="addClaimSetRequest"></param>
        private void OnErrorV2ClaimSetsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AddClaimSetRequest addClaimSetRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV2ClaimSetsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, addClaimSetRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="addClaimSetRequest"></param>
        partial void OnErrorV2ClaimSetsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AddClaimSetRequest addClaimSetRequest);

        /// <summary>
        /// Creates claimSet based on the supplied values. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <param name="addClaimSetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsPostApiResponse"/>&gt;</returns>
        public async Task<IV2ClaimSetsPostApiResponse?> V2ClaimSetsPostOrDefaultAsync(AddClaimSetRequest addClaimSetRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V2ClaimSetsPostAsync(addClaimSetRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creates claimSet based on the supplied values. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addClaimSetRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2ClaimSetsPostApiResponse"/>&gt;</returns>
        public async Task<IV2ClaimSetsPostApiResponse> V2ClaimSetsPostAsync(AddClaimSetRequest addClaimSetRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV2ClaimSetsPost(addClaimSetRequest);

                FormatV2ClaimSetsPost(addClaimSetRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v2/claimSets"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v2/claimSets");

                    httpRequestMessageLocalVar.Content = (addClaimSetRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(addClaimSetRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = HttpMethod.Post;

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync(cancellationToken).ConfigureAwait(false);

                        ILogger<V2ClaimSetsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V2ClaimSetsPostApiResponse>();

                        V2ClaimSetsPostApiResponse apiResponseLocalVar = new(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/claimSets", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV2ClaimSetsPostDefaultImplementation(apiResponseLocalVar, addClaimSetRequest);

                        Events.ExecuteOnV2ClaimSetsPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV2ClaimSetsPostDefaultImplementation(e, "/v2/claimSets", uriBuilderLocalVar.Path, addClaimSetRequest);
                Events.ExecuteOnErrorV2ClaimSetsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V2ClaimSetsPostApiResponse"/>
        /// </summary>
        public partial class V2ClaimSetsPostApiResponse : EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse, IV2ClaimSetsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V2ClaimSetsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V2ClaimSetsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V2ClaimSetsPostApiResponse(ILogger<V2ClaimSetsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
