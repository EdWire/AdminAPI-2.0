/*
 * Admin API Documentation
 *
 * The Ed-Fi Admin API is a REST API-based administrative interface for managing vendors, applications, client credentials, and authorization rules for accessing an Ed-Fi API.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.Ods.AdminApi.V2.Client.Client.OpenAPIDateConverter;

namespace EdFi.Ods.AdminApi.V2.Client.Model
{
    /// <summary>
    /// ApplicationModel
    /// </summary>
    [DataContract(Name = "applicationModel")]
    public partial class ApplicationModel : IEquatable<ApplicationModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ApplicationModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="applicationName">applicationName.</param>
        /// <param name="claimSetName">claimSetName.</param>
        /// <param name="educationOrganizationIds">educationOrganizationIds.</param>
        /// <param name="vendorId">vendorId.</param>
        /// <param name="profileIds">profileIds.</param>
        /// <param name="odsInstanceIds">odsInstanceIds.</param>
        /// <param name="enabled">enabled.</param>
        public ApplicationModel(int id = default(int), string applicationName = default(string), string claimSetName = default(string), List<long> educationOrganizationIds = default(List<long>), int? vendorId = default(int?), List<int> profileIds = default(List<int>), List<int> odsInstanceIds = default(List<int>), bool enabled = default(bool))
        {
            this.Id = id;
            this.ApplicationName = applicationName;
            this.ClaimSetName = claimSetName;
            this.EducationOrganizationIds = educationOrganizationIds;
            this.VendorId = vendorId;
            this.ProfileIds = profileIds;
            this.OdsInstanceIds = odsInstanceIds;
            this.Enabled = enabled;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets ApplicationName
        /// </summary>
        [DataMember(Name = "applicationName", EmitDefaultValue = true)]
        public string ApplicationName { get; set; }

        /// <summary>
        /// Gets or Sets ClaimSetName
        /// </summary>
        [DataMember(Name = "claimSetName", EmitDefaultValue = true)]
        public string ClaimSetName { get; set; }

        /// <summary>
        /// Gets or Sets EducationOrganizationIds
        /// </summary>
        [DataMember(Name = "educationOrganizationIds", EmitDefaultValue = true)]
        public List<long> EducationOrganizationIds { get; set; }

        /// <summary>
        /// Gets or Sets VendorId
        /// </summary>
        [DataMember(Name = "vendorId", EmitDefaultValue = true)]
        public int? VendorId { get; set; }

        /// <summary>
        /// Gets or Sets ProfileIds
        /// </summary>
        [DataMember(Name = "profileIds", EmitDefaultValue = true)]
        public List<int> ProfileIds { get; set; }

        /// <summary>
        /// Gets or Sets OdsInstanceIds
        /// </summary>
        [DataMember(Name = "odsInstanceIds", EmitDefaultValue = true)]
        public List<int> OdsInstanceIds { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name = "enabled", EmitDefaultValue = true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ApplicationModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ApplicationName: ").Append(ApplicationName).Append("\n");
            sb.Append("  ClaimSetName: ").Append(ClaimSetName).Append("\n");
            sb.Append("  EducationOrganizationIds: ").Append(EducationOrganizationIds).Append("\n");
            sb.Append("  VendorId: ").Append(VendorId).Append("\n");
            sb.Append("  ProfileIds: ").Append(ProfileIds).Append("\n");
            sb.Append("  OdsInstanceIds: ").Append(OdsInstanceIds).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ApplicationModel);
        }

        /// <summary>
        /// Returns true if ApplicationModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ApplicationModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicationModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.ApplicationName == input.ApplicationName ||
                    (this.ApplicationName != null &&
                    this.ApplicationName.Equals(input.ApplicationName))
                ) && 
                (
                    this.ClaimSetName == input.ClaimSetName ||
                    (this.ClaimSetName != null &&
                    this.ClaimSetName.Equals(input.ClaimSetName))
                ) && 
                (
                    this.EducationOrganizationIds == input.EducationOrganizationIds ||
                    this.EducationOrganizationIds != null &&
                    input.EducationOrganizationIds != null &&
                    this.EducationOrganizationIds.SequenceEqual(input.EducationOrganizationIds)
                ) && 
                (
                    this.VendorId == input.VendorId ||
                    (this.VendorId != null &&
                    this.VendorId.Equals(input.VendorId))
                ) && 
                (
                    this.ProfileIds == input.ProfileIds ||
                    this.ProfileIds != null &&
                    input.ProfileIds != null &&
                    this.ProfileIds.SequenceEqual(input.ProfileIds)
                ) && 
                (
                    this.OdsInstanceIds == input.OdsInstanceIds ||
                    this.OdsInstanceIds != null &&
                    input.OdsInstanceIds != null &&
                    this.OdsInstanceIds.SequenceEqual(input.OdsInstanceIds)
                ) && 
                (
                    this.Enabled == input.Enabled ||
                    this.Enabled.Equals(input.Enabled)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.ApplicationName != null)
                {
                    hashCode = (hashCode * 59) + this.ApplicationName.GetHashCode();
                }
                if (this.ClaimSetName != null)
                {
                    hashCode = (hashCode * 59) + this.ClaimSetName.GetHashCode();
                }
                if (this.EducationOrganizationIds != null)
                {
                    hashCode = (hashCode * 59) + this.EducationOrganizationIds.GetHashCode();
                }
                if (this.VendorId != null)
                {
                    hashCode = (hashCode * 59) + this.VendorId.GetHashCode();
                }
                if (this.ProfileIds != null)
                {
                    hashCode = (hashCode * 59) + this.ProfileIds.GetHashCode();
                }
                if (this.OdsInstanceIds != null)
                {
                    hashCode = (hashCode * 59) + this.OdsInstanceIds.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Enabled.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
