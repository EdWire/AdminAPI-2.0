/*
 * Admin API Documentation
 *
 * The Ed-Fi Admin API is a REST API-based administrative interface for managing vendors, applications, client credentials, and authorization rules for accessing an Ed-Fi API.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.Ods.AdminApi.V2.Client.Client.OpenAPIDateConverter;

namespace EdFi.Ods.AdminApi.V2.Client.Model
{
    /// <summary>
    /// ClaimSetDetailsModel
    /// </summary>
    [DataContract(Name = "claimSetDetailsModel")]
    public partial class ClaimSetDetailsModel : IEquatable<ClaimSetDetailsModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClaimSetDetailsModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="resourceClaims">resourceClaims.</param>
        public ClaimSetDetailsModel(int id = default(int), string name = default(string), List<ClaimSetResourceClaimModel> resourceClaims = default(List<ClaimSetResourceClaimModel>))
        {
            this.Id = id;
            this.Name = name;
            this.ResourceClaims = resourceClaims;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets IsSystemReserved
        /// </summary>
        [DataMember(Name = "_isSystemReserved", EmitDefaultValue = true)]
        public bool IsSystemReserved { get; private set; }

        /// <summary>
        /// Returns false as IsSystemReserved should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeIsSystemReserved()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Applications
        /// </summary>
        [DataMember(Name = "_applications", EmitDefaultValue = true)]
        public List<SimpleApplicationModel> Applications { get; private set; }

        /// <summary>
        /// Returns false as Applications should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeApplications()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets ResourceClaims
        /// </summary>
        [DataMember(Name = "resourceClaims", EmitDefaultValue = true)]
        public List<ClaimSetResourceClaimModel> ResourceClaims { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ClaimSetDetailsModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  IsSystemReserved: ").Append(IsSystemReserved).Append("\n");
            sb.Append("  Applications: ").Append(Applications).Append("\n");
            sb.Append("  ResourceClaims: ").Append(ResourceClaims).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClaimSetDetailsModel);
        }

        /// <summary>
        /// Returns true if ClaimSetDetailsModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ClaimSetDetailsModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClaimSetDetailsModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.IsSystemReserved == input.IsSystemReserved ||
                    this.IsSystemReserved.Equals(input.IsSystemReserved)
                ) && 
                (
                    this.Applications == input.Applications ||
                    this.Applications != null &&
                    input.Applications != null &&
                    this.Applications.SequenceEqual(input.Applications)
                ) && 
                (
                    this.ResourceClaims == input.ResourceClaims ||
                    this.ResourceClaims != null &&
                    input.ResourceClaims != null &&
                    this.ResourceClaims.SequenceEqual(input.ResourceClaims)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.IsSystemReserved.GetHashCode();
                if (this.Applications != null)
                {
                    hashCode = (hashCode * 59) + this.Applications.GetHashCode();
                }
                if (this.ResourceClaims != null)
                {
                    hashCode = (hashCode * 59) + this.ResourceClaims.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
