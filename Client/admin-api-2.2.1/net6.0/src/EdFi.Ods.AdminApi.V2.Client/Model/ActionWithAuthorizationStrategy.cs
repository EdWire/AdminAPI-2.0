/*
 * Admin API Documentation
 *
 * The Ed-Fi Admin API is a REST API-based administrative interface for managing vendors, applications, client credentials, and authorization rules for accessing an Ed-Fi API.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.Ods.AdminApi.V2.Client.Client.OpenAPIDateConverter;

namespace EdFi.Ods.AdminApi.V2.Client.Model
{
    /// <summary>
    /// ActionWithAuthorizationStrategy
    /// </summary>
    [DataContract(Name = "actionWithAuthorizationStrategy")]
    public partial class ActionWithAuthorizationStrategy : IEquatable<ActionWithAuthorizationStrategy>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ActionWithAuthorizationStrategy" /> class.
        /// </summary>
        /// <param name="actionId">actionId.</param>
        /// <param name="actionName">actionName.</param>
        /// <param name="authorizationStrategies">authorizationStrategies.</param>
        public ActionWithAuthorizationStrategy(int actionId = default(int), string actionName = default(string), List<AuthorizationStrategyModelForAction> authorizationStrategies = default(List<AuthorizationStrategyModelForAction>))
        {
            this.ActionId = actionId;
            this.ActionName = actionName;
            this.AuthorizationStrategies = authorizationStrategies;
        }

        /// <summary>
        /// Gets or Sets ActionId
        /// </summary>
        [DataMember(Name = "actionId", EmitDefaultValue = false)]
        public int ActionId { get; set; }

        /// <summary>
        /// Gets or Sets ActionName
        /// </summary>
        [DataMember(Name = "actionName", EmitDefaultValue = true)]
        public string ActionName { get; set; }

        /// <summary>
        /// Gets or Sets AuthorizationStrategies
        /// </summary>
        [DataMember(Name = "authorizationStrategies", EmitDefaultValue = true)]
        public List<AuthorizationStrategyModelForAction> AuthorizationStrategies { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ActionWithAuthorizationStrategy {\n");
            sb.Append("  ActionId: ").Append(ActionId).Append("\n");
            sb.Append("  ActionName: ").Append(ActionName).Append("\n");
            sb.Append("  AuthorizationStrategies: ").Append(AuthorizationStrategies).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ActionWithAuthorizationStrategy);
        }

        /// <summary>
        /// Returns true if ActionWithAuthorizationStrategy instances are equal
        /// </summary>
        /// <param name="input">Instance of ActionWithAuthorizationStrategy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ActionWithAuthorizationStrategy input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ActionId == input.ActionId ||
                    this.ActionId.Equals(input.ActionId)
                ) && 
                (
                    this.ActionName == input.ActionName ||
                    (this.ActionName != null &&
                    this.ActionName.Equals(input.ActionName))
                ) && 
                (
                    this.AuthorizationStrategies == input.AuthorizationStrategies ||
                    this.AuthorizationStrategies != null &&
                    input.AuthorizationStrategies != null &&
                    this.AuthorizationStrategies.SequenceEqual(input.AuthorizationStrategies)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ActionId.GetHashCode();
                if (this.ActionName != null)
                {
                    hashCode = (hashCode * 59) + this.ActionName.GetHashCode();
                }
                if (this.AuthorizationStrategies != null)
                {
                    hashCode = (hashCode * 59) + this.AuthorizationStrategies.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
