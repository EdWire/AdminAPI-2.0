/*
 * Admin API Documentation
 *
 * The Ed-Fi Admin API is a REST API-based administrative interface for managing vendors, applications, client credentials, and authorization rules for accessing an Ed-Fi API.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.Ods.AdminApi.V2.Client.Client.OpenAPIDateConverter;

namespace EdFi.Ods.AdminApi.V2.Client.Model
{
    /// <summary>
    /// AuthorizationStrategyModelForAction
    /// </summary>
    [DataContract(Name = "authorizationStrategyModelForAction")]
    public partial class AuthorizationStrategyModelForAction : IEquatable<AuthorizationStrategyModelForAction>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizationStrategyModelForAction" /> class.
        /// </summary>
        /// <param name="authStrategyId">authStrategyId.</param>
        /// <param name="authStrategyName">authStrategyName.</param>
        public AuthorizationStrategyModelForAction(int authStrategyId = default(int), string authStrategyName = default(string))
        {
            this.AuthStrategyId = authStrategyId;
            this.AuthStrategyName = authStrategyName;
        }

        /// <summary>
        /// Gets or Sets AuthStrategyId
        /// </summary>
        [DataMember(Name = "authStrategyId", EmitDefaultValue = false)]
        public int AuthStrategyId { get; set; }

        /// <summary>
        /// Gets or Sets AuthStrategyName
        /// </summary>
        [DataMember(Name = "authStrategyName", EmitDefaultValue = true)]
        public string AuthStrategyName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthorizationStrategyModelForAction {\n");
            sb.Append("  AuthStrategyId: ").Append(AuthStrategyId).Append("\n");
            sb.Append("  AuthStrategyName: ").Append(AuthStrategyName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AuthorizationStrategyModelForAction);
        }

        /// <summary>
        /// Returns true if AuthorizationStrategyModelForAction instances are equal
        /// </summary>
        /// <param name="input">Instance of AuthorizationStrategyModelForAction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthorizationStrategyModelForAction input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.AuthStrategyId == input.AuthStrategyId ||
                    this.AuthStrategyId.Equals(input.AuthStrategyId)
                ) && 
                (
                    this.AuthStrategyName == input.AuthStrategyName ||
                    (this.AuthStrategyName != null &&
                    this.AuthStrategyName.Equals(input.AuthStrategyName))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.AuthStrategyId.GetHashCode();
                if (this.AuthStrategyName != null)
                {
                    hashCode = (hashCode * 59) + this.AuthStrategyName.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
