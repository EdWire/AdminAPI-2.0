/*
 * Admin API Documentation
 *
 * The Ed-Fi Admin API is a REST API-based administrative interface for managing vendors, applications, client credentials, and authorization rules for accessing an Ed-Fi API.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.Ods.AdminApi.V2.Client.Client.OpenAPIDateConverter;

namespace EdFi.Ods.AdminApi.V2.Client.Model
{
    /// <summary>
    /// EditOdsInstanceRequest
    /// </summary>
    [DataContract(Name = "editOdsInstanceRequest")]
    public partial class EditOdsInstanceRequest : IEquatable<EditOdsInstanceRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EditOdsInstanceRequest" /> class.
        /// </summary>
        /// <param name="name">Ods Instance name.</param>
        /// <param name="instanceType">Ods Instance type.</param>
        /// <param name="connectionString">Ods Instance connection string.</param>
        public EditOdsInstanceRequest(string name = default(string), string instanceType = default(string), string connectionString = default(string))
        {
            this.Name = name;
            this.InstanceType = instanceType;
            this.ConnectionString = connectionString;
        }

        /// <summary>
        /// Ods Instance name
        /// </summary>
        /// <value>Ods Instance name</value>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Ods Instance type
        /// </summary>
        /// <value>Ods Instance type</value>
        [DataMember(Name = "instanceType", EmitDefaultValue = true)]
        public string InstanceType { get; set; }

        /// <summary>
        /// Ods Instance connection string
        /// </summary>
        /// <value>Ods Instance connection string</value>
        [DataMember(Name = "connectionString", EmitDefaultValue = true)]
        public string ConnectionString { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EditOdsInstanceRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  InstanceType: ").Append(InstanceType).Append("\n");
            sb.Append("  ConnectionString: ").Append(ConnectionString).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as EditOdsInstanceRequest);
        }

        /// <summary>
        /// Returns true if EditOdsInstanceRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of EditOdsInstanceRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EditOdsInstanceRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.InstanceType == input.InstanceType ||
                    (this.InstanceType != null &&
                    this.InstanceType.Equals(input.InstanceType))
                ) && 
                (
                    this.ConnectionString == input.ConnectionString ||
                    (this.ConnectionString != null &&
                    this.ConnectionString.Equals(input.ConnectionString))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.InstanceType != null)
                {
                    hashCode = (hashCode * 59) + this.InstanceType.GetHashCode();
                }
                if (this.ConnectionString != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectionString.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
