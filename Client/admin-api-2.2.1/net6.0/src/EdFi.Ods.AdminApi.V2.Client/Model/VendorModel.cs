/*
 * Admin API Documentation
 *
 * The Ed-Fi Admin API is a REST API-based administrative interface for managing vendors, applications, client credentials, and authorization rules for accessing an Ed-Fi API.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.Ods.AdminApi.V2.Client.Client.OpenAPIDateConverter;

namespace EdFi.Ods.AdminApi.V2.Client.Model
{
    /// <summary>
    /// VendorModel
    /// </summary>
    [DataContract(Name = "vendorModel")]
    public partial class VendorModel : IEquatable<VendorModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VendorModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="company">company.</param>
        /// <param name="namespacePrefixes">namespacePrefixes.</param>
        /// <param name="contactName">contactName.</param>
        /// <param name="contactEmailAddress">contactEmailAddress.</param>
        public VendorModel(int? id = default(int?), string company = default(string), string namespacePrefixes = default(string), string contactName = default(string), string contactEmailAddress = default(string))
        {
            this.Id = id;
            this.Company = company;
            this.NamespacePrefixes = namespacePrefixes;
            this.ContactName = contactName;
            this.ContactEmailAddress = contactEmailAddress;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = true)]
        public int? Id { get; set; }

        /// <summary>
        /// Gets or Sets Company
        /// </summary>
        [DataMember(Name = "company", EmitDefaultValue = true)]
        public string Company { get; set; }

        /// <summary>
        /// Gets or Sets NamespacePrefixes
        /// </summary>
        [DataMember(Name = "namespacePrefixes", EmitDefaultValue = true)]
        public string NamespacePrefixes { get; set; }

        /// <summary>
        /// Gets or Sets ContactName
        /// </summary>
        [DataMember(Name = "contactName", EmitDefaultValue = true)]
        public string ContactName { get; set; }

        /// <summary>
        /// Gets or Sets ContactEmailAddress
        /// </summary>
        [DataMember(Name = "contactEmailAddress", EmitDefaultValue = true)]
        public string ContactEmailAddress { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class VendorModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  NamespacePrefixes: ").Append(NamespacePrefixes).Append("\n");
            sb.Append("  ContactName: ").Append(ContactName).Append("\n");
            sb.Append("  ContactEmailAddress: ").Append(ContactEmailAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VendorModel);
        }

        /// <summary>
        /// Returns true if VendorModel instances are equal
        /// </summary>
        /// <param name="input">Instance of VendorModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VendorModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Company == input.Company ||
                    (this.Company != null &&
                    this.Company.Equals(input.Company))
                ) && 
                (
                    this.NamespacePrefixes == input.NamespacePrefixes ||
                    (this.NamespacePrefixes != null &&
                    this.NamespacePrefixes.Equals(input.NamespacePrefixes))
                ) && 
                (
                    this.ContactName == input.ContactName ||
                    (this.ContactName != null &&
                    this.ContactName.Equals(input.ContactName))
                ) && 
                (
                    this.ContactEmailAddress == input.ContactEmailAddress ||
                    (this.ContactEmailAddress != null &&
                    this.ContactEmailAddress.Equals(input.ContactEmailAddress))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                {
                    hashCode = (hashCode * 59) + this.Id.GetHashCode();
                }
                if (this.Company != null)
                {
                    hashCode = (hashCode * 59) + this.Company.GetHashCode();
                }
                if (this.NamespacePrefixes != null)
                {
                    hashCode = (hashCode * 59) + this.NamespacePrefixes.GetHashCode();
                }
                if (this.ContactName != null)
                {
                    hashCode = (hashCode * 59) + this.ContactName.GetHashCode();
                }
                if (this.ContactEmailAddress != null)
                {
                    hashCode = (hashCode * 59) + this.ContactEmailAddress.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
