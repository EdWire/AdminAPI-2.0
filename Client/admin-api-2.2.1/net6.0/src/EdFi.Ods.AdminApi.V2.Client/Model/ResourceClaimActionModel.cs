/*
 * Admin API Documentation
 *
 * The Ed-Fi Admin API is a REST API-based administrative interface for managing vendors, applications, client credentials, and authorization rules for accessing an Ed-Fi API.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.Ods.AdminApi.V2.Client.Client.OpenAPIDateConverter;

namespace EdFi.Ods.AdminApi.V2.Client.Model
{
    /// <summary>
    /// ResourceClaimActionModel
    /// </summary>
    [DataContract(Name = "resourceClaimActionModel")]
    public partial class ResourceClaimActionModel : IEquatable<ResourceClaimActionModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceClaimActionModel" /> class.
        /// </summary>
        /// <param name="resourceClaimId">resourceClaimId.</param>
        /// <param name="resourceName">resourceName.</param>
        /// <param name="claimName">claimName.</param>
        /// <param name="actions">actions.</param>
        public ResourceClaimActionModel(int resourceClaimId = default(int), string resourceName = default(string), string claimName = default(string), List<ActionForResourceClaimModel> actions = default(List<ActionForResourceClaimModel>))
        {
            this.ResourceClaimId = resourceClaimId;
            this.ResourceName = resourceName;
            this.ClaimName = claimName;
            this.Actions = actions;
        }

        /// <summary>
        /// Gets or Sets ResourceClaimId
        /// </summary>
        [DataMember(Name = "resourceClaimId", EmitDefaultValue = false)]
        public int ResourceClaimId { get; set; }

        /// <summary>
        /// Gets or Sets ResourceName
        /// </summary>
        [DataMember(Name = "resourceName", EmitDefaultValue = true)]
        public string ResourceName { get; set; }

        /// <summary>
        /// Gets or Sets ClaimName
        /// </summary>
        [DataMember(Name = "claimName", EmitDefaultValue = true)]
        public string ClaimName { get; set; }

        /// <summary>
        /// Gets or Sets Actions
        /// </summary>
        [DataMember(Name = "actions", EmitDefaultValue = true)]
        public List<ActionForResourceClaimModel> Actions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResourceClaimActionModel {\n");
            sb.Append("  ResourceClaimId: ").Append(ResourceClaimId).Append("\n");
            sb.Append("  ResourceName: ").Append(ResourceName).Append("\n");
            sb.Append("  ClaimName: ").Append(ClaimName).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ResourceClaimActionModel);
        }

        /// <summary>
        /// Returns true if ResourceClaimActionModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ResourceClaimActionModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ResourceClaimActionModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.ResourceClaimId == input.ResourceClaimId ||
                    this.ResourceClaimId.Equals(input.ResourceClaimId)
                ) && 
                (
                    this.ResourceName == input.ResourceName ||
                    (this.ResourceName != null &&
                    this.ResourceName.Equals(input.ResourceName))
                ) && 
                (
                    this.ClaimName == input.ClaimName ||
                    (this.ClaimName != null &&
                    this.ClaimName.Equals(input.ClaimName))
                ) && 
                (
                    this.Actions == input.Actions ||
                    this.Actions != null &&
                    input.Actions != null &&
                    this.Actions.SequenceEqual(input.Actions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.ResourceClaimId.GetHashCode();
                if (this.ResourceName != null)
                {
                    hashCode = (hashCode * 59) + this.ResourceName.GetHashCode();
                }
                if (this.ClaimName != null)
                {
                    hashCode = (hashCode * 59) + this.ClaimName.GetHashCode();
                }
                if (this.Actions != null)
                {
                    hashCode = (hashCode * 59) + this.Actions.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
