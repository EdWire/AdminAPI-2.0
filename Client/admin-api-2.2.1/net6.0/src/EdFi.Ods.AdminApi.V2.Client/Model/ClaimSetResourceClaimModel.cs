/*
 * Admin API Documentation
 *
 * The Ed-Fi Admin API is a REST API-based administrative interface for managing vendors, applications, client credentials, and authorization rules for accessing an Ed-Fi API.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.Ods.AdminApi.V2.Client.Client.OpenAPIDateConverter;

namespace EdFi.Ods.AdminApi.V2.Client.Model
{
    /// <summary>
    /// ClaimSetResourceClaimModel
    /// </summary>
    [DataContract(Name = "claimSetResourceClaimModel")]
    public partial class ClaimSetResourceClaimModel : IEquatable<ClaimSetResourceClaimModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ClaimSetResourceClaimModel" /> class.
        /// </summary>
        /// <param name="name">name.</param>
        /// <param name="actions">actions.</param>
        /// <param name="authorizationStrategyOverridesForCRUD">authorizationStrategyOverridesForCRUD.</param>
        /// <param name="children">Children are collection of ResourceClaim.</param>
        public ClaimSetResourceClaimModel(string name = default(string), List<ResourceClaimAction> actions = default(List<ResourceClaimAction>), List<ClaimSetResourceClaimActionAuthStrategies> authorizationStrategyOverridesForCRUD = default(List<ClaimSetResourceClaimActionAuthStrategies>), List<ClaimSetResourceClaimModel> children = default(List<ClaimSetResourceClaimModel>))
        {
            this.Name = name;
            this.Actions = actions;
            this.AuthorizationStrategyOverridesForCRUD = authorizationStrategyOverridesForCRUD;
            this.Children = children;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; private set; }

        /// <summary>
        /// Returns false as Id should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeId()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Actions
        /// </summary>
        [DataMember(Name = "actions", EmitDefaultValue = true)]
        public List<ResourceClaimAction> Actions { get; set; }

        /// <summary>
        /// Gets or Sets DefaultAuthorizationStrategiesForCRUD
        /// </summary>
        [DataMember(Name = "_defaultAuthorizationStrategiesForCRUD", EmitDefaultValue = true)]
        public List<ClaimSetResourceClaimActionAuthStrategies> DefaultAuthorizationStrategiesForCRUD { get; private set; }

        /// <summary>
        /// Returns false as DefaultAuthorizationStrategiesForCRUD should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDefaultAuthorizationStrategiesForCRUD()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets AuthorizationStrategyOverridesForCRUD
        /// </summary>
        [DataMember(Name = "authorizationStrategyOverridesForCRUD", EmitDefaultValue = true)]
        public List<ClaimSetResourceClaimActionAuthStrategies> AuthorizationStrategyOverridesForCRUD { get; set; }

        /// <summary>
        /// Children are collection of ResourceClaim
        /// </summary>
        /// <value>Children are collection of ResourceClaim</value>
        [DataMember(Name = "children", EmitDefaultValue = true)]
        public List<ClaimSetResourceClaimModel> Children { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ClaimSetResourceClaimModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  DefaultAuthorizationStrategiesForCRUD: ").Append(DefaultAuthorizationStrategiesForCRUD).Append("\n");
            sb.Append("  AuthorizationStrategyOverridesForCRUD: ").Append(AuthorizationStrategyOverridesForCRUD).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ClaimSetResourceClaimModel);
        }

        /// <summary>
        /// Returns true if ClaimSetResourceClaimModel instances are equal
        /// </summary>
        /// <param name="input">Instance of ClaimSetResourceClaimModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClaimSetResourceClaimModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.Actions == input.Actions ||
                    this.Actions != null &&
                    input.Actions != null &&
                    this.Actions.SequenceEqual(input.Actions)
                ) && 
                (
                    this.DefaultAuthorizationStrategiesForCRUD == input.DefaultAuthorizationStrategiesForCRUD ||
                    this.DefaultAuthorizationStrategiesForCRUD != null &&
                    input.DefaultAuthorizationStrategiesForCRUD != null &&
                    this.DefaultAuthorizationStrategiesForCRUD.SequenceEqual(input.DefaultAuthorizationStrategiesForCRUD)
                ) && 
                (
                    this.AuthorizationStrategyOverridesForCRUD == input.AuthorizationStrategyOverridesForCRUD ||
                    this.AuthorizationStrategyOverridesForCRUD != null &&
                    input.AuthorizationStrategyOverridesForCRUD != null &&
                    this.AuthorizationStrategyOverridesForCRUD.SequenceEqual(input.AuthorizationStrategyOverridesForCRUD)
                ) && 
                (
                    this.Children == input.Children ||
                    this.Children != null &&
                    input.Children != null &&
                    this.Children.SequenceEqual(input.Children)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.Name != null)
                {
                    hashCode = (hashCode * 59) + this.Name.GetHashCode();
                }
                if (this.Actions != null)
                {
                    hashCode = (hashCode * 59) + this.Actions.GetHashCode();
                }
                if (this.DefaultAuthorizationStrategiesForCRUD != null)
                {
                    hashCode = (hashCode * 59) + this.DefaultAuthorizationStrategiesForCRUD.GetHashCode();
                }
                if (this.AuthorizationStrategyOverridesForCRUD != null)
                {
                    hashCode = (hashCode * 59) + this.AuthorizationStrategyOverridesForCRUD.GetHashCode();
                }
                if (this.Children != null)
                {
                    hashCode = (hashCode * 59) + this.Children.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
