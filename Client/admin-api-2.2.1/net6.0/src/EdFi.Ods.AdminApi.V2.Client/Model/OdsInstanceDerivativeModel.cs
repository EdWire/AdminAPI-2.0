/*
 * Admin API Documentation
 *
 * The Ed-Fi Admin API is a REST API-based administrative interface for managing vendors, applications, client credentials, and authorization rules for accessing an Ed-Fi API.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.Ods.AdminApi.V2.Client.Client.OpenAPIDateConverter;

namespace EdFi.Ods.AdminApi.V2.Client.Model
{
    /// <summary>
    /// OdsInstanceDerivativeModel
    /// </summary>
    [DataContract(Name = "odsInstanceDerivativeModel")]
    public partial class OdsInstanceDerivativeModel : IEquatable<OdsInstanceDerivativeModel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OdsInstanceDerivativeModel" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="odsInstanceId">odsInstanceId.</param>
        /// <param name="derivativeType">derivativeType.</param>
        public OdsInstanceDerivativeModel(int id = default(int), int? odsInstanceId = default(int?), string derivativeType = default(string))
        {
            this.Id = id;
            this.OdsInstanceId = odsInstanceId;
            this.DerivativeType = derivativeType;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or Sets OdsInstanceId
        /// </summary>
        [DataMember(Name = "odsInstanceId", EmitDefaultValue = true)]
        public int? OdsInstanceId { get; set; }

        /// <summary>
        /// Gets or Sets DerivativeType
        /// </summary>
        [DataMember(Name = "derivativeType", EmitDefaultValue = true)]
        public string DerivativeType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class OdsInstanceDerivativeModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  OdsInstanceId: ").Append(OdsInstanceId).Append("\n");
            sb.Append("  DerivativeType: ").Append(DerivativeType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OdsInstanceDerivativeModel);
        }

        /// <summary>
        /// Returns true if OdsInstanceDerivativeModel instances are equal
        /// </summary>
        /// <param name="input">Instance of OdsInstanceDerivativeModel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OdsInstanceDerivativeModel input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                ) && 
                (
                    this.OdsInstanceId == input.OdsInstanceId ||
                    (this.OdsInstanceId != null &&
                    this.OdsInstanceId.Equals(input.OdsInstanceId))
                ) && 
                (
                    this.DerivativeType == input.DerivativeType ||
                    (this.DerivativeType != null &&
                    this.DerivativeType.Equals(input.DerivativeType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                if (this.OdsInstanceId != null)
                {
                    hashCode = (hashCode * 59) + this.OdsInstanceId.GetHashCode();
                }
                if (this.DerivativeType != null)
                {
                    hashCode = (hashCode * 59) + this.DerivativeType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
