/*
 * Admin API Documentation
 *
 * The Ed-Fi Admin API is a REST API-based administrative interface for managing vendors, applications, client credentials, and authorization rules for accessing an Ed-Fi API.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = EdFi.Ods.AdminApi.V2.Client.Client.OpenAPIDateConverter;

namespace EdFi.Ods.AdminApi.V2.Client.Model
{
    /// <summary>
    /// AddOdsInstanceDerivativeRequest
    /// </summary>
    [DataContract(Name = "addOdsInstanceDerivativeRequest")]
    public partial class AddOdsInstanceDerivativeRequest : IEquatable<AddOdsInstanceDerivativeRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddOdsInstanceDerivativeRequest" /> class.
        /// </summary>
        /// <param name="odsInstanceId">ODS instance derivative ODS instance id..</param>
        /// <param name="derivativeType">derivative type..</param>
        /// <param name="connectionString">connection string..</param>
        public AddOdsInstanceDerivativeRequest(int odsInstanceId = default(int), string derivativeType = default(string), string connectionString = default(string))
        {
            this.OdsInstanceId = odsInstanceId;
            this.DerivativeType = derivativeType;
            this.ConnectionString = connectionString;
        }

        /// <summary>
        /// ODS instance derivative ODS instance id.
        /// </summary>
        /// <value>ODS instance derivative ODS instance id.</value>
        [DataMember(Name = "odsInstanceId", EmitDefaultValue = false)]
        public int OdsInstanceId { get; set; }

        /// <summary>
        /// derivative type.
        /// </summary>
        /// <value>derivative type.</value>
        [DataMember(Name = "derivativeType", EmitDefaultValue = false)]
        public string DerivativeType { get; set; }

        /// <summary>
        /// connection string.
        /// </summary>
        /// <value>connection string.</value>
        [DataMember(Name = "connectionString", EmitDefaultValue = false)]
        public string ConnectionString { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddOdsInstanceDerivativeRequest {\n");
            sb.Append("  OdsInstanceId: ").Append(OdsInstanceId).Append("\n");
            sb.Append("  DerivativeType: ").Append(DerivativeType).Append("\n");
            sb.Append("  ConnectionString: ").Append(ConnectionString).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as AddOdsInstanceDerivativeRequest);
        }

        /// <summary>
        /// Returns true if AddOdsInstanceDerivativeRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of AddOdsInstanceDerivativeRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AddOdsInstanceDerivativeRequest input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.OdsInstanceId == input.OdsInstanceId ||
                    this.OdsInstanceId.Equals(input.OdsInstanceId)
                ) && 
                (
                    this.DerivativeType == input.DerivativeType ||
                    (this.DerivativeType != null &&
                    this.DerivativeType.Equals(input.DerivativeType))
                ) && 
                (
                    this.ConnectionString == input.ConnectionString ||
                    (this.ConnectionString != null &&
                    this.ConnectionString.Equals(input.ConnectionString))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                hashCode = (hashCode * 59) + this.OdsInstanceId.GetHashCode();
                if (this.DerivativeType != null)
                {
                    hashCode = (hashCode * 59) + this.DerivativeType.GetHashCode();
                }
                if (this.ConnectionString != null)
                {
                    hashCode = (hashCode * 59) + this.ConnectionString.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
