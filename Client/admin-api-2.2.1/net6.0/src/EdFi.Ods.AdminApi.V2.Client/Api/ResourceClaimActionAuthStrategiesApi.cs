/*
 * Admin API Documentation
 *
 * The Ed-Fi Admin API is a REST API-based administrative interface for managing vendors, applications, client credentials, and authorization rules for accessing an Ed-Fi API.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EdFi.Ods.AdminApi.V2.Client.Client;
using EdFi.Ods.AdminApi.V2.Client.Client.Auth;
using EdFi.Ods.AdminApi.V2.Client.Model;

namespace EdFi.Ods.AdminApi.V2.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IResourceClaimActionAuthStrategiesApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieves all resourceClaimActionAuthStrategies.
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="resourceName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ResourceClaimActionAuthStrategyModel&gt;</returns>
        List<ResourceClaimActionAuthStrategyModel> V2ResourceClaimActionAuthStrategiesGet(int? offset = default(int?), int? limit = default(int?), string? orderBy = default(string?), string? direction = default(string?), string? resourceName = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieves all resourceClaimActionAuthStrategies.
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="resourceName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ResourceClaimActionAuthStrategyModel&gt;</returns>
        ApiResponse<List<ResourceClaimActionAuthStrategyModel>> V2ResourceClaimActionAuthStrategiesGetWithHttpInfo(int? offset = default(int?), int? limit = default(int?), string? orderBy = default(string?), string? direction = default(string?), string? resourceName = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IResourceClaimActionAuthStrategiesApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieves all resourceClaimActionAuthStrategies.
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="resourceName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ResourceClaimActionAuthStrategyModel&gt;</returns>
        System.Threading.Tasks.Task<List<ResourceClaimActionAuthStrategyModel>> V2ResourceClaimActionAuthStrategiesGetAsync(int? offset = default(int?), int? limit = default(int?), string? orderBy = default(string?), string? direction = default(string?), string? resourceName = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves all resourceClaimActionAuthStrategies.
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="resourceName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ResourceClaimActionAuthStrategyModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ResourceClaimActionAuthStrategyModel>>> V2ResourceClaimActionAuthStrategiesGetWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), string? orderBy = default(string?), string? direction = default(string?), string? resourceName = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IResourceClaimActionAuthStrategiesApi : IResourceClaimActionAuthStrategiesApiSync, IResourceClaimActionAuthStrategiesApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ResourceClaimActionAuthStrategiesApi : IResourceClaimActionAuthStrategiesApi
    {
        private EdFi.Ods.AdminApi.V2.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceClaimActionAuthStrategiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ResourceClaimActionAuthStrategiesApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceClaimActionAuthStrategiesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ResourceClaimActionAuthStrategiesApi(string basePath)
        {
            this.Configuration = EdFi.Ods.AdminApi.V2.Client.Client.Configuration.MergeConfigurations(
                EdFi.Ods.AdminApi.V2.Client.Client.GlobalConfiguration.Instance,
                new EdFi.Ods.AdminApi.V2.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EdFi.Ods.AdminApi.V2.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EdFi.Ods.AdminApi.V2.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EdFi.Ods.AdminApi.V2.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceClaimActionAuthStrategiesApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ResourceClaimActionAuthStrategiesApi(EdFi.Ods.AdminApi.V2.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EdFi.Ods.AdminApi.V2.Client.Client.Configuration.MergeConfigurations(
                EdFi.Ods.AdminApi.V2.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EdFi.Ods.AdminApi.V2.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EdFi.Ods.AdminApi.V2.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EdFi.Ods.AdminApi.V2.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceClaimActionAuthStrategiesApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ResourceClaimActionAuthStrategiesApi(EdFi.Ods.AdminApi.V2.Client.Client.ISynchronousClient client, EdFi.Ods.AdminApi.V2.Client.Client.IAsynchronousClient asyncClient, EdFi.Ods.AdminApi.V2.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EdFi.Ods.AdminApi.V2.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EdFi.Ods.AdminApi.V2.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EdFi.Ods.AdminApi.V2.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EdFi.Ods.AdminApi.V2.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EdFi.Ods.AdminApi.V2.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieves all resourceClaimActionAuthStrategies. This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="resourceName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ResourceClaimActionAuthStrategyModel&gt;</returns>
        public List<ResourceClaimActionAuthStrategyModel> V2ResourceClaimActionAuthStrategiesGet(int? offset = default(int?), int? limit = default(int?), string? orderBy = default(string?), string? direction = default(string?), string? resourceName = default(string?), int operationIndex = 0)
        {
            EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<List<ResourceClaimActionAuthStrategyModel>> localVarResponse = V2ResourceClaimActionAuthStrategiesGetWithHttpInfo(offset, limit, orderBy, direction, resourceName);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves all resourceClaimActionAuthStrategies. This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="resourceName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ResourceClaimActionAuthStrategyModel&gt;</returns>
        public EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<List<ResourceClaimActionAuthStrategyModel>> V2ResourceClaimActionAuthStrategiesGetWithHttpInfo(int? offset = default(int?), int? limit = default(int?), string? orderBy = default(string?), string? direction = default(string?), string? resourceName = default(string?), int operationIndex = 0)
        {
            EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions localVarRequestOptions = new EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (resourceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToMultiMap("", "resourceName", resourceName));
            }

            localVarRequestOptions.Operation = "ResourceClaimActionAuthStrategiesApi.V2ResourceClaimActionAuthStrategiesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ResourceClaimActionAuthStrategyModel>>("/v2/resourceClaimActionAuthStrategies", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V2ResourceClaimActionAuthStrategiesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves all resourceClaimActionAuthStrategies. This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="resourceName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ResourceClaimActionAuthStrategyModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<ResourceClaimActionAuthStrategyModel>> V2ResourceClaimActionAuthStrategiesGetAsync(int? offset = default(int?), int? limit = default(int?), string? orderBy = default(string?), string? direction = default(string?), string? resourceName = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<List<ResourceClaimActionAuthStrategyModel>> localVarResponse = await V2ResourceClaimActionAuthStrategiesGetWithHttpInfoAsync(offset, limit, orderBy, direction, resourceName, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves all resourceClaimActionAuthStrategies. This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="resourceName"> (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ResourceClaimActionAuthStrategyModel&gt;)</returns>
        public async System.Threading.Tasks.Task<EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<List<ResourceClaimActionAuthStrategyModel>>> V2ResourceClaimActionAuthStrategiesGetWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), string? orderBy = default(string?), string? direction = default(string?), string? resourceName = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions localVarRequestOptions = new EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (resourceName != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToMultiMap("", "resourceName", resourceName));
            }

            localVarRequestOptions.Operation = "ResourceClaimActionAuthStrategiesApi.V2ResourceClaimActionAuthStrategiesGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ResourceClaimActionAuthStrategyModel>>("/v2/resourceClaimActionAuthStrategies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V2ResourceClaimActionAuthStrategiesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
