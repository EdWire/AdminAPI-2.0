/*
 * Admin API Documentation
 *
 * The Ed-Fi Admin API is a REST API-based administrative interface for managing vendors, applications, client credentials, and authorization rules for accessing an Ed-Fi API.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EdFi.Ods.AdminApi.V2.Client.Client;
using EdFi.Ods.AdminApi.V2.Client.Client.Auth;
using EdFi.Ods.AdminApi.V2.Client.Model;

namespace EdFi.Ods.AdminApi.V2.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOdsInstanceContextsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Retrieves all odsInstanceContexts.
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;OdsInstanceContextModel&gt;</returns>
        List<OdsInstanceContextModel> V2OdsInstanceContextsGet(int? offset = default(int?), int? limit = default(int?), string? orderBy = default(string?), string? direction = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieves all odsInstanceContexts.
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;OdsInstanceContextModel&gt;</returns>
        ApiResponse<List<OdsInstanceContextModel>> V2OdsInstanceContextsGetWithHttpInfo(int? offset = default(int?), int? limit = default(int?), string? orderBy = default(string?), string? direction = default(string?), int operationIndex = 0);
        /// <summary>
        /// Deletes an existing odsInstanceContext using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void V2OdsInstanceContextsIdDelete(int id, int operationIndex = 0);

        /// <summary>
        /// Deletes an existing odsInstanceContext using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V2OdsInstanceContextsIdDeleteWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific odsInstanceContext based on the identifier.
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OdsInstanceContextModel</returns>
        OdsInstanceContextModel V2OdsInstanceContextsIdGet(int id, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific odsInstanceContext based on the identifier.
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OdsInstanceContextModel</returns>
        ApiResponse<OdsInstanceContextModel> V2OdsInstanceContextsIdGetWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Updates odsInstanceContext based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="editOdsInstanceContextRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void V2OdsInstanceContextsIdPut(int id, EditOdsInstanceContextRequest editOdsInstanceContextRequest, int operationIndex = 0);

        /// <summary>
        /// Updates odsInstanceContext based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="editOdsInstanceContextRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V2OdsInstanceContextsIdPutWithHttpInfo(int id, EditOdsInstanceContextRequest editOdsInstanceContextRequest, int operationIndex = 0);
        /// <summary>
        /// Creates odsInstanceContext based on the supplied values.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addOdsInstanceContextRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void V2OdsInstanceContextsPost(AddOdsInstanceContextRequest addOdsInstanceContextRequest, int operationIndex = 0);

        /// <summary>
        /// Creates odsInstanceContext based on the supplied values.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addOdsInstanceContextRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V2OdsInstanceContextsPostWithHttpInfo(AddOdsInstanceContextRequest addOdsInstanceContextRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOdsInstanceContextsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Retrieves all odsInstanceContexts.
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OdsInstanceContextModel&gt;</returns>
        System.Threading.Tasks.Task<List<OdsInstanceContextModel>> V2OdsInstanceContextsGetAsync(int? offset = default(int?), int? limit = default(int?), string? orderBy = default(string?), string? direction = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves all odsInstanceContexts.
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OdsInstanceContextModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<OdsInstanceContextModel>>> V2OdsInstanceContextsGetWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), string? orderBy = default(string?), string? direction = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes an existing odsInstanceContext using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V2OdsInstanceContextsIdDeleteAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes an existing odsInstanceContext using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V2OdsInstanceContextsIdDeleteWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific odsInstanceContext based on the identifier.
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OdsInstanceContextModel</returns>
        System.Threading.Tasks.Task<OdsInstanceContextModel> V2OdsInstanceContextsIdGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific odsInstanceContext based on the identifier.
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OdsInstanceContextModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<OdsInstanceContextModel>> V2OdsInstanceContextsIdGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates odsInstanceContext based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="editOdsInstanceContextRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V2OdsInstanceContextsIdPutAsync(int id, EditOdsInstanceContextRequest editOdsInstanceContextRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates odsInstanceContext based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="editOdsInstanceContextRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V2OdsInstanceContextsIdPutWithHttpInfoAsync(int id, EditOdsInstanceContextRequest editOdsInstanceContextRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates odsInstanceContext based on the supplied values.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addOdsInstanceContextRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V2OdsInstanceContextsPostAsync(AddOdsInstanceContextRequest addOdsInstanceContextRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates odsInstanceContext based on the supplied values.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addOdsInstanceContextRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V2OdsInstanceContextsPostWithHttpInfoAsync(AddOdsInstanceContextRequest addOdsInstanceContextRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IOdsInstanceContextsApi : IOdsInstanceContextsApiSync, IOdsInstanceContextsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class OdsInstanceContextsApi : IOdsInstanceContextsApi
    {
        private EdFi.Ods.AdminApi.V2.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="OdsInstanceContextsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OdsInstanceContextsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OdsInstanceContextsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OdsInstanceContextsApi(string basePath)
        {
            this.Configuration = EdFi.Ods.AdminApi.V2.Client.Client.Configuration.MergeConfigurations(
                EdFi.Ods.AdminApi.V2.Client.Client.GlobalConfiguration.Instance,
                new EdFi.Ods.AdminApi.V2.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EdFi.Ods.AdminApi.V2.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EdFi.Ods.AdminApi.V2.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EdFi.Ods.AdminApi.V2.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OdsInstanceContextsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public OdsInstanceContextsApi(EdFi.Ods.AdminApi.V2.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EdFi.Ods.AdminApi.V2.Client.Client.Configuration.MergeConfigurations(
                EdFi.Ods.AdminApi.V2.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EdFi.Ods.AdminApi.V2.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EdFi.Ods.AdminApi.V2.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EdFi.Ods.AdminApi.V2.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="OdsInstanceContextsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public OdsInstanceContextsApi(EdFi.Ods.AdminApi.V2.Client.Client.ISynchronousClient client, EdFi.Ods.AdminApi.V2.Client.Client.IAsynchronousClient asyncClient, EdFi.Ods.AdminApi.V2.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EdFi.Ods.AdminApi.V2.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EdFi.Ods.AdminApi.V2.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EdFi.Ods.AdminApi.V2.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EdFi.Ods.AdminApi.V2.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EdFi.Ods.AdminApi.V2.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Retrieves all odsInstanceContexts. This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;OdsInstanceContextModel&gt;</returns>
        public List<OdsInstanceContextModel> V2OdsInstanceContextsGet(int? offset = default(int?), int? limit = default(int?), string? orderBy = default(string?), string? direction = default(string?), int operationIndex = 0)
        {
            EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<List<OdsInstanceContextModel>> localVarResponse = V2OdsInstanceContextsGetWithHttpInfo(offset, limit, orderBy, direction);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves all odsInstanceContexts. This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;OdsInstanceContextModel&gt;</returns>
        public EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<List<OdsInstanceContextModel>> V2OdsInstanceContextsGetWithHttpInfo(int? offset = default(int?), int? limit = default(int?), string? orderBy = default(string?), string? direction = default(string?), int operationIndex = 0)
        {
            EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions localVarRequestOptions = new EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }

            localVarRequestOptions.Operation = "OdsInstanceContextsApi.V2OdsInstanceContextsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<OdsInstanceContextModel>>("/v2/odsInstanceContexts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V2OdsInstanceContextsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves all odsInstanceContexts. This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;OdsInstanceContextModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<OdsInstanceContextModel>> V2OdsInstanceContextsGetAsync(int? offset = default(int?), int? limit = default(int?), string? orderBy = default(string?), string? direction = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<List<OdsInstanceContextModel>> localVarResponse = await V2OdsInstanceContextsGetWithHttpInfoAsync(offset, limit, orderBy, direction, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves all odsInstanceContexts. This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;OdsInstanceContextModel&gt;)</returns>
        public async System.Threading.Tasks.Task<EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<List<OdsInstanceContextModel>>> V2OdsInstanceContextsGetWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), string? orderBy = default(string?), string? direction = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions localVarRequestOptions = new EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }

            localVarRequestOptions.Operation = "OdsInstanceContextsApi.V2OdsInstanceContextsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<OdsInstanceContextModel>>("/v2/odsInstanceContexts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V2OdsInstanceContextsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes an existing odsInstanceContext using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void V2OdsInstanceContextsIdDelete(int id, int operationIndex = 0)
        {
            V2OdsInstanceContextsIdDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes an existing odsInstanceContext using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<Object> V2OdsInstanceContextsIdDeleteWithHttpInfo(int id, int operationIndex = 0)
        {
            EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions localVarRequestOptions = new EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OdsInstanceContextsApi.V2OdsInstanceContextsIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/odsInstanceContexts/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V2OdsInstanceContextsIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes an existing odsInstanceContext using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V2OdsInstanceContextsIdDeleteAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await V2OdsInstanceContextsIdDeleteWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes an existing odsInstanceContext using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<Object>> V2OdsInstanceContextsIdDeleteWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions localVarRequestOptions = new EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OdsInstanceContextsApi.V2OdsInstanceContextsIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/odsInstanceContexts/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V2OdsInstanceContextsIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific odsInstanceContext based on the identifier. This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>OdsInstanceContextModel</returns>
        public OdsInstanceContextModel V2OdsInstanceContextsIdGet(int id, int operationIndex = 0)
        {
            EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<OdsInstanceContextModel> localVarResponse = V2OdsInstanceContextsIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific odsInstanceContext based on the identifier. This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of OdsInstanceContextModel</returns>
        public EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<OdsInstanceContextModel> V2OdsInstanceContextsIdGetWithHttpInfo(int id, int operationIndex = 0)
        {
            EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions localVarRequestOptions = new EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OdsInstanceContextsApi.V2OdsInstanceContextsIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<OdsInstanceContextModel>("/v2/odsInstanceContexts/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V2OdsInstanceContextsIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific odsInstanceContext based on the identifier. This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of OdsInstanceContextModel</returns>
        public async System.Threading.Tasks.Task<OdsInstanceContextModel> V2OdsInstanceContextsIdGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<OdsInstanceContextModel> localVarResponse = await V2OdsInstanceContextsIdGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific odsInstanceContext based on the identifier. This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (OdsInstanceContextModel)</returns>
        public async System.Threading.Tasks.Task<EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<OdsInstanceContextModel>> V2OdsInstanceContextsIdGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions localVarRequestOptions = new EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "OdsInstanceContextsApi.V2OdsInstanceContextsIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<OdsInstanceContextModel>("/v2/odsInstanceContexts/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V2OdsInstanceContextsIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates odsInstanceContext based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="editOdsInstanceContextRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void V2OdsInstanceContextsIdPut(int id, EditOdsInstanceContextRequest editOdsInstanceContextRequest, int operationIndex = 0)
        {
            V2OdsInstanceContextsIdPutWithHttpInfo(id, editOdsInstanceContextRequest);
        }

        /// <summary>
        /// Updates odsInstanceContext based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="editOdsInstanceContextRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<Object> V2OdsInstanceContextsIdPutWithHttpInfo(int id, EditOdsInstanceContextRequest editOdsInstanceContextRequest, int operationIndex = 0)
        {
            // verify the required parameter 'editOdsInstanceContextRequest' is set
            if (editOdsInstanceContextRequest == null)
            {
                throw new EdFi.Ods.AdminApi.V2.Client.Client.ApiException(400, "Missing required parameter 'editOdsInstanceContextRequest' when calling OdsInstanceContextsApi->V2OdsInstanceContextsIdPut");
            }

            EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions localVarRequestOptions = new EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = editOdsInstanceContextRequest;

            localVarRequestOptions.Operation = "OdsInstanceContextsApi.V2OdsInstanceContextsIdPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v2/odsInstanceContexts/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V2OdsInstanceContextsIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates odsInstanceContext based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="editOdsInstanceContextRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V2OdsInstanceContextsIdPutAsync(int id, EditOdsInstanceContextRequest editOdsInstanceContextRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await V2OdsInstanceContextsIdPutWithHttpInfoAsync(id, editOdsInstanceContextRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Updates odsInstanceContext based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="editOdsInstanceContextRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<Object>> V2OdsInstanceContextsIdPutWithHttpInfoAsync(int id, EditOdsInstanceContextRequest editOdsInstanceContextRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'editOdsInstanceContextRequest' is set
            if (editOdsInstanceContextRequest == null)
            {
                throw new EdFi.Ods.AdminApi.V2.Client.Client.ApiException(400, "Missing required parameter 'editOdsInstanceContextRequest' when calling OdsInstanceContextsApi->V2OdsInstanceContextsIdPut");
            }


            EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions localVarRequestOptions = new EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = editOdsInstanceContextRequest;

            localVarRequestOptions.Operation = "OdsInstanceContextsApi.V2OdsInstanceContextsIdPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/v2/odsInstanceContexts/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V2OdsInstanceContextsIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates odsInstanceContext based on the supplied values. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addOdsInstanceContextRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void V2OdsInstanceContextsPost(AddOdsInstanceContextRequest addOdsInstanceContextRequest, int operationIndex = 0)
        {
            V2OdsInstanceContextsPostWithHttpInfo(addOdsInstanceContextRequest);
        }

        /// <summary>
        /// Creates odsInstanceContext based on the supplied values. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addOdsInstanceContextRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<Object> V2OdsInstanceContextsPostWithHttpInfo(AddOdsInstanceContextRequest addOdsInstanceContextRequest, int operationIndex = 0)
        {
            // verify the required parameter 'addOdsInstanceContextRequest' is set
            if (addOdsInstanceContextRequest == null)
            {
                throw new EdFi.Ods.AdminApi.V2.Client.Client.ApiException(400, "Missing required parameter 'addOdsInstanceContextRequest' when calling OdsInstanceContextsApi->V2OdsInstanceContextsPost");
            }

            EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions localVarRequestOptions = new EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addOdsInstanceContextRequest;

            localVarRequestOptions.Operation = "OdsInstanceContextsApi.V2OdsInstanceContextsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/odsInstanceContexts", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V2OdsInstanceContextsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates odsInstanceContext based on the supplied values. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addOdsInstanceContextRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V2OdsInstanceContextsPostAsync(AddOdsInstanceContextRequest addOdsInstanceContextRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await V2OdsInstanceContextsPostWithHttpInfoAsync(addOdsInstanceContextRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Creates odsInstanceContext based on the supplied values. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addOdsInstanceContextRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<Object>> V2OdsInstanceContextsPostWithHttpInfoAsync(AddOdsInstanceContextRequest addOdsInstanceContextRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'addOdsInstanceContextRequest' is set
            if (addOdsInstanceContextRequest == null)
            {
                throw new EdFi.Ods.AdminApi.V2.Client.Client.ApiException(400, "Missing required parameter 'addOdsInstanceContextRequest' when calling OdsInstanceContextsApi->V2OdsInstanceContextsPost");
            }


            EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions localVarRequestOptions = new EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addOdsInstanceContextRequest;

            localVarRequestOptions.Operation = "OdsInstanceContextsApi.V2OdsInstanceContextsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/odsInstanceContexts", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V2OdsInstanceContextsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
