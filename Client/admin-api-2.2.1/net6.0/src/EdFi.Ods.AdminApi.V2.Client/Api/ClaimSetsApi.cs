/*
 * Admin API Documentation
 *
 * The Ed-Fi Admin API is a REST API-based administrative interface for managing vendors, applications, client credentials, and authorization rules for accessing an Ed-Fi API.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using EdFi.Ods.AdminApi.V2.Client.Client;
using EdFi.Ods.AdminApi.V2.Client.Client.Auth;
using EdFi.Ods.AdminApi.V2.Client.Model;

namespace EdFi.Ods.AdminApi.V2.Client.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClaimSetsApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Adds ResourceClaimAction association to a claim set.
        /// </summary>
        /// <remarks>
        /// Add resourceClaimAction association to claim set. At least one action should be enabled. Valid actions are read, create, update, delete, readchanges.  resouceclaimId is required fields.
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="addResourceClaimOnClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void V2ClaimSetsClaimSetIdResourceClaimActionsPost(int claimSetId, AddResourceClaimOnClaimSetRequest addResourceClaimOnClaimSetRequest, int operationIndex = 0);

        /// <summary>
        /// Adds ResourceClaimAction association to a claim set.
        /// </summary>
        /// <remarks>
        /// Add resourceClaimAction association to claim set. At least one action should be enabled. Valid actions are read, create, update, delete, readchanges.  resouceclaimId is required fields.
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="addResourceClaimOnClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V2ClaimSetsClaimSetIdResourceClaimActionsPostWithHttpInfo(int claimSetId, AddResourceClaimOnClaimSetRequest addResourceClaimOnClaimSetRequest, int operationIndex = 0);
        /// <summary>
        /// Deletes a resource claims association from a claimset
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDelete(int claimSetId, int resourceClaimId, int operationIndex = 0);

        /// <summary>
        /// Deletes a resource claims association from a claimset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteWithHttpInfo(int claimSetId, int resourceClaimId, int operationIndex = 0);
        /// <summary>
        /// Overrides the default authorization strategies on provided resource claim for a specific action.
        /// </summary>
        /// <remarks>
        /// Override the default authorization strategies on provided resource claim for a specific action.    ex: actionName &#x3D; read,  authorizationStrategies&#x3D; [ \&quot;Ownershipbased\&quot; ]
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="overrideAuthStategyOnClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPost(int claimSetId, int resourceClaimId, OverrideAuthStategyOnClaimSetRequest overrideAuthStategyOnClaimSetRequest, int operationIndex = 0);

        /// <summary>
        /// Overrides the default authorization strategies on provided resource claim for a specific action.
        /// </summary>
        /// <remarks>
        /// Override the default authorization strategies on provided resource claim for a specific action.    ex: actionName &#x3D; read,  authorizationStrategies&#x3D; [ \&quot;Ownershipbased\&quot; ]
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="overrideAuthStategyOnClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostWithHttpInfo(int claimSetId, int resourceClaimId, OverrideAuthStategyOnClaimSetRequest overrideAuthStategyOnClaimSetRequest, int operationIndex = 0);
        /// <summary>
        /// Updates the ResourceClaimActions to a specific resource claim on a claimset.
        /// </summary>
        /// <remarks>
        /// Updates  the resourceClaimActions to a  specific resource claim on a claimset. At least one action should be enabled. Valid actions are read, create, update, delete, readchanges.
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="editResourceClaimOnClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPut(int claimSetId, int resourceClaimId, EditResourceClaimOnClaimSetRequest editResourceClaimOnClaimSetRequest, int operationIndex = 0);

        /// <summary>
        /// Updates the ResourceClaimActions to a specific resource claim on a claimset.
        /// </summary>
        /// <remarks>
        /// Updates  the resourceClaimActions to a  specific resource claim on a claimset. At least one action should be enabled. Valid actions are read, create, update, delete, readchanges.
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="editResourceClaimOnClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutWithHttpInfo(int claimSetId, int resourceClaimId, EditResourceClaimOnClaimSetRequest editResourceClaimOnClaimSetRequest, int operationIndex = 0);
        /// <summary>
        /// Resets to default authorization strategies on provided resource claim.
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPost(int claimSetId, int resourceClaimId, int operationIndex = 0);

        /// <summary>
        /// Resets to default authorization strategies on provided resource claim.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostWithHttpInfo(int claimSetId, int resourceClaimId, int operationIndex = 0);
        /// <summary>
        /// Copies the existing claimset and create a new one.
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void V2ClaimSetsCopyPost(CopyClaimSetRequest copyClaimSetRequest, int operationIndex = 0);

        /// <summary>
        /// Copies the existing claimset and create a new one.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V2ClaimSetsCopyPostWithHttpInfo(CopyClaimSetRequest copyClaimSetRequest, int operationIndex = 0);
        /// <summary>
        /// Retrieves all claimSets.
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="id">Claim set id (optional)</param>
        /// <param name="name">Claim set name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ClaimSetModel&gt;</returns>
        List<ClaimSetModel> V2ClaimSetsGet(int? offset = default(int?), int? limit = default(int?), string? orderBy = default(string?), string? direction = default(string?), int? id = default(int?), string? name = default(string?), int operationIndex = 0);

        /// <summary>
        /// Retrieves all claimSets.
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="id">Claim set id (optional)</param>
        /// <param name="name">Claim set name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ClaimSetModel&gt;</returns>
        ApiResponse<List<ClaimSetModel>> V2ClaimSetsGetWithHttpInfo(int? offset = default(int?), int? limit = default(int?), string? orderBy = default(string?), string? direction = default(string?), int? id = default(int?), string? name = default(string?), int operationIndex = 0);
        /// <summary>
        /// Deletes an existing claimSet using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void V2ClaimSetsIdDelete(int id, int operationIndex = 0);

        /// <summary>
        /// Deletes an existing claimSet using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V2ClaimSetsIdDeleteWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Exports a specific claimset by id
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClaimSetDetailsModel</returns>
        ClaimSetDetailsModel V2ClaimSetsIdExportGet(int id, int operationIndex = 0);

        /// <summary>
        /// Exports a specific claimset by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClaimSetDetailsModel</returns>
        ApiResponse<ClaimSetDetailsModel> V2ClaimSetsIdExportGetWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Retrieves a specific claimSet based on the identifier.
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClaimSetDetailsModel</returns>
        ClaimSetDetailsModel V2ClaimSetsIdGet(int id, int operationIndex = 0);

        /// <summary>
        /// Retrieves a specific claimSet based on the identifier.
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClaimSetDetailsModel</returns>
        ApiResponse<ClaimSetDetailsModel> V2ClaimSetsIdGetWithHttpInfo(int id, int operationIndex = 0);
        /// <summary>
        /// Updates claimSet based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="editClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void V2ClaimSetsIdPut(int id, EditClaimSetRequest editClaimSetRequest, int operationIndex = 0);

        /// <summary>
        /// Updates claimSet based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="editClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V2ClaimSetsIdPutWithHttpInfo(int id, EditClaimSetRequest editClaimSetRequest, int operationIndex = 0);
        /// <summary>
        /// Imports a new claimset
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void V2ClaimSetsImportPost(ImportClaimSetRequest importClaimSetRequest, int operationIndex = 0);

        /// <summary>
        /// Imports a new claimset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V2ClaimSetsImportPostWithHttpInfo(ImportClaimSetRequest importClaimSetRequest, int operationIndex = 0);
        /// <summary>
        /// Creates claimSet based on the supplied values.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        void V2ClaimSetsPost(AddClaimSetRequest addClaimSetRequest, int operationIndex = 0);

        /// <summary>
        /// Creates claimSet based on the supplied values.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        ApiResponse<Object> V2ClaimSetsPostWithHttpInfo(AddClaimSetRequest addClaimSetRequest, int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClaimSetsApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Adds ResourceClaimAction association to a claim set.
        /// </summary>
        /// <remarks>
        /// Add resourceClaimAction association to claim set. At least one action should be enabled. Valid actions are read, create, update, delete, readchanges.  resouceclaimId is required fields.
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="addResourceClaimOnClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V2ClaimSetsClaimSetIdResourceClaimActionsPostAsync(int claimSetId, AddResourceClaimOnClaimSetRequest addResourceClaimOnClaimSetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Adds ResourceClaimAction association to a claim set.
        /// </summary>
        /// <remarks>
        /// Add resourceClaimAction association to claim set. At least one action should be enabled. Valid actions are read, create, update, delete, readchanges.  resouceclaimId is required fields.
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="addResourceClaimOnClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V2ClaimSetsClaimSetIdResourceClaimActionsPostWithHttpInfoAsync(int claimSetId, AddResourceClaimOnClaimSetRequest addResourceClaimOnClaimSetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes a resource claims association from a claimset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteAsync(int claimSetId, int resourceClaimId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes a resource claims association from a claimset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteWithHttpInfoAsync(int claimSetId, int resourceClaimId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Overrides the default authorization strategies on provided resource claim for a specific action.
        /// </summary>
        /// <remarks>
        /// Override the default authorization strategies on provided resource claim for a specific action.    ex: actionName &#x3D; read,  authorizationStrategies&#x3D; [ \&quot;Ownershipbased\&quot; ]
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="overrideAuthStategyOnClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostAsync(int claimSetId, int resourceClaimId, OverrideAuthStategyOnClaimSetRequest overrideAuthStategyOnClaimSetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Overrides the default authorization strategies on provided resource claim for a specific action.
        /// </summary>
        /// <remarks>
        /// Override the default authorization strategies on provided resource claim for a specific action.    ex: actionName &#x3D; read,  authorizationStrategies&#x3D; [ \&quot;Ownershipbased\&quot; ]
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="overrideAuthStategyOnClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostWithHttpInfoAsync(int claimSetId, int resourceClaimId, OverrideAuthStategyOnClaimSetRequest overrideAuthStategyOnClaimSetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates the ResourceClaimActions to a specific resource claim on a claimset.
        /// </summary>
        /// <remarks>
        /// Updates  the resourceClaimActions to a  specific resource claim on a claimset. At least one action should be enabled. Valid actions are read, create, update, delete, readchanges.
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="editResourceClaimOnClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutAsync(int claimSetId, int resourceClaimId, EditResourceClaimOnClaimSetRequest editResourceClaimOnClaimSetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates the ResourceClaimActions to a specific resource claim on a claimset.
        /// </summary>
        /// <remarks>
        /// Updates  the resourceClaimActions to a  specific resource claim on a claimset. At least one action should be enabled. Valid actions are read, create, update, delete, readchanges.
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="editResourceClaimOnClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutWithHttpInfoAsync(int claimSetId, int resourceClaimId, EditResourceClaimOnClaimSetRequest editResourceClaimOnClaimSetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Resets to default authorization strategies on provided resource claim.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostAsync(int claimSetId, int resourceClaimId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Resets to default authorization strategies on provided resource claim.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostWithHttpInfoAsync(int claimSetId, int resourceClaimId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Copies the existing claimset and create a new one.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V2ClaimSetsCopyPostAsync(CopyClaimSetRequest copyClaimSetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Copies the existing claimset and create a new one.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V2ClaimSetsCopyPostWithHttpInfoAsync(CopyClaimSetRequest copyClaimSetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves all claimSets.
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="id">Claim set id (optional)</param>
        /// <param name="name">Claim set name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ClaimSetModel&gt;</returns>
        System.Threading.Tasks.Task<List<ClaimSetModel>> V2ClaimSetsGetAsync(int? offset = default(int?), int? limit = default(int?), string? orderBy = default(string?), string? direction = default(string?), int? id = default(int?), string? name = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves all claimSets.
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="id">Claim set id (optional)</param>
        /// <param name="name">Claim set name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ClaimSetModel&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<ClaimSetModel>>> V2ClaimSetsGetWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), string? orderBy = default(string?), string? direction = default(string?), int? id = default(int?), string? name = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Deletes an existing claimSet using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V2ClaimSetsIdDeleteAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Deletes an existing claimSet using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V2ClaimSetsIdDeleteWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Exports a specific claimset by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClaimSetDetailsModel</returns>
        System.Threading.Tasks.Task<ClaimSetDetailsModel> V2ClaimSetsIdExportGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Exports a specific claimset by id
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClaimSetDetailsModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClaimSetDetailsModel>> V2ClaimSetsIdExportGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Retrieves a specific claimSet based on the identifier.
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClaimSetDetailsModel</returns>
        System.Threading.Tasks.Task<ClaimSetDetailsModel> V2ClaimSetsIdGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Retrieves a specific claimSet based on the identifier.
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClaimSetDetailsModel)</returns>
        System.Threading.Tasks.Task<ApiResponse<ClaimSetDetailsModel>> V2ClaimSetsIdGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Updates claimSet based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="editClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V2ClaimSetsIdPutAsync(int id, EditClaimSetRequest editClaimSetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Updates claimSet based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="editClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V2ClaimSetsIdPutWithHttpInfoAsync(int id, EditClaimSetRequest editClaimSetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Imports a new claimset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V2ClaimSetsImportPostAsync(ImportClaimSetRequest importClaimSetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Imports a new claimset
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V2ClaimSetsImportPostWithHttpInfoAsync(ImportClaimSetRequest importClaimSetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Creates claimSet based on the supplied values.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        System.Threading.Tasks.Task V2ClaimSetsPostAsync(AddClaimSetRequest addClaimSetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Creates claimSet based on the supplied values.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> V2ClaimSetsPostWithHttpInfoAsync(AddClaimSetRequest addClaimSetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IClaimSetsApi : IClaimSetsApiSync, IClaimSetsApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class ClaimSetsApi : IClaimSetsApi
    {
        private EdFi.Ods.AdminApi.V2.Client.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="ClaimSetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClaimSetsApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClaimSetsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ClaimSetsApi(string basePath)
        {
            this.Configuration = EdFi.Ods.AdminApi.V2.Client.Client.Configuration.MergeConfigurations(
                EdFi.Ods.AdminApi.V2.Client.Client.GlobalConfiguration.Instance,
                new EdFi.Ods.AdminApi.V2.Client.Client.Configuration { BasePath = basePath }
            );
            this.Client = new EdFi.Ods.AdminApi.V2.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EdFi.Ods.AdminApi.V2.Client.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = EdFi.Ods.AdminApi.V2.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClaimSetsApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public ClaimSetsApi(EdFi.Ods.AdminApi.V2.Client.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = EdFi.Ods.AdminApi.V2.Client.Client.Configuration.MergeConfigurations(
                EdFi.Ods.AdminApi.V2.Client.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new EdFi.Ods.AdminApi.V2.Client.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new EdFi.Ods.AdminApi.V2.Client.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = EdFi.Ods.AdminApi.V2.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="ClaimSetsApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public ClaimSetsApi(EdFi.Ods.AdminApi.V2.Client.Client.ISynchronousClient client, EdFi.Ods.AdminApi.V2.Client.Client.IAsynchronousClient asyncClient, EdFi.Ods.AdminApi.V2.Client.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = EdFi.Ods.AdminApi.V2.Client.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public EdFi.Ods.AdminApi.V2.Client.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public EdFi.Ods.AdminApi.V2.Client.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public EdFi.Ods.AdminApi.V2.Client.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public EdFi.Ods.AdminApi.V2.Client.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Adds ResourceClaimAction association to a claim set. Add resourceClaimAction association to claim set. At least one action should be enabled. Valid actions are read, create, update, delete, readchanges.  resouceclaimId is required fields.
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="addResourceClaimOnClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void V2ClaimSetsClaimSetIdResourceClaimActionsPost(int claimSetId, AddResourceClaimOnClaimSetRequest addResourceClaimOnClaimSetRequest, int operationIndex = 0)
        {
            V2ClaimSetsClaimSetIdResourceClaimActionsPostWithHttpInfo(claimSetId, addResourceClaimOnClaimSetRequest);
        }

        /// <summary>
        /// Adds ResourceClaimAction association to a claim set. Add resourceClaimAction association to claim set. At least one action should be enabled. Valid actions are read, create, update, delete, readchanges.  resouceclaimId is required fields.
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="addResourceClaimOnClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<Object> V2ClaimSetsClaimSetIdResourceClaimActionsPostWithHttpInfo(int claimSetId, AddResourceClaimOnClaimSetRequest addResourceClaimOnClaimSetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'addResourceClaimOnClaimSetRequest' is set
            if (addResourceClaimOnClaimSetRequest == null)
            {
                throw new EdFi.Ods.AdminApi.V2.Client.Client.ApiException(400, "Missing required parameter 'addResourceClaimOnClaimSetRequest' when calling ClaimSetsApi->V2ClaimSetsClaimSetIdResourceClaimActionsPost");
            }

            EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions localVarRequestOptions = new EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("claimSetId", EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToString(claimSetId)); // path parameter
            localVarRequestOptions.Data = addResourceClaimOnClaimSetRequest;

            localVarRequestOptions.Operation = "ClaimSetsApi.V2ClaimSetsClaimSetIdResourceClaimActionsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/claimSets/{claimSetId}/resourceClaimActions", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V2ClaimSetsClaimSetIdResourceClaimActionsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Adds ResourceClaimAction association to a claim set. Add resourceClaimAction association to claim set. At least one action should be enabled. Valid actions are read, create, update, delete, readchanges.  resouceclaimId is required fields.
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="addResourceClaimOnClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V2ClaimSetsClaimSetIdResourceClaimActionsPostAsync(int claimSetId, AddResourceClaimOnClaimSetRequest addResourceClaimOnClaimSetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await V2ClaimSetsClaimSetIdResourceClaimActionsPostWithHttpInfoAsync(claimSetId, addResourceClaimOnClaimSetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Adds ResourceClaimAction association to a claim set. Add resourceClaimAction association to claim set. At least one action should be enabled. Valid actions are read, create, update, delete, readchanges.  resouceclaimId is required fields.
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="addResourceClaimOnClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<Object>> V2ClaimSetsClaimSetIdResourceClaimActionsPostWithHttpInfoAsync(int claimSetId, AddResourceClaimOnClaimSetRequest addResourceClaimOnClaimSetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'addResourceClaimOnClaimSetRequest' is set
            if (addResourceClaimOnClaimSetRequest == null)
            {
                throw new EdFi.Ods.AdminApi.V2.Client.Client.ApiException(400, "Missing required parameter 'addResourceClaimOnClaimSetRequest' when calling ClaimSetsApi->V2ClaimSetsClaimSetIdResourceClaimActionsPost");
            }


            EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions localVarRequestOptions = new EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("claimSetId", EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToString(claimSetId)); // path parameter
            localVarRequestOptions.Data = addResourceClaimOnClaimSetRequest;

            localVarRequestOptions.Operation = "ClaimSetsApi.V2ClaimSetsClaimSetIdResourceClaimActionsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/claimSets/{claimSetId}/resourceClaimActions", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V2ClaimSetsClaimSetIdResourceClaimActionsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a resource claims association from a claimset 
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDelete(int claimSetId, int resourceClaimId, int operationIndex = 0)
        {
            V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteWithHttpInfo(claimSetId, resourceClaimId);
        }

        /// <summary>
        /// Deletes a resource claims association from a claimset 
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<Object> V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteWithHttpInfo(int claimSetId, int resourceClaimId, int operationIndex = 0)
        {
            EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions localVarRequestOptions = new EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("claimSetId", EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToString(claimSetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("resourceClaimId", EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToString(resourceClaimId)); // path parameter

            localVarRequestOptions.Operation = "ClaimSetsApi.V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/claimSets/{claimSetId}/resourceClaimActions/{resourceClaimId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes a resource claims association from a claimset 
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteAsync(int claimSetId, int resourceClaimId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteWithHttpInfoAsync(claimSetId, resourceClaimId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes a resource claims association from a claimset 
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<Object>> V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDeleteWithHttpInfoAsync(int claimSetId, int resourceClaimId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions localVarRequestOptions = new EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("claimSetId", EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToString(claimSetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("resourceClaimId", EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToString(resourceClaimId)); // path parameter

            localVarRequestOptions.Operation = "ClaimSetsApi.V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/claimSets/{claimSetId}/resourceClaimActions/{resourceClaimId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Overrides the default authorization strategies on provided resource claim for a specific action. Override the default authorization strategies on provided resource claim for a specific action.    ex: actionName &#x3D; read,  authorizationStrategies&#x3D; [ \&quot;Ownershipbased\&quot; ]
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="overrideAuthStategyOnClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPost(int claimSetId, int resourceClaimId, OverrideAuthStategyOnClaimSetRequest overrideAuthStategyOnClaimSetRequest, int operationIndex = 0)
        {
            V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostWithHttpInfo(claimSetId, resourceClaimId, overrideAuthStategyOnClaimSetRequest);
        }

        /// <summary>
        /// Overrides the default authorization strategies on provided resource claim for a specific action. Override the default authorization strategies on provided resource claim for a specific action.    ex: actionName &#x3D; read,  authorizationStrategies&#x3D; [ \&quot;Ownershipbased\&quot; ]
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="overrideAuthStategyOnClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<Object> V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostWithHttpInfo(int claimSetId, int resourceClaimId, OverrideAuthStategyOnClaimSetRequest overrideAuthStategyOnClaimSetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'overrideAuthStategyOnClaimSetRequest' is set
            if (overrideAuthStategyOnClaimSetRequest == null)
            {
                throw new EdFi.Ods.AdminApi.V2.Client.Client.ApiException(400, "Missing required parameter 'overrideAuthStategyOnClaimSetRequest' when calling ClaimSetsApi->V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPost");
            }

            EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions localVarRequestOptions = new EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("claimSetId", EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToString(claimSetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("resourceClaimId", EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToString(resourceClaimId)); // path parameter
            localVarRequestOptions.Data = overrideAuthStategyOnClaimSetRequest;

            localVarRequestOptions.Operation = "ClaimSetsApi.V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/claimSets/{claimSetId}/resourceClaimActions/{resourceClaimId}/overrideAuthorizationStrategy", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Overrides the default authorization strategies on provided resource claim for a specific action. Override the default authorization strategies on provided resource claim for a specific action.    ex: actionName &#x3D; read,  authorizationStrategies&#x3D; [ \&quot;Ownershipbased\&quot; ]
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="overrideAuthStategyOnClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostAsync(int claimSetId, int resourceClaimId, OverrideAuthStategyOnClaimSetRequest overrideAuthStategyOnClaimSetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostWithHttpInfoAsync(claimSetId, resourceClaimId, overrideAuthStategyOnClaimSetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Overrides the default authorization strategies on provided resource claim for a specific action. Override the default authorization strategies on provided resource claim for a specific action.    ex: actionName &#x3D; read,  authorizationStrategies&#x3D; [ \&quot;Ownershipbased\&quot; ]
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="overrideAuthStategyOnClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<Object>> V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPostWithHttpInfoAsync(int claimSetId, int resourceClaimId, OverrideAuthStategyOnClaimSetRequest overrideAuthStategyOnClaimSetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'overrideAuthStategyOnClaimSetRequest' is set
            if (overrideAuthStategyOnClaimSetRequest == null)
            {
                throw new EdFi.Ods.AdminApi.V2.Client.Client.ApiException(400, "Missing required parameter 'overrideAuthStategyOnClaimSetRequest' when calling ClaimSetsApi->V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPost");
            }


            EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions localVarRequestOptions = new EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("claimSetId", EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToString(claimSetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("resourceClaimId", EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToString(resourceClaimId)); // path parameter
            localVarRequestOptions.Data = overrideAuthStategyOnClaimSetRequest;

            localVarRequestOptions.Operation = "ClaimSetsApi.V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/claimSets/{claimSetId}/resourceClaimActions/{resourceClaimId}/overrideAuthorizationStrategy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdOverrideAuthorizationStrategyPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the ResourceClaimActions to a specific resource claim on a claimset. Updates  the resourceClaimActions to a  specific resource claim on a claimset. At least one action should be enabled. Valid actions are read, create, update, delete, readchanges.
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="editResourceClaimOnClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPut(int claimSetId, int resourceClaimId, EditResourceClaimOnClaimSetRequest editResourceClaimOnClaimSetRequest, int operationIndex = 0)
        {
            V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutWithHttpInfo(claimSetId, resourceClaimId, editResourceClaimOnClaimSetRequest);
        }

        /// <summary>
        /// Updates the ResourceClaimActions to a specific resource claim on a claimset. Updates  the resourceClaimActions to a  specific resource claim on a claimset. At least one action should be enabled. Valid actions are read, create, update, delete, readchanges.
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="editResourceClaimOnClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<Object> V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutWithHttpInfo(int claimSetId, int resourceClaimId, EditResourceClaimOnClaimSetRequest editResourceClaimOnClaimSetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'editResourceClaimOnClaimSetRequest' is set
            if (editResourceClaimOnClaimSetRequest == null)
            {
                throw new EdFi.Ods.AdminApi.V2.Client.Client.ApiException(400, "Missing required parameter 'editResourceClaimOnClaimSetRequest' when calling ClaimSetsApi->V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPut");
            }

            EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions localVarRequestOptions = new EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("claimSetId", EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToString(claimSetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("resourceClaimId", EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToString(resourceClaimId)); // path parameter
            localVarRequestOptions.Data = editResourceClaimOnClaimSetRequest;

            localVarRequestOptions.Operation = "ClaimSetsApi.V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v2/claimSets/{claimSetId}/resourceClaimActions/{resourceClaimId}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates the ResourceClaimActions to a specific resource claim on a claimset. Updates  the resourceClaimActions to a  specific resource claim on a claimset. At least one action should be enabled. Valid actions are read, create, update, delete, readchanges.
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="editResourceClaimOnClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutAsync(int claimSetId, int resourceClaimId, EditResourceClaimOnClaimSetRequest editResourceClaimOnClaimSetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutWithHttpInfoAsync(claimSetId, resourceClaimId, editResourceClaimOnClaimSetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Updates the ResourceClaimActions to a specific resource claim on a claimset. Updates  the resourceClaimActions to a  specific resource claim on a claimset. At least one action should be enabled. Valid actions are read, create, update, delete, readchanges.
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="editResourceClaimOnClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<Object>> V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPutWithHttpInfoAsync(int claimSetId, int resourceClaimId, EditResourceClaimOnClaimSetRequest editResourceClaimOnClaimSetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'editResourceClaimOnClaimSetRequest' is set
            if (editResourceClaimOnClaimSetRequest == null)
            {
                throw new EdFi.Ods.AdminApi.V2.Client.Client.ApiException(400, "Missing required parameter 'editResourceClaimOnClaimSetRequest' when calling ClaimSetsApi->V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPut");
            }


            EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions localVarRequestOptions = new EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("claimSetId", EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToString(claimSetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("resourceClaimId", EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToString(resourceClaimId)); // path parameter
            localVarRequestOptions.Data = editResourceClaimOnClaimSetRequest;

            localVarRequestOptions.Operation = "ClaimSetsApi.V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/v2/claimSets/{claimSetId}/resourceClaimActions/{resourceClaimId}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resets to default authorization strategies on provided resource claim. 
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPost(int claimSetId, int resourceClaimId, int operationIndex = 0)
        {
            V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostWithHttpInfo(claimSetId, resourceClaimId);
        }

        /// <summary>
        /// Resets to default authorization strategies on provided resource claim. 
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<Object> V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostWithHttpInfo(int claimSetId, int resourceClaimId, int operationIndex = 0)
        {
            EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions localVarRequestOptions = new EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("claimSetId", EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToString(claimSetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("resourceClaimId", EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToString(resourceClaimId)); // path parameter

            localVarRequestOptions.Operation = "ClaimSetsApi.V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/claimSets/{claimSetId}/resourceClaimActions/{resourceClaimId}/resetAuthorizationStrategies", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Resets to default authorization strategies on provided resource claim. 
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostAsync(int claimSetId, int resourceClaimId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostWithHttpInfoAsync(claimSetId, resourceClaimId, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Resets to default authorization strategies on provided resource claim. 
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="claimSetId"></param>
        /// <param name="resourceClaimId"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<Object>> V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPostWithHttpInfoAsync(int claimSetId, int resourceClaimId, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions localVarRequestOptions = new EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("claimSetId", EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToString(claimSetId)); // path parameter
            localVarRequestOptions.PathParameters.Add("resourceClaimId", EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToString(resourceClaimId)); // path parameter

            localVarRequestOptions.Operation = "ClaimSetsApi.V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/claimSets/{claimSetId}/resourceClaimActions/{resourceClaimId}/resetAuthorizationStrategies", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V2ClaimSetsClaimSetIdResourceClaimActionsResourceClaimIdResetAuthorizationStrategiesPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copies the existing claimset and create a new one. 
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void V2ClaimSetsCopyPost(CopyClaimSetRequest copyClaimSetRequest, int operationIndex = 0)
        {
            V2ClaimSetsCopyPostWithHttpInfo(copyClaimSetRequest);
        }

        /// <summary>
        /// Copies the existing claimset and create a new one. 
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<Object> V2ClaimSetsCopyPostWithHttpInfo(CopyClaimSetRequest copyClaimSetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'copyClaimSetRequest' is set
            if (copyClaimSetRequest == null)
            {
                throw new EdFi.Ods.AdminApi.V2.Client.Client.ApiException(400, "Missing required parameter 'copyClaimSetRequest' when calling ClaimSetsApi->V2ClaimSetsCopyPost");
            }

            EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions localVarRequestOptions = new EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = copyClaimSetRequest;

            localVarRequestOptions.Operation = "ClaimSetsApi.V2ClaimSetsCopyPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/claimSets/copy", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V2ClaimSetsCopyPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Copies the existing claimset and create a new one. 
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V2ClaimSetsCopyPostAsync(CopyClaimSetRequest copyClaimSetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await V2ClaimSetsCopyPostWithHttpInfoAsync(copyClaimSetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Copies the existing claimset and create a new one. 
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="copyClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<Object>> V2ClaimSetsCopyPostWithHttpInfoAsync(CopyClaimSetRequest copyClaimSetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'copyClaimSetRequest' is set
            if (copyClaimSetRequest == null)
            {
                throw new EdFi.Ods.AdminApi.V2.Client.Client.ApiException(400, "Missing required parameter 'copyClaimSetRequest' when calling ClaimSetsApi->V2ClaimSetsCopyPost");
            }


            EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions localVarRequestOptions = new EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = copyClaimSetRequest;

            localVarRequestOptions.Operation = "ClaimSetsApi.V2ClaimSetsCopyPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/claimSets/copy", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V2ClaimSetsCopyPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves all claimSets. This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="id">Claim set id (optional)</param>
        /// <param name="name">Claim set name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>List&lt;ClaimSetModel&gt;</returns>
        public List<ClaimSetModel> V2ClaimSetsGet(int? offset = default(int?), int? limit = default(int?), string? orderBy = default(string?), string? direction = default(string?), int? id = default(int?), string? name = default(string?), int operationIndex = 0)
        {
            EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<List<ClaimSetModel>> localVarResponse = V2ClaimSetsGetWithHttpInfo(offset, limit, orderBy, direction, id, name);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves all claimSets. This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="id">Claim set id (optional)</param>
        /// <param name="name">Claim set name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of List&lt;ClaimSetModel&gt;</returns>
        public EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<List<ClaimSetModel>> V2ClaimSetsGetWithHttpInfo(int? offset = default(int?), int? limit = default(int?), string? orderBy = default(string?), string? direction = default(string?), int? id = default(int?), string? name = default(string?), int operationIndex = 0)
        {
            EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions localVarRequestOptions = new EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }

            localVarRequestOptions.Operation = "ClaimSetsApi.V2ClaimSetsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<List<ClaimSetModel>>("/v2/claimSets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V2ClaimSetsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves all claimSets. This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="id">Claim set id (optional)</param>
        /// <param name="name">Claim set name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of List&lt;ClaimSetModel&gt;</returns>
        public async System.Threading.Tasks.Task<List<ClaimSetModel>> V2ClaimSetsGetAsync(int? offset = default(int?), int? limit = default(int?), string? orderBy = default(string?), string? direction = default(string?), int? id = default(int?), string? name = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<List<ClaimSetModel>> localVarResponse = await V2ClaimSetsGetWithHttpInfoAsync(offset, limit, orderBy, direction, id, name, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves all claimSets. This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="id">Claim set id (optional)</param>
        /// <param name="name">Claim set name (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (List&lt;ClaimSetModel&gt;)</returns>
        public async System.Threading.Tasks.Task<EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<List<ClaimSetModel>>> V2ClaimSetsGetWithHttpInfoAsync(int? offset = default(int?), int? limit = default(int?), string? orderBy = default(string?), string? direction = default(string?), int? id = default(int?), string? name = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions localVarRequestOptions = new EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            if (offset != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToMultiMap("", "offset", offset));
            }
            if (limit != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToMultiMap("", "limit", limit));
            }
            if (orderBy != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToMultiMap("", "orderBy", orderBy));
            }
            if (direction != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToMultiMap("", "direction", direction));
            }
            if (id != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToMultiMap("", "id", id));
            }
            if (name != null)
            {
                localVarRequestOptions.QueryParameters.Add(EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToMultiMap("", "name", name));
            }

            localVarRequestOptions.Operation = "ClaimSetsApi.V2ClaimSetsGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<List<ClaimSetModel>>("/v2/claimSets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V2ClaimSetsGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes an existing claimSet using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void V2ClaimSetsIdDelete(int id, int operationIndex = 0)
        {
            V2ClaimSetsIdDeleteWithHttpInfo(id);
        }

        /// <summary>
        /// Deletes an existing claimSet using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<Object> V2ClaimSetsIdDeleteWithHttpInfo(int id, int operationIndex = 0)
        {
            EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions localVarRequestOptions = new EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ClaimSetsApi.V2ClaimSetsIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Delete<Object>("/v2/claimSets/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V2ClaimSetsIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Deletes an existing claimSet using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V2ClaimSetsIdDeleteAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await V2ClaimSetsIdDeleteWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Deletes an existing claimSet using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<Object>> V2ClaimSetsIdDeleteWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions localVarRequestOptions = new EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ClaimSetsApi.V2ClaimSetsIdDelete";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.DeleteAsync<Object>("/v2/claimSets/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V2ClaimSetsIdDelete", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Exports a specific claimset by id 
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClaimSetDetailsModel</returns>
        public ClaimSetDetailsModel V2ClaimSetsIdExportGet(int id, int operationIndex = 0)
        {
            EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<ClaimSetDetailsModel> localVarResponse = V2ClaimSetsIdExportGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Exports a specific claimset by id 
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClaimSetDetailsModel</returns>
        public EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<ClaimSetDetailsModel> V2ClaimSetsIdExportGetWithHttpInfo(int id, int operationIndex = 0)
        {
            EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions localVarRequestOptions = new EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ClaimSetsApi.V2ClaimSetsIdExportGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ClaimSetDetailsModel>("/v2/claimSets/{id}/export", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V2ClaimSetsIdExportGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Exports a specific claimset by id 
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClaimSetDetailsModel</returns>
        public async System.Threading.Tasks.Task<ClaimSetDetailsModel> V2ClaimSetsIdExportGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<ClaimSetDetailsModel> localVarResponse = await V2ClaimSetsIdExportGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Exports a specific claimset by id 
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClaimSetDetailsModel)</returns>
        public async System.Threading.Tasks.Task<EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<ClaimSetDetailsModel>> V2ClaimSetsIdExportGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions localVarRequestOptions = new EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ClaimSetsApi.V2ClaimSetsIdExportGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ClaimSetDetailsModel>("/v2/claimSets/{id}/export", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V2ClaimSetsIdExportGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific claimSet based on the identifier. This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ClaimSetDetailsModel</returns>
        public ClaimSetDetailsModel V2ClaimSetsIdGet(int id, int operationIndex = 0)
        {
            EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<ClaimSetDetailsModel> localVarResponse = V2ClaimSetsIdGetWithHttpInfo(id);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific claimSet based on the identifier. This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of ClaimSetDetailsModel</returns>
        public EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<ClaimSetDetailsModel> V2ClaimSetsIdGetWithHttpInfo(int id, int operationIndex = 0)
        {
            EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions localVarRequestOptions = new EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ClaimSetsApi.V2ClaimSetsIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Get<ClaimSetDetailsModel>("/v2/claimSets/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V2ClaimSetsIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Retrieves a specific claimSet based on the identifier. This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ClaimSetDetailsModel</returns>
        public async System.Threading.Tasks.Task<ClaimSetDetailsModel> V2ClaimSetsIdGetAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<ClaimSetDetailsModel> localVarResponse = await V2ClaimSetsIdGetWithHttpInfoAsync(id, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieves a specific claimSet based on the identifier. This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (ClaimSetDetailsModel)</returns>
        public async System.Threading.Tasks.Task<EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<ClaimSetDetailsModel>> V2ClaimSetsIdGetWithHttpInfoAsync(int id, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions localVarRequestOptions = new EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "application/json"
            };

            var localVarContentType = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToString(id)); // path parameter

            localVarRequestOptions.Operation = "ClaimSetsApi.V2ClaimSetsIdGet";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<ClaimSetDetailsModel>("/v2/claimSets/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V2ClaimSetsIdGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates claimSet based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="editClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void V2ClaimSetsIdPut(int id, EditClaimSetRequest editClaimSetRequest, int operationIndex = 0)
        {
            V2ClaimSetsIdPutWithHttpInfo(id, editClaimSetRequest);
        }

        /// <summary>
        /// Updates claimSet based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="editClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<Object> V2ClaimSetsIdPutWithHttpInfo(int id, EditClaimSetRequest editClaimSetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'editClaimSetRequest' is set
            if (editClaimSetRequest == null)
            {
                throw new EdFi.Ods.AdminApi.V2.Client.Client.ApiException(400, "Missing required parameter 'editClaimSetRequest' when calling ClaimSetsApi->V2ClaimSetsIdPut");
            }

            EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions localVarRequestOptions = new EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = editClaimSetRequest;

            localVarRequestOptions.Operation = "ClaimSetsApi.V2ClaimSetsIdPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Put<Object>("/v2/claimSets/{id}", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V2ClaimSetsIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Updates claimSet based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="editClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V2ClaimSetsIdPutAsync(int id, EditClaimSetRequest editClaimSetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await V2ClaimSetsIdPutWithHttpInfoAsync(id, editClaimSetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Updates claimSet based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="editClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<Object>> V2ClaimSetsIdPutWithHttpInfoAsync(int id, EditClaimSetRequest editClaimSetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'editClaimSetRequest' is set
            if (editClaimSetRequest == null)
            {
                throw new EdFi.Ods.AdminApi.V2.Client.Client.ApiException(400, "Missing required parameter 'editClaimSetRequest' when calling ClaimSetsApi->V2ClaimSetsIdPut");
            }


            EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions localVarRequestOptions = new EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.PathParameters.Add("id", EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.ParameterToString(id)); // path parameter
            localVarRequestOptions.Data = editClaimSetRequest;

            localVarRequestOptions.Operation = "ClaimSetsApi.V2ClaimSetsIdPut";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PutAsync<Object>("/v2/claimSets/{id}", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V2ClaimSetsIdPut", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Imports a new claimset 
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void V2ClaimSetsImportPost(ImportClaimSetRequest importClaimSetRequest, int operationIndex = 0)
        {
            V2ClaimSetsImportPostWithHttpInfo(importClaimSetRequest);
        }

        /// <summary>
        /// Imports a new claimset 
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<Object> V2ClaimSetsImportPostWithHttpInfo(ImportClaimSetRequest importClaimSetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'importClaimSetRequest' is set
            if (importClaimSetRequest == null)
            {
                throw new EdFi.Ods.AdminApi.V2.Client.Client.ApiException(400, "Missing required parameter 'importClaimSetRequest' when calling ClaimSetsApi->V2ClaimSetsImportPost");
            }

            EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions localVarRequestOptions = new EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = importClaimSetRequest;

            localVarRequestOptions.Operation = "ClaimSetsApi.V2ClaimSetsImportPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/claimSets/import", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V2ClaimSetsImportPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Imports a new claimset 
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V2ClaimSetsImportPostAsync(ImportClaimSetRequest importClaimSetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await V2ClaimSetsImportPostWithHttpInfoAsync(importClaimSetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Imports a new claimset 
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="importClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<Object>> V2ClaimSetsImportPostWithHttpInfoAsync(ImportClaimSetRequest importClaimSetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'importClaimSetRequest' is set
            if (importClaimSetRequest == null)
            {
                throw new EdFi.Ods.AdminApi.V2.Client.Client.ApiException(400, "Missing required parameter 'importClaimSetRequest' when calling ClaimSetsApi->V2ClaimSetsImportPost");
            }


            EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions localVarRequestOptions = new EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = importClaimSetRequest;

            localVarRequestOptions.Operation = "ClaimSetsApi.V2ClaimSetsImportPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/claimSets/import", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V2ClaimSetsImportPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates claimSet based on the supplied values. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns></returns>
        public void V2ClaimSetsPost(AddClaimSetRequest addClaimSetRequest, int operationIndex = 0)
        {
            V2ClaimSetsPostWithHttpInfo(addClaimSetRequest);
        }

        /// <summary>
        /// Creates claimSet based on the supplied values. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of Object(void)</returns>
        public EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<Object> V2ClaimSetsPostWithHttpInfo(AddClaimSetRequest addClaimSetRequest, int operationIndex = 0)
        {
            // verify the required parameter 'addClaimSetRequest' is set
            if (addClaimSetRequest == null)
            {
                throw new EdFi.Ods.AdminApi.V2.Client.Client.ApiException(400, "Missing required parameter 'addClaimSetRequest' when calling ClaimSetsApi->V2ClaimSetsPost");
            }

            EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions localVarRequestOptions = new EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addClaimSetRequest;

            localVarRequestOptions.Operation = "ClaimSetsApi.V2ClaimSetsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = this.Client.Post<Object>("/v2/claimSets", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V2ClaimSetsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Creates claimSet based on the supplied values. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of void</returns>
        public async System.Threading.Tasks.Task V2ClaimSetsPostAsync(AddClaimSetRequest addClaimSetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            await V2ClaimSetsPostWithHttpInfoAsync(addClaimSetRequest, operationIndex, cancellationToken).ConfigureAwait(false);
        }

        /// <summary>
        /// Creates claimSet based on the supplied values. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="EdFi.Ods.AdminApi.V2.Client.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="addClaimSetRequest"></param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse</returns>
        public async System.Threading.Tasks.Task<EdFi.Ods.AdminApi.V2.Client.Client.ApiResponse<Object>> V2ClaimSetsPostWithHttpInfoAsync(AddClaimSetRequest addClaimSetRequest, int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'addClaimSetRequest' is set
            if (addClaimSetRequest == null)
            {
                throw new EdFi.Ods.AdminApi.V2.Client.Client.ApiException(400, "Missing required parameter 'addClaimSetRequest' when calling ClaimSetsApi->V2ClaimSetsPost");
            }


            EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions localVarRequestOptions = new EdFi.Ods.AdminApi.V2.Client.Client.RequestOptions();

            string[] _contentTypes = new string[] {
                "application/json"
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
            };

            var localVarContentType = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = EdFi.Ods.AdminApi.V2.Client.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.Data = addClaimSetRequest;

            localVarRequestOptions.Operation = "ClaimSetsApi.V2ClaimSetsPost";
            localVarRequestOptions.OperationIndex = operationIndex;

            // authentication (oauth) required
            // oauth required
            if (!localVarRequestOptions.HeaderParameters.ContainsKey("Authorization"))
            {
                if (!string.IsNullOrEmpty(this.Configuration.AccessToken))
                {
                    localVarRequestOptions.HeaderParameters.Add("Authorization", "Bearer " + this.Configuration.AccessToken);
                }
                else if (!string.IsNullOrEmpty(this.Configuration.OAuthTokenUrl) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientId) &&
                         !string.IsNullOrEmpty(this.Configuration.OAuthClientSecret) &&
                         this.Configuration.OAuthFlow != null)
                {
                    localVarRequestOptions.OAuth = true;
                }
            }

            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.PostAsync<Object>("/v2/claimSets", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("V2ClaimSetsPost", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
