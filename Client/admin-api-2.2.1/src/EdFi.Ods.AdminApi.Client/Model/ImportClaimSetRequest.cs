// <auto-generated>
/*
 * Admin API Documentation
 *
 * The Ed-Fi Admin API is a REST API-based administrative interface for managing vendors, applications, client credentials, and authorization rules for accessing an Ed-Fi API.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.Ods.AdminApi.Client.Client;

namespace EdFi.Ods.AdminApi.Client.Model
{
    /// <summary>
    /// ImportClaimSetRequest
    /// </summary>
    public partial class ImportClaimSetRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImportClaimSetRequest" /> class.
        /// </summary>
        /// <param name="name">Claim set name</param>
        /// <param name="resourceClaims">Resource Claims</param>
        [JsonConstructor]
        public ImportClaimSetRequest(Option<string> name = default, Option<List<ClaimSetResourceClaimModel>> resourceClaims = default)
        {
            NameOption = name;
            ResourceClaimsOption = resourceClaims;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NameOption { get; private set; }

        /// <summary>
        /// Claim set name
        /// </summary>
        /// <value>Claim set name</value>
        [JsonPropertyName("name")]
        public string Name { get { return this.NameOption; } set { this.NameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ResourceClaims
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ClaimSetResourceClaimModel>> ResourceClaimsOption { get; private set; }

        /// <summary>
        /// Resource Claims
        /// </summary>
        /// <value>Resource Claims</value>
        [JsonPropertyName("resourceClaims")]
        public List<ClaimSetResourceClaimModel> ResourceClaims { get { return this.ResourceClaimsOption; } set { this.ResourceClaimsOption = new Option<List<ClaimSetResourceClaimModel>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ImportClaimSetRequest {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ResourceClaims: ").Append(ResourceClaims).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ImportClaimSetRequest" />
    /// </summary>
    public class ImportClaimSetRequestJsonConverter : JsonConverter<ImportClaimSetRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="ImportClaimSetRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ImportClaimSetRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> name = default;
            Option<List<ClaimSetResourceClaimModel>> resourceClaims = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "name":
                            name = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "resourceClaims":
                            resourceClaims = new Option<List<ClaimSetResourceClaimModel>>(JsonSerializer.Deserialize<List<ClaimSetResourceClaimModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (name.IsSet && name.Value == null)
                throw new ArgumentNullException(nameof(name), "Property is not nullable for class ImportClaimSetRequest.");

            if (resourceClaims.IsSet && resourceClaims.Value == null)
                throw new ArgumentNullException(nameof(resourceClaims), "Property is not nullable for class ImportClaimSetRequest.");

            return new ImportClaimSetRequest(name, resourceClaims);
        }

        /// <summary>
        /// Serializes a <see cref="ImportClaimSetRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="importClaimSetRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ImportClaimSetRequest importClaimSetRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, importClaimSetRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ImportClaimSetRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="importClaimSetRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ImportClaimSetRequest importClaimSetRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (importClaimSetRequest.NameOption.IsSet && importClaimSetRequest.Name == null)
                throw new ArgumentNullException(nameof(importClaimSetRequest.Name), "Property is required for class ImportClaimSetRequest.");

            if (importClaimSetRequest.ResourceClaimsOption.IsSet && importClaimSetRequest.ResourceClaims == null)
                throw new ArgumentNullException(nameof(importClaimSetRequest.ResourceClaims), "Property is required for class ImportClaimSetRequest.");

            if (importClaimSetRequest.NameOption.IsSet)
                writer.WriteString("name", importClaimSetRequest.Name);

            if (importClaimSetRequest.ResourceClaimsOption.IsSet)
            {
                writer.WritePropertyName("resourceClaims");
                JsonSerializer.Serialize(writer, importClaimSetRequest.ResourceClaims, jsonSerializerOptions);
            }
        }
    }
}
