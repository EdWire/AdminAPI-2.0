// <auto-generated>
/*
 * Admin API Documentation
 *
 * The Ed-Fi Admin API is a REST API-based administrative interface for managing vendors, applications, client credentials, and authorization rules for accessing an Ed-Fi API.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.Ods.AdminApi.Client.Client;

namespace EdFi.Ods.AdminApi.Client.Model
{
    /// <summary>
    /// AddResourceClaimOnClaimSetRequest
    /// </summary>
    public partial class AddResourceClaimOnClaimSetRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddResourceClaimOnClaimSetRequest" /> class.
        /// </summary>
        /// <param name="resourceClaimId">ResourceClaim id</param>
        /// <param name="resourceClaimActions">resourceClaimActions</param>
        [JsonConstructor]
        public AddResourceClaimOnClaimSetRequest(Option<int?> resourceClaimId = default, Option<List<ResourceClaimAction>> resourceClaimActions = default)
        {
            ResourceClaimIdOption = resourceClaimId;
            ResourceClaimActionsOption = resourceClaimActions;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ResourceClaimId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ResourceClaimIdOption { get; private set; }

        /// <summary>
        /// ResourceClaim id
        /// </summary>
        /// <value>ResourceClaim id</value>
        [JsonPropertyName("resourceClaimId")]
        public int? ResourceClaimId { get { return this.ResourceClaimIdOption; } set { this.ResourceClaimIdOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of ResourceClaimActions
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ResourceClaimAction>> ResourceClaimActionsOption { get; private set; }

        /// <summary>
        /// Gets or Sets ResourceClaimActions
        /// </summary>
        [JsonPropertyName("resourceClaimActions")]
        public List<ResourceClaimAction> ResourceClaimActions { get { return this.ResourceClaimActionsOption; } set { this.ResourceClaimActionsOption = new Option<List<ResourceClaimAction>>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddResourceClaimOnClaimSetRequest {\n");
            sb.Append("  ResourceClaimId: ").Append(ResourceClaimId).Append("\n");
            sb.Append("  ResourceClaimActions: ").Append(ResourceClaimActions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AddResourceClaimOnClaimSetRequest" />
    /// </summary>
    public class AddResourceClaimOnClaimSetRequestJsonConverter : JsonConverter<AddResourceClaimOnClaimSetRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="AddResourceClaimOnClaimSetRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AddResourceClaimOnClaimSetRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> resourceClaimId = default;
            Option<List<ResourceClaimAction>> resourceClaimActions = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "resourceClaimId":
                            resourceClaimId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "resourceClaimActions":
                            resourceClaimActions = new Option<List<ResourceClaimAction>>(JsonSerializer.Deserialize<List<ResourceClaimAction>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (resourceClaimId.IsSet && resourceClaimId.Value == null)
                throw new ArgumentNullException(nameof(resourceClaimId), "Property is not nullable for class AddResourceClaimOnClaimSetRequest.");

            if (resourceClaimActions.IsSet && resourceClaimActions.Value == null)
                throw new ArgumentNullException(nameof(resourceClaimActions), "Property is not nullable for class AddResourceClaimOnClaimSetRequest.");

            return new AddResourceClaimOnClaimSetRequest(resourceClaimId, resourceClaimActions);
        }

        /// <summary>
        /// Serializes a <see cref="AddResourceClaimOnClaimSetRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="addResourceClaimOnClaimSetRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AddResourceClaimOnClaimSetRequest addResourceClaimOnClaimSetRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, addResourceClaimOnClaimSetRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AddResourceClaimOnClaimSetRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="addResourceClaimOnClaimSetRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AddResourceClaimOnClaimSetRequest addResourceClaimOnClaimSetRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (addResourceClaimOnClaimSetRequest.ResourceClaimActionsOption.IsSet && addResourceClaimOnClaimSetRequest.ResourceClaimActions == null)
                throw new ArgumentNullException(nameof(addResourceClaimOnClaimSetRequest.ResourceClaimActions), "Property is required for class AddResourceClaimOnClaimSetRequest.");

            if (addResourceClaimOnClaimSetRequest.ResourceClaimIdOption.IsSet)
                writer.WriteNumber("resourceClaimId", addResourceClaimOnClaimSetRequest.ResourceClaimIdOption.Value.Value);

            if (addResourceClaimOnClaimSetRequest.ResourceClaimActionsOption.IsSet)
            {
                writer.WritePropertyName("resourceClaimActions");
                JsonSerializer.Serialize(writer, addResourceClaimOnClaimSetRequest.ResourceClaimActions, jsonSerializerOptions);
            }
        }
    }
}
