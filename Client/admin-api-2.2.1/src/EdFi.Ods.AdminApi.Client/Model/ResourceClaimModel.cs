// <auto-generated>
/*
 * Admin API Documentation
 *
 * The Ed-Fi Admin API is a REST API-based administrative interface for managing vendors, applications, client credentials, and authorization rules for accessing an Ed-Fi API.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.Ods.AdminApi.Client.Client;

namespace EdFi.Ods.AdminApi.Client.Model
{
    /// <summary>
    /// ResourceClaimModel
    /// </summary>
    public partial class ResourceClaimModel : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ResourceClaimModel" /> class.
        /// </summary>
        /// <param name="id">id</param>
        /// <param name="name">name</param>
        /// <param name="parentId">parentId</param>
        /// <param name="parentName">parentName</param>
        /// <param name="children">Children are collection of SimpleResourceClaimModel</param>
        [JsonConstructor]
        public ResourceClaimModel(Option<int?> id = default, Option<string?> name = default, Option<int?> parentId = default, Option<string?> parentName = default, Option<List<ResourceClaimModel>?> children = default)
        {
            IdOption = id;
            NameOption = name;
            ParentIdOption = parentId;
            ParentNameOption = parentName;
            ChildrenOption = children;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Id
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> IdOption { get; private set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [JsonPropertyName("id")]
        public int? Id { get { return this.IdOption; } set { this.IdOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of Name
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NameOption { get; private set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [JsonPropertyName("name")]
        public string? Name { get { return this.NameOption; } set { this.NameOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of ParentId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> ParentIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ParentId
        /// </summary>
        [JsonPropertyName("parentId")]
        public int? ParentId { get { return this.ParentIdOption; } set { this.ParentIdOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of ParentName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ParentNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets ParentName
        /// </summary>
        [JsonPropertyName("parentName")]
        public string? ParentName { get { return this.ParentNameOption; } set { this.ParentNameOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Children
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<ResourceClaimModel>?> ChildrenOption { get; private set; }

        /// <summary>
        /// Children are collection of SimpleResourceClaimModel
        /// </summary>
        /// <value>Children are collection of SimpleResourceClaimModel</value>
        [JsonPropertyName("children")]
        public List<ResourceClaimModel>? Children { get { return this.ChildrenOption; } set { this.ChildrenOption = new Option<List<ResourceClaimModel>?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class ResourceClaimModel {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ParentId: ").Append(ParentId).Append("\n");
            sb.Append("  ParentName: ").Append(ParentName).Append("\n");
            sb.Append("  Children: ").Append(Children).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="ResourceClaimModel" />
    /// </summary>
    public class ResourceClaimModelJsonConverter : JsonConverter<ResourceClaimModel>
    {
        /// <summary>
        /// Deserializes json to <see cref="ResourceClaimModel" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override ResourceClaimModel Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> id = default;
            Option<string?> name = default;
            Option<int?> parentId = default;
            Option<string?> parentName = default;
            Option<List<ResourceClaimModel>?> children = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "id":
                            id = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "name":
                            name = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "parentId":
                            parentId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "parentName":
                            parentName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "children":
                            children = new Option<List<ResourceClaimModel>?>(JsonSerializer.Deserialize<List<ResourceClaimModel>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (id.IsSet && id.Value == null)
                throw new ArgumentNullException(nameof(id), "Property is not nullable for class ResourceClaimModel.");

            return new ResourceClaimModel(id, name, parentId, parentName, children);
        }

        /// <summary>
        /// Serializes a <see cref="ResourceClaimModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="resourceClaimModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, ResourceClaimModel resourceClaimModel, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, resourceClaimModel, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="ResourceClaimModel" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="resourceClaimModel"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, ResourceClaimModel resourceClaimModel, JsonSerializerOptions jsonSerializerOptions)
        {
            if (resourceClaimModel.IdOption.IsSet)
                writer.WriteNumber("id", resourceClaimModel.IdOption.Value!.Value);

            if (resourceClaimModel.NameOption.IsSet)
                if (resourceClaimModel.NameOption.Value != null)
                    writer.WriteString("name", resourceClaimModel.Name);
                else
                    writer.WriteNull("name");

            if (resourceClaimModel.ParentIdOption.IsSet)
                if (resourceClaimModel.ParentIdOption.Value != null)
                    writer.WriteNumber("parentId", resourceClaimModel.ParentIdOption.Value!.Value);
                else
                    writer.WriteNull("parentId");

            if (resourceClaimModel.ParentNameOption.IsSet)
                if (resourceClaimModel.ParentNameOption.Value != null)
                    writer.WriteString("parentName", resourceClaimModel.ParentName);
                else
                    writer.WriteNull("parentName");

            if (resourceClaimModel.ChildrenOption.IsSet)
                if (resourceClaimModel.ChildrenOption.Value != null)
                {
                    writer.WritePropertyName("children");
                    JsonSerializer.Serialize(writer, resourceClaimModel.Children, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("children");
        }
    }
}
