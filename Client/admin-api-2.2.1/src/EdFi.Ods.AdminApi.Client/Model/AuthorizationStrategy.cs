// <auto-generated>
/*
 * Admin API Documentation
 *
 * The Ed-Fi Admin API is a REST API-based administrative interface for managing vendors, applications, client credentials, and authorization rules for accessing an Ed-Fi API.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.Ods.AdminApi.Client.Client;

namespace EdFi.Ods.AdminApi.Client.Model
{
    /// <summary>
    /// AuthorizationStrategy
    /// </summary>
    public partial class AuthorizationStrategy : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AuthorizationStrategy" /> class.
        /// </summary>
        /// <param name="authStrategyId">authStrategyId</param>
        /// <param name="authStrategyName">authStrategyName</param>
        /// <param name="isInheritedFromParent">isInheritedFromParent</param>
        [JsonConstructor]
        public AuthorizationStrategy(Option<int?> authStrategyId = default, Option<string> authStrategyName = default, Option<bool?> isInheritedFromParent = default)
        {
            AuthStrategyIdOption = authStrategyId;
            AuthStrategyNameOption = authStrategyName;
            IsInheritedFromParentOption = isInheritedFromParent;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of AuthStrategyId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> AuthStrategyIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets AuthStrategyId
        /// </summary>
        [JsonPropertyName("authStrategyId")]
        public int? AuthStrategyId { get { return this.AuthStrategyIdOption; } set { this.AuthStrategyIdOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of AuthStrategyName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> AuthStrategyNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets AuthStrategyName
        /// </summary>
        [JsonPropertyName("authStrategyName")]
        public string AuthStrategyName { get { return this.AuthStrategyNameOption; } set { this.AuthStrategyNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of IsInheritedFromParent
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsInheritedFromParentOption { get; private set; }

        /// <summary>
        /// Gets or Sets IsInheritedFromParent
        /// </summary>
        [JsonPropertyName("isInheritedFromParent")]
        public bool? IsInheritedFromParent { get { return this.IsInheritedFromParentOption; } set { this.IsInheritedFromParentOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AuthorizationStrategy {\n");
            sb.Append("  AuthStrategyId: ").Append(AuthStrategyId).Append("\n");
            sb.Append("  AuthStrategyName: ").Append(AuthStrategyName).Append("\n");
            sb.Append("  IsInheritedFromParent: ").Append(IsInheritedFromParent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AuthorizationStrategy" />
    /// </summary>
    public class AuthorizationStrategyJsonConverter : JsonConverter<AuthorizationStrategy>
    {
        /// <summary>
        /// Deserializes json to <see cref="AuthorizationStrategy" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AuthorizationStrategy Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> authStrategyId = default;
            Option<string> authStrategyName = default;
            Option<bool?> isInheritedFromParent = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "authStrategyId":
                            authStrategyId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "authStrategyName":
                            authStrategyName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "isInheritedFromParent":
                            isInheritedFromParent = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (authStrategyId.IsSet && authStrategyId.Value == null)
                throw new ArgumentNullException(nameof(authStrategyId), "Property is not nullable for class AuthorizationStrategy.");

            if (isInheritedFromParent.IsSet && isInheritedFromParent.Value == null)
                throw new ArgumentNullException(nameof(isInheritedFromParent), "Property is not nullable for class AuthorizationStrategy.");

            return new AuthorizationStrategy(authStrategyId, authStrategyName, isInheritedFromParent);
        }

        /// <summary>
        /// Serializes a <see cref="AuthorizationStrategy" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="authorizationStrategy"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AuthorizationStrategy authorizationStrategy, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, authorizationStrategy, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AuthorizationStrategy" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="authorizationStrategy"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AuthorizationStrategy authorizationStrategy, JsonSerializerOptions jsonSerializerOptions)
        {
            if (authorizationStrategy.AuthStrategyIdOption.IsSet)
                writer.WriteNumber("authStrategyId", authorizationStrategy.AuthStrategyIdOption.Value.Value);

            if (authorizationStrategy.AuthStrategyNameOption.IsSet)
                if (authorizationStrategy.AuthStrategyNameOption.Value != null)
                    writer.WriteString("authStrategyName", authorizationStrategy.AuthStrategyName);
                else
                    writer.WriteNull("authStrategyName");

            if (authorizationStrategy.IsInheritedFromParentOption.IsSet)
                writer.WriteBoolean("isInheritedFromParent", authorizationStrategy.IsInheritedFromParentOption.Value.Value);
        }
    }
}
