// <auto-generated>
/*
 * Admin API Documentation
 *
 * The Ed-Fi Admin API is a REST API-based administrative interface for managing vendors, applications, client credentials, and authorization rules for accessing an Ed-Fi API.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.Ods.AdminApi.Client.Client;

namespace EdFi.Ods.AdminApi.Client.Model
{
    /// <summary>
    /// AddVendorRequest
    /// </summary>
    public partial class AddVendorRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="AddVendorRequest" /> class.
        /// </summary>
        /// <param name="company">Vendor/ company name</param>
        /// <param name="namespacePrefixes">Namespace prefix for the vendor. Multiple namespace prefixes can be provided as comma separated list if required.</param>
        /// <param name="contactName">Vendor contact name</param>
        /// <param name="contactEmailAddress">Vendor contact email id</param>
        [JsonConstructor]
        public AddVendorRequest(Option<string> company = default, Option<string> namespacePrefixes = default, Option<string> contactName = default, Option<string> contactEmailAddress = default)
        {
            CompanyOption = company;
            NamespacePrefixesOption = namespacePrefixes;
            ContactNameOption = contactName;
            ContactEmailAddressOption = contactEmailAddress;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Company
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> CompanyOption { get; private set; }

        /// <summary>
        /// Vendor/ company name
        /// </summary>
        /// <value>Vendor/ company name</value>
        [JsonPropertyName("company")]
        public string Company { get { return this.CompanyOption; } set { this.CompanyOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of NamespacePrefixes
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> NamespacePrefixesOption { get; private set; }

        /// <summary>
        /// Namespace prefix for the vendor. Multiple namespace prefixes can be provided as comma separated list if required.
        /// </summary>
        /// <value>Namespace prefix for the vendor. Multiple namespace prefixes can be provided as comma separated list if required.</value>
        [JsonPropertyName("namespacePrefixes")]
        public string NamespacePrefixes { get { return this.NamespacePrefixesOption; } set { this.NamespacePrefixesOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ContactName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ContactNameOption { get; private set; }

        /// <summary>
        /// Vendor contact name
        /// </summary>
        /// <value>Vendor contact name</value>
        [JsonPropertyName("contactName")]
        public string ContactName { get { return this.ContactNameOption; } set { this.ContactNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ContactEmailAddress
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ContactEmailAddressOption { get; private set; }

        /// <summary>
        /// Vendor contact email id
        /// </summary>
        /// <value>Vendor contact email id</value>
        [JsonPropertyName("contactEmailAddress")]
        public string ContactEmailAddress { get { return this.ContactEmailAddressOption; } set { this.ContactEmailAddressOption = new Option<string>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class AddVendorRequest {\n");
            sb.Append("  Company: ").Append(Company).Append("\n");
            sb.Append("  NamespacePrefixes: ").Append(NamespacePrefixes).Append("\n");
            sb.Append("  ContactName: ").Append(ContactName).Append("\n");
            sb.Append("  ContactEmailAddress: ").Append(ContactEmailAddress).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="AddVendorRequest" />
    /// </summary>
    public class AddVendorRequestJsonConverter : JsonConverter<AddVendorRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="AddVendorRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override AddVendorRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> company = default;
            Option<string> namespacePrefixes = default;
            Option<string> contactName = default;
            Option<string> contactEmailAddress = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "company":
                            company = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "namespacePrefixes":
                            namespacePrefixes = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "contactName":
                            contactName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "contactEmailAddress":
                            contactEmailAddress = new Option<string>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (company.IsSet && company.Value == null)
                throw new ArgumentNullException(nameof(company), "Property is not nullable for class AddVendorRequest.");

            if (namespacePrefixes.IsSet && namespacePrefixes.Value == null)
                throw new ArgumentNullException(nameof(namespacePrefixes), "Property is not nullable for class AddVendorRequest.");

            if (contactName.IsSet && contactName.Value == null)
                throw new ArgumentNullException(nameof(contactName), "Property is not nullable for class AddVendorRequest.");

            if (contactEmailAddress.IsSet && contactEmailAddress.Value == null)
                throw new ArgumentNullException(nameof(contactEmailAddress), "Property is not nullable for class AddVendorRequest.");

            return new AddVendorRequest(company, namespacePrefixes, contactName, contactEmailAddress);
        }

        /// <summary>
        /// Serializes a <see cref="AddVendorRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="addVendorRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, AddVendorRequest addVendorRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, addVendorRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="AddVendorRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="addVendorRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, AddVendorRequest addVendorRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (addVendorRequest.CompanyOption.IsSet && addVendorRequest.Company == null)
                throw new ArgumentNullException(nameof(addVendorRequest.Company), "Property is required for class AddVendorRequest.");

            if (addVendorRequest.NamespacePrefixesOption.IsSet && addVendorRequest.NamespacePrefixes == null)
                throw new ArgumentNullException(nameof(addVendorRequest.NamespacePrefixes), "Property is required for class AddVendorRequest.");

            if (addVendorRequest.ContactNameOption.IsSet && addVendorRequest.ContactName == null)
                throw new ArgumentNullException(nameof(addVendorRequest.ContactName), "Property is required for class AddVendorRequest.");

            if (addVendorRequest.ContactEmailAddressOption.IsSet && addVendorRequest.ContactEmailAddress == null)
                throw new ArgumentNullException(nameof(addVendorRequest.ContactEmailAddress), "Property is required for class AddVendorRequest.");

            if (addVendorRequest.CompanyOption.IsSet)
                writer.WriteString("company", addVendorRequest.Company);

            if (addVendorRequest.NamespacePrefixesOption.IsSet)
                writer.WriteString("namespacePrefixes", addVendorRequest.NamespacePrefixes);

            if (addVendorRequest.ContactNameOption.IsSet)
                writer.WriteString("contactName", addVendorRequest.ContactName);

            if (addVendorRequest.ContactEmailAddressOption.IsSet)
                writer.WriteString("contactEmailAddress", addVendorRequest.ContactEmailAddress);
        }
    }
}
