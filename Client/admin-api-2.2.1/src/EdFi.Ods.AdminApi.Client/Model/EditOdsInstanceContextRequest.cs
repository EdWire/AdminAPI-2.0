// <auto-generated>
/*
 * Admin API Documentation
 *
 * The Ed-Fi Admin API is a REST API-based administrative interface for managing vendors, applications, client credentials, and authorization rules for accessing an Ed-Fi API.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.Ods.AdminApi.Client.Client;

namespace EdFi.Ods.AdminApi.Client.Model
{
    /// <summary>
    /// EditOdsInstanceContextRequest
    /// </summary>
    public partial class EditOdsInstanceContextRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EditOdsInstanceContextRequest" /> class.
        /// </summary>
        /// <param name="odsInstanceId">ODS instance context ODS instance id.</param>
        /// <param name="contextKey">context key.</param>
        /// <param name="contextValue">context value.</param>
        [JsonConstructor]
        public EditOdsInstanceContextRequest(Option<int?> odsInstanceId = default, Option<string?> contextKey = default, Option<string?> contextValue = default)
        {
            OdsInstanceIdOption = odsInstanceId;
            ContextKeyOption = contextKey;
            ContextValueOption = contextValue;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of OdsInstanceId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> OdsInstanceIdOption { get; private set; }

        /// <summary>
        /// ODS instance context ODS instance id.
        /// </summary>
        /// <value>ODS instance context ODS instance id.</value>
        [JsonPropertyName("odsInstanceId")]
        public int? OdsInstanceId { get { return this.OdsInstanceIdOption; } set { this.OdsInstanceIdOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of ContextKey
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ContextKeyOption { get; private set; }

        /// <summary>
        /// context key.
        /// </summary>
        /// <value>context key.</value>
        [JsonPropertyName("contextKey")]
        public string? ContextKey { get { return this.ContextKeyOption; } set { this.ContextKeyOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of ContextValue
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ContextValueOption { get; private set; }

        /// <summary>
        /// context value.
        /// </summary>
        /// <value>context value.</value>
        [JsonPropertyName("contextValue")]
        public string? ContextValue { get { return this.ContextValueOption; } set { this.ContextValueOption = new Option<string?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EditOdsInstanceContextRequest {\n");
            sb.Append("  OdsInstanceId: ").Append(OdsInstanceId).Append("\n");
            sb.Append("  ContextKey: ").Append(ContextKey).Append("\n");
            sb.Append("  ContextValue: ").Append(ContextValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EditOdsInstanceContextRequest" />
    /// </summary>
    public class EditOdsInstanceContextRequestJsonConverter : JsonConverter<EditOdsInstanceContextRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="EditOdsInstanceContextRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EditOdsInstanceContextRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<int?> odsInstanceId = default;
            Option<string?> contextKey = default;
            Option<string?> contextValue = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "odsInstanceId":
                            odsInstanceId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "contextKey":
                            contextKey = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "contextValue":
                            contextValue = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (odsInstanceId.IsSet && odsInstanceId.Value == null)
                throw new ArgumentNullException(nameof(odsInstanceId), "Property is not nullable for class EditOdsInstanceContextRequest.");

            if (contextKey.IsSet && contextKey.Value == null)
                throw new ArgumentNullException(nameof(contextKey), "Property is not nullable for class EditOdsInstanceContextRequest.");

            if (contextValue.IsSet && contextValue.Value == null)
                throw new ArgumentNullException(nameof(contextValue), "Property is not nullable for class EditOdsInstanceContextRequest.");

            return new EditOdsInstanceContextRequest(odsInstanceId, contextKey, contextValue);
        }

        /// <summary>
        /// Serializes a <see cref="EditOdsInstanceContextRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="editOdsInstanceContextRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EditOdsInstanceContextRequest editOdsInstanceContextRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, editOdsInstanceContextRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EditOdsInstanceContextRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="editOdsInstanceContextRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EditOdsInstanceContextRequest editOdsInstanceContextRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (editOdsInstanceContextRequest.ContextKeyOption.IsSet && editOdsInstanceContextRequest.ContextKey == null)
                throw new ArgumentNullException(nameof(editOdsInstanceContextRequest.ContextKey), "Property is required for class EditOdsInstanceContextRequest.");

            if (editOdsInstanceContextRequest.ContextValueOption.IsSet && editOdsInstanceContextRequest.ContextValue == null)
                throw new ArgumentNullException(nameof(editOdsInstanceContextRequest.ContextValue), "Property is required for class EditOdsInstanceContextRequest.");

            if (editOdsInstanceContextRequest.OdsInstanceIdOption.IsSet)
                writer.WriteNumber("odsInstanceId", editOdsInstanceContextRequest.OdsInstanceIdOption.Value!.Value);

            if (editOdsInstanceContextRequest.ContextKeyOption.IsSet)
                writer.WriteString("contextKey", editOdsInstanceContextRequest.ContextKey);

            if (editOdsInstanceContextRequest.ContextValueOption.IsSet)
                writer.WriteString("contextValue", editOdsInstanceContextRequest.ContextValue);
        }
    }
}
