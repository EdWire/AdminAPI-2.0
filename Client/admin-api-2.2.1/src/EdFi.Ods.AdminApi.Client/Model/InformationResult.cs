// <auto-generated>
/*
 * Admin API Documentation
 *
 * The Ed-Fi Admin API is a REST API-based administrative interface for managing vendors, applications, client credentials, and authorization rules for accessing an Ed-Fi API.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.Ods.AdminApi.Client.Client;

namespace EdFi.Ods.AdminApi.Client.Model
{
    /// <summary>
    /// InformationResult
    /// </summary>
    public partial class InformationResult : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InformationResult" /> class.
        /// </summary>
        /// <param name="varVersion">Application version</param>
        /// <param name="build">Build / release version</param>
        [JsonConstructor]
        public InformationResult(Option<string?> varVersion = default, Option<string?> build = default)
        {
            VarVersionOption = varVersion;
            BuildOption = build;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of VarVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VarVersionOption { get; private set; }

        /// <summary>
        /// Application version
        /// </summary>
        /// <value>Application version</value>
        [JsonPropertyName("version")]
        public string? VarVersion { get { return this.VarVersionOption; } set { this.VarVersionOption = new Option<string?>(value); } }

        /// <summary>
        /// Used to track the state of Build
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BuildOption { get; private set; }

        /// <summary>
        /// Build / release version
        /// </summary>
        /// <value>Build / release version</value>
        [JsonPropertyName("build")]
        public string? Build { get { return this.BuildOption; } set { this.BuildOption = new Option<string?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InformationResult {\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Build: ").Append(Build).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="InformationResult" />
    /// </summary>
    public class InformationResultJsonConverter : JsonConverter<InformationResult>
    {
        /// <summary>
        /// Deserializes json to <see cref="InformationResult" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override InformationResult Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> varVersion = default;
            Option<string?> build = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "version":
                            varVersion = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "build":
                            build = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        default:
                            break;
                    }
                }
            }

            if (varVersion.IsSet && varVersion.Value == null)
                throw new ArgumentNullException(nameof(varVersion), "Property is not nullable for class InformationResult.");

            if (build.IsSet && build.Value == null)
                throw new ArgumentNullException(nameof(build), "Property is not nullable for class InformationResult.");

            return new InformationResult(varVersion, build);
        }

        /// <summary>
        /// Serializes a <see cref="InformationResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="informationResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, InformationResult informationResult, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, informationResult, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="InformationResult" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="informationResult"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, InformationResult informationResult, JsonSerializerOptions jsonSerializerOptions)
        {
            if (informationResult.VarVersionOption.IsSet && informationResult.VarVersion == null)
                throw new ArgumentNullException(nameof(informationResult.VarVersion), "Property is required for class InformationResult.");

            if (informationResult.BuildOption.IsSet && informationResult.Build == null)
                throw new ArgumentNullException(nameof(informationResult.Build), "Property is required for class InformationResult.");

            if (informationResult.VarVersionOption.IsSet)
                writer.WriteString("version", informationResult.VarVersion);

            if (informationResult.BuildOption.IsSet)
                writer.WriteString("build", informationResult.Build);
        }
    }
}
