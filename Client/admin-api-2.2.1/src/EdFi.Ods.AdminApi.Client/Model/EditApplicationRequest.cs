// <auto-generated>
/*
 * Admin API Documentation
 *
 * The Ed-Fi Admin API is a REST API-based administrative interface for managing vendors, applications, client credentials, and authorization rules for accessing an Ed-Fi API.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using EdFi.Ods.AdminApi.Client.Client;

namespace EdFi.Ods.AdminApi.Client.Model
{
    /// <summary>
    /// EditApplicationRequest
    /// </summary>
    public partial class EditApplicationRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EditApplicationRequest" /> class.
        /// </summary>
        /// <param name="applicationName">Application name</param>
        /// <param name="vendorId">Vendor/ company id</param>
        /// <param name="claimSetName">Claim set name</param>
        /// <param name="profileIds">Profile id</param>
        /// <param name="educationOrganizationIds">Education organization ids</param>
        /// <param name="odsInstanceIds">List of ODS instance id</param>
        /// <param name="enabled">Indicates whether the ApiClient&#39;s credetials is enabled. Defaults to true if not provided.</param>
        [JsonConstructor]
        public EditApplicationRequest(Option<string> applicationName = default, Option<int?> vendorId = default, Option<string> claimSetName = default, Option<List<int>> profileIds = default, Option<List<long>> educationOrganizationIds = default, Option<List<int>> odsInstanceIds = default, Option<bool?> enabled = default)
        {
            ApplicationNameOption = applicationName;
            VendorIdOption = vendorId;
            ClaimSetNameOption = claimSetName;
            ProfileIdsOption = profileIds;
            EducationOrganizationIdsOption = educationOrganizationIds;
            OdsInstanceIdsOption = odsInstanceIds;
            EnabledOption = enabled;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of ApplicationName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ApplicationNameOption { get; private set; }

        /// <summary>
        /// Application name
        /// </summary>
        /// <value>Application name</value>
        [JsonPropertyName("applicationName")]
        public string ApplicationName { get { return this.ApplicationNameOption; } set { this.ApplicationNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of VendorId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<int?> VendorIdOption { get; private set; }

        /// <summary>
        /// Vendor/ company id
        /// </summary>
        /// <value>Vendor/ company id</value>
        [JsonPropertyName("vendorId")]
        public int? VendorId { get { return this.VendorIdOption; } set { this.VendorIdOption = new Option<int?>(value); } }

        /// <summary>
        /// Used to track the state of ClaimSetName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string> ClaimSetNameOption { get; private set; }

        /// <summary>
        /// Claim set name
        /// </summary>
        /// <value>Claim set name</value>
        [JsonPropertyName("claimSetName")]
        public string ClaimSetName { get { return this.ClaimSetNameOption; } set { this.ClaimSetNameOption = new Option<string>(value); } }

        /// <summary>
        /// Used to track the state of ProfileIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<int>> ProfileIdsOption { get; private set; }

        /// <summary>
        /// Profile id
        /// </summary>
        /// <value>Profile id</value>
        [JsonPropertyName("profileIds")]
        public List<int> ProfileIds { get { return this.ProfileIdsOption; } set { this.ProfileIdsOption = new Option<List<int>>(value); } }

        /// <summary>
        /// Used to track the state of EducationOrganizationIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<long>> EducationOrganizationIdsOption { get; private set; }

        /// <summary>
        /// Education organization ids
        /// </summary>
        /// <value>Education organization ids</value>
        [JsonPropertyName("educationOrganizationIds")]
        public List<long> EducationOrganizationIds { get { return this.EducationOrganizationIdsOption; } set { this.EducationOrganizationIdsOption = new Option<List<long>>(value); } }

        /// <summary>
        /// Used to track the state of OdsInstanceIds
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<List<int>> OdsInstanceIdsOption { get; private set; }

        /// <summary>
        /// List of ODS instance id
        /// </summary>
        /// <value>List of ODS instance id</value>
        [JsonPropertyName("odsInstanceIds")]
        public List<int> OdsInstanceIds { get { return this.OdsInstanceIdsOption; } set { this.OdsInstanceIdsOption = new Option<List<int>>(value); } }

        /// <summary>
        /// Used to track the state of Enabled
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> EnabledOption { get; private set; }

        /// <summary>
        /// Indicates whether the ApiClient&#39;s credetials is enabled. Defaults to true if not provided.
        /// </summary>
        /// <value>Indicates whether the ApiClient&#39;s credetials is enabled. Defaults to true if not provided.</value>
        [JsonPropertyName("enabled")]
        public bool? Enabled { get { return this.EnabledOption; } set { this.EnabledOption = new Option<bool?>(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EditApplicationRequest {\n");
            sb.Append("  ApplicationName: ").Append(ApplicationName).Append("\n");
            sb.Append("  VendorId: ").Append(VendorId).Append("\n");
            sb.Append("  ClaimSetName: ").Append(ClaimSetName).Append("\n");
            sb.Append("  ProfileIds: ").Append(ProfileIds).Append("\n");
            sb.Append("  EducationOrganizationIds: ").Append(EducationOrganizationIds).Append("\n");
            sb.Append("  OdsInstanceIds: ").Append(OdsInstanceIds).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="EditApplicationRequest" />
    /// </summary>
    public class EditApplicationRequestJsonConverter : JsonConverter<EditApplicationRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="EditApplicationRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override EditApplicationRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string> applicationName = default;
            Option<int?> vendorId = default;
            Option<string> claimSetName = default;
            Option<List<int>> profileIds = default;
            Option<List<long>> educationOrganizationIds = default;
            Option<List<int>> odsInstanceIds = default;
            Option<bool?> enabled = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "applicationName":
                            applicationName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "vendorId":
                            vendorId = new Option<int?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (int?)null : utf8JsonReader.GetInt32());
                            break;
                        case "claimSetName":
                            claimSetName = new Option<string>(utf8JsonReader.GetString());
                            break;
                        case "profileIds":
                            profileIds = new Option<List<int>>(JsonSerializer.Deserialize<List<int>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "educationOrganizationIds":
                            educationOrganizationIds = new Option<List<long>>(JsonSerializer.Deserialize<List<long>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "odsInstanceIds":
                            odsInstanceIds = new Option<List<int>>(JsonSerializer.Deserialize<List<int>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "enabled":
                            enabled = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (applicationName.IsSet && applicationName.Value == null)
                throw new ArgumentNullException(nameof(applicationName), "Property is not nullable for class EditApplicationRequest.");

            if (vendorId.IsSet && vendorId.Value == null)
                throw new ArgumentNullException(nameof(vendorId), "Property is not nullable for class EditApplicationRequest.");

            if (claimSetName.IsSet && claimSetName.Value == null)
                throw new ArgumentNullException(nameof(claimSetName), "Property is not nullable for class EditApplicationRequest.");

            if (educationOrganizationIds.IsSet && educationOrganizationIds.Value == null)
                throw new ArgumentNullException(nameof(educationOrganizationIds), "Property is not nullable for class EditApplicationRequest.");

            if (odsInstanceIds.IsSet && odsInstanceIds.Value == null)
                throw new ArgumentNullException(nameof(odsInstanceIds), "Property is not nullable for class EditApplicationRequest.");

            return new EditApplicationRequest(applicationName, vendorId, claimSetName, profileIds, educationOrganizationIds, odsInstanceIds, enabled);
        }

        /// <summary>
        /// Serializes a <see cref="EditApplicationRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="editApplicationRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, EditApplicationRequest editApplicationRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, editApplicationRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="EditApplicationRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="editApplicationRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, EditApplicationRequest editApplicationRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (editApplicationRequest.ApplicationNameOption.IsSet && editApplicationRequest.ApplicationName == null)
                throw new ArgumentNullException(nameof(editApplicationRequest.ApplicationName), "Property is required for class EditApplicationRequest.");

            if (editApplicationRequest.ClaimSetNameOption.IsSet && editApplicationRequest.ClaimSetName == null)
                throw new ArgumentNullException(nameof(editApplicationRequest.ClaimSetName), "Property is required for class EditApplicationRequest.");

            if (editApplicationRequest.EducationOrganizationIdsOption.IsSet && editApplicationRequest.EducationOrganizationIds == null)
                throw new ArgumentNullException(nameof(editApplicationRequest.EducationOrganizationIds), "Property is required for class EditApplicationRequest.");

            if (editApplicationRequest.OdsInstanceIdsOption.IsSet && editApplicationRequest.OdsInstanceIds == null)
                throw new ArgumentNullException(nameof(editApplicationRequest.OdsInstanceIds), "Property is required for class EditApplicationRequest.");

            if (editApplicationRequest.ApplicationNameOption.IsSet)
                writer.WriteString("applicationName", editApplicationRequest.ApplicationName);

            if (editApplicationRequest.VendorIdOption.IsSet)
                writer.WriteNumber("vendorId", editApplicationRequest.VendorIdOption.Value.Value);

            if (editApplicationRequest.ClaimSetNameOption.IsSet)
                writer.WriteString("claimSetName", editApplicationRequest.ClaimSetName);

            if (editApplicationRequest.ProfileIdsOption.IsSet)
                if (editApplicationRequest.ProfileIdsOption.Value != null)
                {
                    writer.WritePropertyName("profileIds");
                    JsonSerializer.Serialize(writer, editApplicationRequest.ProfileIds, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("profileIds");
            if (editApplicationRequest.EducationOrganizationIdsOption.IsSet)
            {
                writer.WritePropertyName("educationOrganizationIds");
                JsonSerializer.Serialize(writer, editApplicationRequest.EducationOrganizationIds, jsonSerializerOptions);
            }
            if (editApplicationRequest.OdsInstanceIdsOption.IsSet)
            {
                writer.WritePropertyName("odsInstanceIds");
                JsonSerializer.Serialize(writer, editApplicationRequest.OdsInstanceIds, jsonSerializerOptions);
            }
            if (editApplicationRequest.EnabledOption.IsSet)
                if (editApplicationRequest.EnabledOption.Value != null)
                    writer.WriteBoolean("enabled", editApplicationRequest.EnabledOption.Value.Value);
                else
                    writer.WriteNull("enabled");
        }
    }
}
