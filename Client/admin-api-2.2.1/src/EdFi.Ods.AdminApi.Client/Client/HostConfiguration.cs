/*
 * Admin API Documentation
 *
 * The Ed-Fi Admin API is a REST API-based administrative interface for managing vendors, applications, client credentials, and authorization rules for accessing an Ed-Fi API.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.Net.Http;
using Microsoft.Extensions.DependencyInjection;
using EdFi.Ods.AdminApi.Client.Api;
using EdFi.Ods.AdminApi.Client.Model;

namespace EdFi.Ods.AdminApi.Client.Client
{
    /// <summary>
    /// Provides hosting configuration for EdFi.Ods.AdminApi.Client
    /// </summary>
    public class HostConfiguration
    {
        private readonly IServiceCollection _services;
        private readonly JsonSerializerOptions _jsonOptions = new JsonSerializerOptions();

        internal bool HttpClientsAdded { get; private set; }

        /// <summary>
        /// Instantiates the class 
        /// </summary>
        /// <param name="services"></param>
        public HostConfiguration(IServiceCollection services)
        {
            _services = services;
            _jsonOptions.Converters.Add(new JsonStringEnumConverter());
            _jsonOptions.Converters.Add(new DateTimeJsonConverter());
            _jsonOptions.Converters.Add(new DateTimeNullableJsonConverter());
            _jsonOptions.Converters.Add(new ActionForResourceClaimModelJsonConverter());
            _jsonOptions.Converters.Add(new ActionModelJsonConverter());
            _jsonOptions.Converters.Add(new ActionWithAuthorizationStrategyJsonConverter());
            _jsonOptions.Converters.Add(new AddApplicationRequestJsonConverter());
            _jsonOptions.Converters.Add(new AddClaimSetRequestJsonConverter());
            _jsonOptions.Converters.Add(new AddOdsInstanceContextRequestJsonConverter());
            _jsonOptions.Converters.Add(new AddOdsInstanceDerivativeRequestJsonConverter());
            _jsonOptions.Converters.Add(new AddOdsInstanceRequestJsonConverter());
            _jsonOptions.Converters.Add(new AddProfileRequestJsonConverter());
            _jsonOptions.Converters.Add(new AddResourceClaimOnClaimSetRequestJsonConverter());
            _jsonOptions.Converters.Add(new AddVendorRequestJsonConverter());
            _jsonOptions.Converters.Add(new ApplicationModelJsonConverter());
            _jsonOptions.Converters.Add(new ApplicationResultJsonConverter());
            _jsonOptions.Converters.Add(new AuthorizationStrategyJsonConverter());
            _jsonOptions.Converters.Add(new AuthorizationStrategyModelJsonConverter());
            _jsonOptions.Converters.Add(new AuthorizationStrategyModelForActionJsonConverter());
            _jsonOptions.Converters.Add(new ClaimSetDetailsModelJsonConverter());
            _jsonOptions.Converters.Add(new ClaimSetModelJsonConverter());
            _jsonOptions.Converters.Add(new ClaimSetResourceClaimActionAuthStrategiesJsonConverter());
            _jsonOptions.Converters.Add(new ClaimSetResourceClaimModelJsonConverter());
            _jsonOptions.Converters.Add(new CopyClaimSetRequestJsonConverter());
            _jsonOptions.Converters.Add(new EditApplicationRequestJsonConverter());
            _jsonOptions.Converters.Add(new EditClaimSetRequestJsonConverter());
            _jsonOptions.Converters.Add(new EditOdsInstanceContextRequestJsonConverter());
            _jsonOptions.Converters.Add(new EditOdsInstanceDerivativeRequestJsonConverter());
            _jsonOptions.Converters.Add(new EditOdsInstanceRequestJsonConverter());
            _jsonOptions.Converters.Add(new EditProfileRequestJsonConverter());
            _jsonOptions.Converters.Add(new EditResourceClaimOnClaimSetRequestJsonConverter());
            _jsonOptions.Converters.Add(new EditVendorRequestJsonConverter());
            _jsonOptions.Converters.Add(new ImportClaimSetRequestJsonConverter());
            _jsonOptions.Converters.Add(new InformationResultJsonConverter());
            _jsonOptions.Converters.Add(new OdsInstanceContextModelJsonConverter());
            _jsonOptions.Converters.Add(new OdsInstanceDerivativeModelJsonConverter());
            _jsonOptions.Converters.Add(new OdsInstanceDetailModelJsonConverter());
            _jsonOptions.Converters.Add(new OdsInstanceModelJsonConverter());
            _jsonOptions.Converters.Add(new OverrideAuthStategyOnClaimSetRequestJsonConverter());
            _jsonOptions.Converters.Add(new ProfileDetailsModelJsonConverter());
            _jsonOptions.Converters.Add(new ProfileModelJsonConverter());
            _jsonOptions.Converters.Add(new RegisterClientRequestJsonConverter());
            _jsonOptions.Converters.Add(new ResourceClaimActionJsonConverter());
            _jsonOptions.Converters.Add(new ResourceClaimActionAuthStrategyModelJsonConverter());
            _jsonOptions.Converters.Add(new ResourceClaimActionModelJsonConverter());
            _jsonOptions.Converters.Add(new ResourceClaimModelJsonConverter());
            _jsonOptions.Converters.Add(new SimpleApplicationModelJsonConverter());
            _jsonOptions.Converters.Add(new VendorModelJsonConverter());
            JsonSerializerOptionsProvider jsonSerializerOptionsProvider = new JsonSerializerOptionsProvider(_jsonOptions);
            _services.AddSingleton(jsonSerializerOptionsProvider);
            _services.AddSingleton<IApiFactory, ApiFactory>();
            _services.AddSingleton<ActionsApiEvents>();
            _services.AddSingleton<ApplicationsApiEvents>();
            _services.AddSingleton<AuthorizationStrategiesApiEvents>();
            _services.AddSingleton<ClaimSetsApiEvents>();
            _services.AddSingleton<ConnectApiEvents>();
            _services.AddSingleton<InformationApiEvents>();
            _services.AddSingleton<OdsInstanceContextsApiEvents>();
            _services.AddSingleton<OdsInstanceDerivativesApiEvents>();
            _services.AddSingleton<OdsInstancesApiEvents>();
            _services.AddSingleton<ProfilesApiEvents>();
            _services.AddSingleton<ResourceClaimActionAuthStrategiesApiEvents>();
            _services.AddSingleton<ResourceClaimActionsApiEvents>();
            _services.AddSingleton<ResourceClaimsApiEvents>();
            _services.AddSingleton<VendorsApiEvents>();
        }

        /// <summary>
        /// Configures the HttpClients.
        /// </summary>
        /// <param name="client"></param>
        /// <param name="builder"></param>
        /// <returns></returns>
        public HostConfiguration AddEdFiOdsAdminApiClientHttpClients
        (
            Action<HttpClient>? client = null, Action<IHttpClientBuilder>? builder = null)
        {
            if (client == null)
                client = c => c.BaseAddress = new Uri(ClientUtils.BASE_ADDRESS);

            List<IHttpClientBuilder> builders = new List<IHttpClientBuilder>();

            builders.Add(_services.AddHttpClient<IActionsApi, ActionsApi>(client));
            builders.Add(_services.AddHttpClient<IApplicationsApi, ApplicationsApi>(client));
            builders.Add(_services.AddHttpClient<IAuthorizationStrategiesApi, AuthorizationStrategiesApi>(client));
            builders.Add(_services.AddHttpClient<IClaimSetsApi, ClaimSetsApi>(client));
            builders.Add(_services.AddHttpClient<IConnectApi, ConnectApi>(client));
            builders.Add(_services.AddHttpClient<IInformationApi, InformationApi>(client));
            builders.Add(_services.AddHttpClient<IOdsInstanceContextsApi, OdsInstanceContextsApi>(client));
            builders.Add(_services.AddHttpClient<IOdsInstanceDerivativesApi, OdsInstanceDerivativesApi>(client));
            builders.Add(_services.AddHttpClient<IOdsInstancesApi, OdsInstancesApi>(client));
            builders.Add(_services.AddHttpClient<IProfilesApi, ProfilesApi>(client));
            builders.Add(_services.AddHttpClient<IResourceClaimActionAuthStrategiesApi, ResourceClaimActionAuthStrategiesApi>(client));
            builders.Add(_services.AddHttpClient<IResourceClaimActionsApi, ResourceClaimActionsApi>(client));
            builders.Add(_services.AddHttpClient<IResourceClaimsApi, ResourceClaimsApi>(client));
            builders.Add(_services.AddHttpClient<IVendorsApi, VendorsApi>(client));
            
            if (builder != null)
                foreach (IHttpClientBuilder instance in builders)
                    builder(instance);

            HttpClientsAdded = true;

            return this;
        }

        /// <summary>
        /// Configures the JsonSerializerSettings
        /// </summary>
        /// <param name="options"></param>
        /// <returns></returns>
        public HostConfiguration ConfigureJsonOptions(Action<JsonSerializerOptions> options)
        {
            options(_jsonOptions);

            return this;
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="token"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(TTokenBase token) where TTokenBase : TokenBase
        {
            return AddTokens(new TTokenBase[]{ token });
        }

        /// <summary>
        /// Adds tokens to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <param name="tokens"></param>
        /// <returns></returns>
        public HostConfiguration AddTokens<TTokenBase>(IEnumerable<TTokenBase> tokens) where TTokenBase : TokenBase
        {
            TokenContainer<TTokenBase> container = new TokenContainer<TTokenBase>(tokens);
            _services.AddSingleton(services => container);

            return this;
        }

        /// <summary>
        /// Adds a token provider to your IServiceCollection
        /// </summary>
        /// <typeparam name="TTokenProvider"></typeparam>
        /// <typeparam name="TTokenBase"></typeparam>
        /// <returns></returns>
        public HostConfiguration UseProvider<TTokenProvider, TTokenBase>() 
            where TTokenProvider : TokenProvider<TTokenBase>
            where TTokenBase : TokenBase
        {
            _services.AddSingleton<TTokenProvider>();
            _services.AddSingleton<TokenProvider<TTokenBase>>(services => services.GetRequiredService<TTokenProvider>());

            return this;
        }
    }
}
