// <auto-generated>
/*
 * Admin API Documentation
 *
 * The Ed-Fi Admin API is a REST API-based administrative interface for managing vendors, applications, client credentials, and authorization rules for accessing an Ed-Fi API.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using EdFi.Ods.AdminApi.Client.Client;

namespace EdFi.Ods.AdminApi.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IConnectApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        ConnectApiEvents Events { get; }

        /// <summary>
        /// Registers new client
        /// </summary>
        /// <remarks>
        /// Registers new client
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client id (optional)</param>
        /// <param name="clientSecret">Client secret (optional)</param>
        /// <param name="displayName">Client display name (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IConnectRegisterPostApiResponse"/>&gt;</returns>
        Task<IConnectRegisterPostApiResponse> ConnectRegisterPostAsync(Option<string> clientId = default, Option<string> clientSecret = default, Option<string> displayName = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Registers new client
        /// </summary>
        /// <remarks>
        /// Registers new client
        /// </remarks>
        /// <param name="clientId">Client id (optional)</param>
        /// <param name="clientSecret">Client secret (optional)</param>
        /// <param name="displayName">Client display name (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IConnectRegisterPostApiResponse"/>?&gt;</returns>
        Task<IConnectRegisterPostApiResponse?> ConnectRegisterPostOrDefaultAsync(Option<string> clientId = default, Option<string> clientSecret = default, Option<string> displayName = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves bearer token
        /// </summary>
        /// <remarks>
        ///  To authenticate Swagger requests, execute using \&quot;Authorize\&quot; above, not \&quot;Try It Out\&quot; here.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="grantType"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IConnectTokenPostApiResponse"/>&gt;</returns>
        Task<IConnectTokenPostApiResponse> ConnectTokenPostAsync(Option<String> clientId = default, Option<String> clientSecret = default, Option<String> grantType = default, Option<string> scope = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves bearer token
        /// </summary>
        /// <remarks>
        ///  To authenticate Swagger requests, execute using \&quot;Authorize\&quot; above, not \&quot;Try It Out\&quot; here.
        /// </remarks>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="grantType"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IConnectTokenPostApiResponse"/>?&gt;</returns>
        Task<IConnectTokenPostApiResponse?> ConnectTokenPostOrDefaultAsync(Option<String> clientId = default, Option<String> clientSecret = default, Option<String> grantType = default, Option<string> scope = default, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IConnectRegisterPostApiResponse"/>
    /// </summary>
    public interface IConnectRegisterPostApiResponse : EdFi.Ods.AdminApi.Client.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IConnectTokenPostApiResponse"/>
    /// </summary>
    public interface IConnectTokenPostApiResponse : EdFi.Ods.AdminApi.Client.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class ConnectApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnConnectRegisterPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorConnectRegisterPost;

        internal void ExecuteOnConnectRegisterPost(ConnectApi.ConnectRegisterPostApiResponse apiResponse)
        {
            OnConnectRegisterPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorConnectRegisterPost(Exception exception)
        {
            OnErrorConnectRegisterPost?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs>? OnConnectTokenPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs>? OnErrorConnectTokenPost;

        internal void ExecuteOnConnectTokenPost(ConnectApi.ConnectTokenPostApiResponse apiResponse)
        {
            OnConnectTokenPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorConnectTokenPost(Exception exception)
        {
            OnErrorConnectTokenPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class ConnectApi : IConnectApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<ConnectApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public ConnectApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="ConnectApi"/> class.
        /// </summary>
        /// <returns></returns>
        public ConnectApi(ILogger<ConnectApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, ConnectApiEvents connectApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<ConnectApi>();
            HttpClient = httpClient;
            Events = connectApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatConnectRegisterPost(ref Option<string> clientId, ref Option<string> clientSecret, ref Option<string> displayName);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="displayName"></param>
        /// <returns></returns>
        private void ValidateConnectRegisterPost(Option<string> clientId, Option<string> clientSecret, Option<string> displayName)
        {
            if (clientId.IsSet && clientId.Value == null)
                throw new ArgumentNullException(nameof(clientId));

            if (clientSecret.IsSet && clientSecret.Value == null)
                throw new ArgumentNullException(nameof(clientSecret));

            if (displayName.IsSet && displayName.Value == null)
                throw new ArgumentNullException(nameof(displayName));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="displayName"></param>
        private void AfterConnectRegisterPostDefaultImplementation(IConnectRegisterPostApiResponse apiResponseLocalVar, Option<string> clientId, Option<string> clientSecret, Option<string> displayName)
        {
            bool suppressDefaultLog = false;
            AfterConnectRegisterPost(ref suppressDefaultLog, apiResponseLocalVar, clientId, clientSecret, displayName);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="displayName"></param>
        partial void AfterConnectRegisterPost(ref bool suppressDefaultLog, IConnectRegisterPostApiResponse apiResponseLocalVar, Option<string> clientId, Option<string> clientSecret, Option<string> displayName);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="displayName"></param>
        private void OnErrorConnectRegisterPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> clientId, Option<string> clientSecret, Option<string> displayName)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorConnectRegisterPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, clientId, clientSecret, displayName);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="displayName"></param>
        partial void OnErrorConnectRegisterPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<string> clientId, Option<string> clientSecret, Option<string> displayName);

        /// <summary>
        /// Registers new client Registers new client
        /// </summary>
        /// <param name="clientId">Client id (optional)</param>
        /// <param name="clientSecret">Client secret (optional)</param>
        /// <param name="displayName">Client display name (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IConnectRegisterPostApiResponse"/>&gt;</returns>
        public async Task<IConnectRegisterPostApiResponse?> ConnectRegisterPostOrDefaultAsync(Option<string> clientId = default, Option<string> clientSecret = default, Option<string> displayName = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ConnectRegisterPostAsync(clientId, clientSecret, displayName, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Registers new client Registers new client
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId">Client id (optional)</param>
        /// <param name="clientSecret">Client secret (optional)</param>
        /// <param name="displayName">Client display name (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IConnectRegisterPostApiResponse"/>&gt;</returns>
        public async Task<IConnectRegisterPostApiResponse> ConnectRegisterPostAsync(Option<string> clientId = default, Option<string> clientSecret = default, Option<string> displayName = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateConnectRegisterPost(clientId, clientSecret, displayName);

                FormatConnectRegisterPost(ref clientId, ref clientSecret, ref displayName);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/connect/register"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/connect/register");

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));                    if (clientId.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("ClientId", ClientUtils.ParameterToString(clientId.Value)));

                    if (clientSecret.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("ClientSecret", ClientUtils.ParameterToString(clientSecret.Value)));

                    if (displayName.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("DisplayName", ClientUtils.ParameterToString(displayName.Value)));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/x-www-form-urlencoded"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<ConnectRegisterPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ConnectRegisterPostApiResponse>();

                        ConnectRegisterPostApiResponse apiResponseLocalVar = new ConnectRegisterPostApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/connect/register", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterConnectRegisterPostDefaultImplementation(apiResponseLocalVar, clientId, clientSecret, displayName);

                        Events.ExecuteOnConnectRegisterPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorConnectRegisterPostDefaultImplementation(e, "/connect/register", uriBuilderLocalVar.Path, clientId, clientSecret, displayName);
                Events.ExecuteOnErrorConnectRegisterPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ConnectRegisterPostApiResponse"/>
        /// </summary>
        public partial class ConnectRegisterPostApiResponse : EdFi.Ods.AdminApi.Client.Client.ApiResponse, IConnectRegisterPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ConnectRegisterPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ConnectRegisterPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ConnectRegisterPostApiResponse(ILogger<ConnectRegisterPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatConnectTokenPost(Option<String> clientId, Option<String> clientSecret, Option<String> grantType, ref Option<string> scope);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="grantType"></param>
        /// <param name="scope"></param>
        /// <returns></returns>
        private void ValidateConnectTokenPost(Option<String> clientId, Option<String> clientSecret, Option<String> grantType, Option<string> scope)
        {
            if (clientId.IsSet && clientId.Value == null)
                throw new ArgumentNullException(nameof(clientId));

            if (clientSecret.IsSet && clientSecret.Value == null)
                throw new ArgumentNullException(nameof(clientSecret));

            if (grantType.IsSet && grantType.Value == null)
                throw new ArgumentNullException(nameof(grantType));

            if (scope.IsSet && scope.Value == null)
                throw new ArgumentNullException(nameof(scope));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="grantType"></param>
        /// <param name="scope"></param>
        private void AfterConnectTokenPostDefaultImplementation(IConnectTokenPostApiResponse apiResponseLocalVar, Option<String> clientId, Option<String> clientSecret, Option<String> grantType, Option<string> scope)
        {
            bool suppressDefaultLog = false;
            AfterConnectTokenPost(ref suppressDefaultLog, apiResponseLocalVar, clientId, clientSecret, grantType, scope);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="grantType"></param>
        /// <param name="scope"></param>
        partial void AfterConnectTokenPost(ref bool suppressDefaultLog, IConnectTokenPostApiResponse apiResponseLocalVar, Option<String> clientId, Option<String> clientSecret, Option<String> grantType, Option<string> scope);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="grantType"></param>
        /// <param name="scope"></param>
        private void OnErrorConnectTokenPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<String> clientId, Option<String> clientSecret, Option<String> grantType, Option<string> scope)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorConnectTokenPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, clientId, clientSecret, grantType, scope);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="clientId"></param>
        /// <param name="clientSecret"></param>
        /// <param name="grantType"></param>
        /// <param name="scope"></param>
        partial void OnErrorConnectTokenPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<String> clientId, Option<String> clientSecret, Option<String> grantType, Option<string> scope);

        /// <summary>
        /// Retrieves bearer token  To authenticate Swagger requests, execute using \&quot;Authorize\&quot; above, not \&quot;Try It Out\&quot; here.
        /// </summary>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="grantType"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IConnectTokenPostApiResponse"/>&gt;</returns>
        public async Task<IConnectTokenPostApiResponse?> ConnectTokenPostOrDefaultAsync(Option<String> clientId = default, Option<String> clientSecret = default, Option<String> grantType = default, Option<string> scope = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await ConnectTokenPostAsync(clientId, clientSecret, grantType, scope, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves bearer token  To authenticate Swagger requests, execute using \&quot;Authorize\&quot; above, not \&quot;Try It Out\&quot; here.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="clientId"> (optional)</param>
        /// <param name="clientSecret"> (optional)</param>
        /// <param name="grantType"> (optional)</param>
        /// <param name="scope"> (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IConnectTokenPostApiResponse"/>&gt;</returns>
        public async Task<IConnectTokenPostApiResponse> ConnectTokenPostAsync(Option<String> clientId = default, Option<String> clientSecret = default, Option<String> grantType = default, Option<string> scope = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateConnectTokenPost(clientId, clientSecret, grantType, scope);

                FormatConnectTokenPost(clientId, clientSecret, grantType, ref scope);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress!.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/connect/token"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/connect/token");

                    MultipartContent multipartContentLocalVar = new MultipartContent();

                    httpRequestMessageLocalVar.Content = multipartContentLocalVar;

                    List<KeyValuePair<string?, string?>> formParameterLocalVars = new List<KeyValuePair<string?, string?>>();

                    multipartContentLocalVar.Add(new FormUrlEncodedContent(formParameterLocalVars));                    if (clientId.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("client_id", ClientUtils.ParameterToString(clientId.Value)));

                    if (clientSecret.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("client_secret", ClientUtils.ParameterToString(clientSecret.Value)));

                    if (grantType.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("grant_type", ClientUtils.ParameterToString(grantType.Value)));

                    if (scope.IsSet)
                        formParameterLocalVars.Add(new KeyValuePair<string?, string?>("scope", ClientUtils.ParameterToString(scope.Value)));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/x-www-form-urlencoded"
                    };

                    string? contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<ConnectTokenPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<ConnectTokenPostApiResponse>();

                        ConnectTokenPostApiResponse apiResponseLocalVar = new ConnectTokenPostApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/connect/token", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterConnectTokenPostDefaultImplementation(apiResponseLocalVar, clientId, clientSecret, grantType, scope);

                        Events.ExecuteOnConnectTokenPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorConnectTokenPostDefaultImplementation(e, "/connect/token", uriBuilderLocalVar.Path, clientId, clientSecret, grantType, scope);
                Events.ExecuteOnErrorConnectTokenPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="ConnectTokenPostApiResponse"/>
        /// </summary>
        public partial class ConnectTokenPostApiResponse : EdFi.Ods.AdminApi.Client.Client.ApiResponse, IConnectTokenPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<ConnectTokenPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="ConnectTokenPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public ConnectTokenPostApiResponse(ILogger<ConnectTokenPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
