// <auto-generated>
/*
 * Admin API Documentation
 *
 * The Ed-Fi Admin API is a REST API-based administrative interface for managing vendors, applications, client credentials, and authorization rules for accessing an Ed-Fi API.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using EdFi.Ods.AdminApi.Client.Client;
using EdFi.Ods.AdminApi.Client.Model;

namespace EdFi.Ods.AdminApi.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IOdsInstanceDerivativesApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        OdsInstanceDerivativesApiEvents Events { get; }

        /// <summary>
        /// Retrieves all odsInstanceDerivatives.
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2OdsInstanceDerivativesGetApiResponse"/>&gt;</returns>
        Task<IV2OdsInstanceDerivativesGetApiResponse> V2OdsInstanceDerivativesGetAsync(Option<int> offset = default, Option<int> limit = default, Option<string> orderBy = default, Option<string> direction = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves all odsInstanceDerivatives.
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2OdsInstanceDerivativesGetApiResponse"/>&gt;</returns>
        Task<IV2OdsInstanceDerivativesGetApiResponse> V2OdsInstanceDerivativesGetOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> orderBy = default, Option<string> direction = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes an existing odsInstanceDerivative using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2OdsInstanceDerivativesIdDeleteApiResponse"/>&gt;</returns>
        Task<IV2OdsInstanceDerivativesIdDeleteApiResponse> V2OdsInstanceDerivativesIdDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes an existing odsInstanceDerivative using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2OdsInstanceDerivativesIdDeleteApiResponse"/>&gt;</returns>
        Task<IV2OdsInstanceDerivativesIdDeleteApiResponse> V2OdsInstanceDerivativesIdDeleteOrDefaultAsync(int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific odsInstanceDerivative based on the identifier.
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2OdsInstanceDerivativesIdGetApiResponse"/>&gt;</returns>
        Task<IV2OdsInstanceDerivativesIdGetApiResponse> V2OdsInstanceDerivativesIdGetAsync(int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific odsInstanceDerivative based on the identifier.
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2OdsInstanceDerivativesIdGetApiResponse"/>&gt;</returns>
        Task<IV2OdsInstanceDerivativesIdGetApiResponse> V2OdsInstanceDerivativesIdGetOrDefaultAsync(int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates odsInstanceDerivative based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="editOdsInstanceDerivativeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2OdsInstanceDerivativesIdPutApiResponse"/>&gt;</returns>
        Task<IV2OdsInstanceDerivativesIdPutApiResponse> V2OdsInstanceDerivativesIdPutAsync(int id, EditOdsInstanceDerivativeRequest editOdsInstanceDerivativeRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates odsInstanceDerivative based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="editOdsInstanceDerivativeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2OdsInstanceDerivativesIdPutApiResponse"/>&gt;</returns>
        Task<IV2OdsInstanceDerivativesIdPutApiResponse> V2OdsInstanceDerivativesIdPutOrDefaultAsync(int id, EditOdsInstanceDerivativeRequest editOdsInstanceDerivativeRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates odsInstanceDerivative based on the supplied values.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addOdsInstanceDerivativeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2OdsInstanceDerivativesPostApiResponse"/>&gt;</returns>
        Task<IV2OdsInstanceDerivativesPostApiResponse> V2OdsInstanceDerivativesPostAsync(AddOdsInstanceDerivativeRequest addOdsInstanceDerivativeRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates odsInstanceDerivative based on the supplied values.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <param name="addOdsInstanceDerivativeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2OdsInstanceDerivativesPostApiResponse"/>&gt;</returns>
        Task<IV2OdsInstanceDerivativesPostApiResponse> V2OdsInstanceDerivativesPostOrDefaultAsync(AddOdsInstanceDerivativeRequest addOdsInstanceDerivativeRequest, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IV2OdsInstanceDerivativesGetApiResponse"/>
    /// </summary>
    public interface IV2OdsInstanceDerivativesGetApiResponse : EdFi.Ods.AdminApi.Client.Client.IApiResponse, IOk<List<OdsInstanceDerivativeModel>>
    {
        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV2OdsInstanceDerivativesIdDeleteApiResponse"/>
    /// </summary>
    public interface IV2OdsInstanceDerivativesIdDeleteApiResponse : EdFi.Ods.AdminApi.Client.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV2OdsInstanceDerivativesIdGetApiResponse"/>
    /// </summary>
    public interface IV2OdsInstanceDerivativesIdGetApiResponse : EdFi.Ods.AdminApi.Client.Client.IApiResponse, IOk<EdFi.Ods.AdminApi.Client.Model.OdsInstanceDerivativeModel>
    {
        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV2OdsInstanceDerivativesIdPutApiResponse"/>
    /// </summary>
    public interface IV2OdsInstanceDerivativesIdPutApiResponse : EdFi.Ods.AdminApi.Client.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV2OdsInstanceDerivativesPostApiResponse"/>
    /// </summary>
    public interface IV2OdsInstanceDerivativesPostApiResponse : EdFi.Ods.AdminApi.Client.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class OdsInstanceDerivativesApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnV2OdsInstanceDerivativesGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorV2OdsInstanceDerivativesGet;

        internal void ExecuteOnV2OdsInstanceDerivativesGet(OdsInstanceDerivativesApi.V2OdsInstanceDerivativesGetApiResponse apiResponse)
        {
            OnV2OdsInstanceDerivativesGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV2OdsInstanceDerivativesGet(Exception exception)
        {
            OnErrorV2OdsInstanceDerivativesGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnV2OdsInstanceDerivativesIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorV2OdsInstanceDerivativesIdDelete;

        internal void ExecuteOnV2OdsInstanceDerivativesIdDelete(OdsInstanceDerivativesApi.V2OdsInstanceDerivativesIdDeleteApiResponse apiResponse)
        {
            OnV2OdsInstanceDerivativesIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV2OdsInstanceDerivativesIdDelete(Exception exception)
        {
            OnErrorV2OdsInstanceDerivativesIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnV2OdsInstanceDerivativesIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorV2OdsInstanceDerivativesIdGet;

        internal void ExecuteOnV2OdsInstanceDerivativesIdGet(OdsInstanceDerivativesApi.V2OdsInstanceDerivativesIdGetApiResponse apiResponse)
        {
            OnV2OdsInstanceDerivativesIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV2OdsInstanceDerivativesIdGet(Exception exception)
        {
            OnErrorV2OdsInstanceDerivativesIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnV2OdsInstanceDerivativesIdPut;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorV2OdsInstanceDerivativesIdPut;

        internal void ExecuteOnV2OdsInstanceDerivativesIdPut(OdsInstanceDerivativesApi.V2OdsInstanceDerivativesIdPutApiResponse apiResponse)
        {
            OnV2OdsInstanceDerivativesIdPut?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV2OdsInstanceDerivativesIdPut(Exception exception)
        {
            OnErrorV2OdsInstanceDerivativesIdPut?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnV2OdsInstanceDerivativesPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorV2OdsInstanceDerivativesPost;

        internal void ExecuteOnV2OdsInstanceDerivativesPost(OdsInstanceDerivativesApi.V2OdsInstanceDerivativesPostApiResponse apiResponse)
        {
            OnV2OdsInstanceDerivativesPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV2OdsInstanceDerivativesPost(Exception exception)
        {
            OnErrorV2OdsInstanceDerivativesPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class OdsInstanceDerivativesApi : IOdsInstanceDerivativesApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<OdsInstanceDerivativesApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public OdsInstanceDerivativesApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="OdsInstanceDerivativesApi"/> class.
        /// </summary>
        /// <returns></returns>
        public OdsInstanceDerivativesApi(ILogger<OdsInstanceDerivativesApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, OdsInstanceDerivativesApiEvents odsInstanceDerivativesApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<OdsInstanceDerivativesApi>();
            HttpClient = httpClient;
            Events = odsInstanceDerivativesApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatV2OdsInstanceDerivativesGet(ref Option<int> offset, ref Option<int> limit, ref Option<string> orderBy, ref Option<string> direction);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="orderBy"></param>
        /// <param name="direction"></param>
        /// <returns></returns>
        private void ValidateV2OdsInstanceDerivativesGet(Option<string> orderBy, Option<string> direction)
        {
            if (orderBy.IsSet && orderBy.Value == null)
                throw new ArgumentNullException(nameof(orderBy));

            if (direction.IsSet && direction.Value == null)
                throw new ArgumentNullException(nameof(direction));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="orderBy"></param>
        /// <param name="direction"></param>
        private void AfterV2OdsInstanceDerivativesGetDefaultImplementation(IV2OdsInstanceDerivativesGetApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> orderBy, Option<string> direction)
        {
            bool suppressDefaultLog = false;
            AfterV2OdsInstanceDerivativesGet(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, orderBy, direction);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="orderBy"></param>
        /// <param name="direction"></param>
        partial void AfterV2OdsInstanceDerivativesGet(ref bool suppressDefaultLog, IV2OdsInstanceDerivativesGetApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> orderBy, Option<string> direction);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="orderBy"></param>
        /// <param name="direction"></param>
        private void OnErrorV2OdsInstanceDerivativesGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> orderBy, Option<string> direction)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV2OdsInstanceDerivativesGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, orderBy, direction);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="orderBy"></param>
        /// <param name="direction"></param>
        partial void OnErrorV2OdsInstanceDerivativesGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> orderBy, Option<string> direction);

        /// <summary>
        /// Retrieves all odsInstanceDerivatives. This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2OdsInstanceDerivativesGetApiResponse"/>&gt;</returns>
        public async Task<IV2OdsInstanceDerivativesGetApiResponse> V2OdsInstanceDerivativesGetOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> orderBy = default, Option<string> direction = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V2OdsInstanceDerivativesGetAsync(offset, limit, orderBy, direction, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves all odsInstanceDerivatives. This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2OdsInstanceDerivativesGetApiResponse"/>&gt;</returns>
        public async Task<IV2OdsInstanceDerivativesGetApiResponse> V2OdsInstanceDerivativesGetAsync(Option<int> offset = default, Option<int> limit = default, Option<string> orderBy = default, Option<string> direction = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV2OdsInstanceDerivativesGet(orderBy, direction);

                FormatV2OdsInstanceDerivativesGet(ref offset, ref limit, ref orderBy, ref direction);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v2/odsInstanceDerivatives"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v2/odsInstanceDerivatives");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (orderBy.IsSet)
                        parseQueryStringLocalVar["orderBy"] = ClientUtils.ParameterToString(orderBy.Value);

                    if (direction.IsSet)
                        parseQueryStringLocalVar["direction"] = ClientUtils.ParameterToString(direction.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<V2OdsInstanceDerivativesGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V2OdsInstanceDerivativesGetApiResponse>();

                        V2OdsInstanceDerivativesGetApiResponse apiResponseLocalVar = new V2OdsInstanceDerivativesGetApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/odsInstanceDerivatives", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV2OdsInstanceDerivativesGetDefaultImplementation(apiResponseLocalVar, offset, limit, orderBy, direction);

                        Events.ExecuteOnV2OdsInstanceDerivativesGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV2OdsInstanceDerivativesGetDefaultImplementation(e, "/v2/odsInstanceDerivatives", uriBuilderLocalVar.Path, offset, limit, orderBy, direction);
                Events.ExecuteOnErrorV2OdsInstanceDerivativesGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V2OdsInstanceDerivativesGetApiResponse"/>
        /// </summary>
        public partial class V2OdsInstanceDerivativesGetApiResponse : EdFi.Ods.AdminApi.Client.Client.ApiResponse, IV2OdsInstanceDerivativesGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V2OdsInstanceDerivativesGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V2OdsInstanceDerivativesGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V2OdsInstanceDerivativesGetApiResponse(ILogger<V2OdsInstanceDerivativesGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<OdsInstanceDerivativeModel> Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<OdsInstanceDerivativeModel>>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out List<OdsInstanceDerivativeModel> result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV2OdsInstanceDerivativesIdDelete(ref int id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterV2OdsInstanceDerivativesIdDeleteDefaultImplementation(IV2OdsInstanceDerivativesIdDeleteApiResponse apiResponseLocalVar, int id)
        {
            bool suppressDefaultLog = false;
            AfterV2OdsInstanceDerivativesIdDelete(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterV2OdsInstanceDerivativesIdDelete(ref bool suppressDefaultLog, IV2OdsInstanceDerivativesIdDeleteApiResponse apiResponseLocalVar, int id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorV2OdsInstanceDerivativesIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV2OdsInstanceDerivativesIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorV2OdsInstanceDerivativesIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id);

        /// <summary>
        /// Deletes an existing odsInstanceDerivative using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2OdsInstanceDerivativesIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IV2OdsInstanceDerivativesIdDeleteApiResponse> V2OdsInstanceDerivativesIdDeleteOrDefaultAsync(int id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V2OdsInstanceDerivativesIdDeleteAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes an existing odsInstanceDerivative using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2OdsInstanceDerivativesIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IV2OdsInstanceDerivativesIdDeleteApiResponse> V2OdsInstanceDerivativesIdDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatV2OdsInstanceDerivativesIdDelete(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v2/odsInstanceDerivatives/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v2/odsInstanceDerivatives/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<V2OdsInstanceDerivativesIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V2OdsInstanceDerivativesIdDeleteApiResponse>();

                        V2OdsInstanceDerivativesIdDeleteApiResponse apiResponseLocalVar = new V2OdsInstanceDerivativesIdDeleteApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/odsInstanceDerivatives/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV2OdsInstanceDerivativesIdDeleteDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnV2OdsInstanceDerivativesIdDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV2OdsInstanceDerivativesIdDeleteDefaultImplementation(e, "/v2/odsInstanceDerivatives/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorV2OdsInstanceDerivativesIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V2OdsInstanceDerivativesIdDeleteApiResponse"/>
        /// </summary>
        public partial class V2OdsInstanceDerivativesIdDeleteApiResponse : EdFi.Ods.AdminApi.Client.Client.ApiResponse, IV2OdsInstanceDerivativesIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V2OdsInstanceDerivativesIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V2OdsInstanceDerivativesIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V2OdsInstanceDerivativesIdDeleteApiResponse(ILogger<V2OdsInstanceDerivativesIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV2OdsInstanceDerivativesIdGet(ref int id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterV2OdsInstanceDerivativesIdGetDefaultImplementation(IV2OdsInstanceDerivativesIdGetApiResponse apiResponseLocalVar, int id)
        {
            bool suppressDefaultLog = false;
            AfterV2OdsInstanceDerivativesIdGet(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterV2OdsInstanceDerivativesIdGet(ref bool suppressDefaultLog, IV2OdsInstanceDerivativesIdGetApiResponse apiResponseLocalVar, int id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorV2OdsInstanceDerivativesIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV2OdsInstanceDerivativesIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorV2OdsInstanceDerivativesIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id);

        /// <summary>
        /// Retrieves a specific odsInstanceDerivative based on the identifier. This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2OdsInstanceDerivativesIdGetApiResponse"/>&gt;</returns>
        public async Task<IV2OdsInstanceDerivativesIdGetApiResponse> V2OdsInstanceDerivativesIdGetOrDefaultAsync(int id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V2OdsInstanceDerivativesIdGetAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a specific odsInstanceDerivative based on the identifier. This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2OdsInstanceDerivativesIdGetApiResponse"/>&gt;</returns>
        public async Task<IV2OdsInstanceDerivativesIdGetApiResponse> V2OdsInstanceDerivativesIdGetAsync(int id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatV2OdsInstanceDerivativesIdGet(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v2/odsInstanceDerivatives/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v2/odsInstanceDerivatives/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<V2OdsInstanceDerivativesIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V2OdsInstanceDerivativesIdGetApiResponse>();

                        V2OdsInstanceDerivativesIdGetApiResponse apiResponseLocalVar = new V2OdsInstanceDerivativesIdGetApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/odsInstanceDerivatives/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV2OdsInstanceDerivativesIdGetDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnV2OdsInstanceDerivativesIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV2OdsInstanceDerivativesIdGetDefaultImplementation(e, "/v2/odsInstanceDerivatives/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorV2OdsInstanceDerivativesIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V2OdsInstanceDerivativesIdGetApiResponse"/>
        /// </summary>
        public partial class V2OdsInstanceDerivativesIdGetApiResponse : EdFi.Ods.AdminApi.Client.Client.ApiResponse, IV2OdsInstanceDerivativesIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V2OdsInstanceDerivativesIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V2OdsInstanceDerivativesIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V2OdsInstanceDerivativesIdGetApiResponse(ILogger<V2OdsInstanceDerivativesIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.Ods.AdminApi.Client.Model.OdsInstanceDerivativeModel Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.Ods.AdminApi.Client.Model.OdsInstanceDerivativeModel>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out EdFi.Ods.AdminApi.Client.Model.OdsInstanceDerivativeModel result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV2OdsInstanceDerivativesIdPut(ref int id, EditOdsInstanceDerivativeRequest editOdsInstanceDerivativeRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="editOdsInstanceDerivativeRequest"></param>
        /// <returns></returns>
        private void ValidateV2OdsInstanceDerivativesIdPut(EditOdsInstanceDerivativeRequest editOdsInstanceDerivativeRequest)
        {
            if (editOdsInstanceDerivativeRequest == null)
                throw new ArgumentNullException(nameof(editOdsInstanceDerivativeRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="editOdsInstanceDerivativeRequest"></param>
        private void AfterV2OdsInstanceDerivativesIdPutDefaultImplementation(IV2OdsInstanceDerivativesIdPutApiResponse apiResponseLocalVar, int id, EditOdsInstanceDerivativeRequest editOdsInstanceDerivativeRequest)
        {
            bool suppressDefaultLog = false;
            AfterV2OdsInstanceDerivativesIdPut(ref suppressDefaultLog, apiResponseLocalVar, id, editOdsInstanceDerivativeRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="editOdsInstanceDerivativeRequest"></param>
        partial void AfterV2OdsInstanceDerivativesIdPut(ref bool suppressDefaultLog, IV2OdsInstanceDerivativesIdPutApiResponse apiResponseLocalVar, int id, EditOdsInstanceDerivativeRequest editOdsInstanceDerivativeRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="editOdsInstanceDerivativeRequest"></param>
        private void OnErrorV2OdsInstanceDerivativesIdPutDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id, EditOdsInstanceDerivativeRequest editOdsInstanceDerivativeRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV2OdsInstanceDerivativesIdPut(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, editOdsInstanceDerivativeRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="editOdsInstanceDerivativeRequest"></param>
        partial void OnErrorV2OdsInstanceDerivativesIdPut(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id, EditOdsInstanceDerivativeRequest editOdsInstanceDerivativeRequest);

        /// <summary>
        /// Updates odsInstanceDerivative based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="editOdsInstanceDerivativeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2OdsInstanceDerivativesIdPutApiResponse"/>&gt;</returns>
        public async Task<IV2OdsInstanceDerivativesIdPutApiResponse> V2OdsInstanceDerivativesIdPutOrDefaultAsync(int id, EditOdsInstanceDerivativeRequest editOdsInstanceDerivativeRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V2OdsInstanceDerivativesIdPutAsync(id, editOdsInstanceDerivativeRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Updates odsInstanceDerivative based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="editOdsInstanceDerivativeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2OdsInstanceDerivativesIdPutApiResponse"/>&gt;</returns>
        public async Task<IV2OdsInstanceDerivativesIdPutApiResponse> V2OdsInstanceDerivativesIdPutAsync(int id, EditOdsInstanceDerivativeRequest editOdsInstanceDerivativeRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV2OdsInstanceDerivativesIdPut(editOdsInstanceDerivativeRequest);

                FormatV2OdsInstanceDerivativesIdPut(ref id, editOdsInstanceDerivativeRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v2/odsInstanceDerivatives/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v2/odsInstanceDerivatives/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (editOdsInstanceDerivativeRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(editOdsInstanceDerivativeRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = new HttpMethod("PUT");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<V2OdsInstanceDerivativesIdPutApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V2OdsInstanceDerivativesIdPutApiResponse>();

                        V2OdsInstanceDerivativesIdPutApiResponse apiResponseLocalVar = new V2OdsInstanceDerivativesIdPutApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/odsInstanceDerivatives/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV2OdsInstanceDerivativesIdPutDefaultImplementation(apiResponseLocalVar, id, editOdsInstanceDerivativeRequest);

                        Events.ExecuteOnV2OdsInstanceDerivativesIdPut(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV2OdsInstanceDerivativesIdPutDefaultImplementation(e, "/v2/odsInstanceDerivatives/{id}", uriBuilderLocalVar.Path, id, editOdsInstanceDerivativeRequest);
                Events.ExecuteOnErrorV2OdsInstanceDerivativesIdPut(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V2OdsInstanceDerivativesIdPutApiResponse"/>
        /// </summary>
        public partial class V2OdsInstanceDerivativesIdPutApiResponse : EdFi.Ods.AdminApi.Client.Client.ApiResponse, IV2OdsInstanceDerivativesIdPutApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V2OdsInstanceDerivativesIdPutApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V2OdsInstanceDerivativesIdPutApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V2OdsInstanceDerivativesIdPutApiResponse(ILogger<V2OdsInstanceDerivativesIdPutApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV2OdsInstanceDerivativesPost(AddOdsInstanceDerivativeRequest addOdsInstanceDerivativeRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="addOdsInstanceDerivativeRequest"></param>
        /// <returns></returns>
        private void ValidateV2OdsInstanceDerivativesPost(AddOdsInstanceDerivativeRequest addOdsInstanceDerivativeRequest)
        {
            if (addOdsInstanceDerivativeRequest == null)
                throw new ArgumentNullException(nameof(addOdsInstanceDerivativeRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="addOdsInstanceDerivativeRequest"></param>
        private void AfterV2OdsInstanceDerivativesPostDefaultImplementation(IV2OdsInstanceDerivativesPostApiResponse apiResponseLocalVar, AddOdsInstanceDerivativeRequest addOdsInstanceDerivativeRequest)
        {
            bool suppressDefaultLog = false;
            AfterV2OdsInstanceDerivativesPost(ref suppressDefaultLog, apiResponseLocalVar, addOdsInstanceDerivativeRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="addOdsInstanceDerivativeRequest"></param>
        partial void AfterV2OdsInstanceDerivativesPost(ref bool suppressDefaultLog, IV2OdsInstanceDerivativesPostApiResponse apiResponseLocalVar, AddOdsInstanceDerivativeRequest addOdsInstanceDerivativeRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="addOdsInstanceDerivativeRequest"></param>
        private void OnErrorV2OdsInstanceDerivativesPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AddOdsInstanceDerivativeRequest addOdsInstanceDerivativeRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV2OdsInstanceDerivativesPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, addOdsInstanceDerivativeRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="addOdsInstanceDerivativeRequest"></param>
        partial void OnErrorV2OdsInstanceDerivativesPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AddOdsInstanceDerivativeRequest addOdsInstanceDerivativeRequest);

        /// <summary>
        /// Creates odsInstanceDerivative based on the supplied values. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <param name="addOdsInstanceDerivativeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2OdsInstanceDerivativesPostApiResponse"/>&gt;</returns>
        public async Task<IV2OdsInstanceDerivativesPostApiResponse> V2OdsInstanceDerivativesPostOrDefaultAsync(AddOdsInstanceDerivativeRequest addOdsInstanceDerivativeRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V2OdsInstanceDerivativesPostAsync(addOdsInstanceDerivativeRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creates odsInstanceDerivative based on the supplied values. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addOdsInstanceDerivativeRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2OdsInstanceDerivativesPostApiResponse"/>&gt;</returns>
        public async Task<IV2OdsInstanceDerivativesPostApiResponse> V2OdsInstanceDerivativesPostAsync(AddOdsInstanceDerivativeRequest addOdsInstanceDerivativeRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV2OdsInstanceDerivativesPost(addOdsInstanceDerivativeRequest);

                FormatV2OdsInstanceDerivativesPost(addOdsInstanceDerivativeRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v2/odsInstanceDerivatives"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v2/odsInstanceDerivatives");

                    httpRequestMessageLocalVar.Content = (addOdsInstanceDerivativeRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(addOdsInstanceDerivativeRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<V2OdsInstanceDerivativesPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V2OdsInstanceDerivativesPostApiResponse>();

                        V2OdsInstanceDerivativesPostApiResponse apiResponseLocalVar = new V2OdsInstanceDerivativesPostApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/odsInstanceDerivatives", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV2OdsInstanceDerivativesPostDefaultImplementation(apiResponseLocalVar, addOdsInstanceDerivativeRequest);

                        Events.ExecuteOnV2OdsInstanceDerivativesPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV2OdsInstanceDerivativesPostDefaultImplementation(e, "/v2/odsInstanceDerivatives", uriBuilderLocalVar.Path, addOdsInstanceDerivativeRequest);
                Events.ExecuteOnErrorV2OdsInstanceDerivativesPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V2OdsInstanceDerivativesPostApiResponse"/>
        /// </summary>
        public partial class V2OdsInstanceDerivativesPostApiResponse : EdFi.Ods.AdminApi.Client.Client.ApiResponse, IV2OdsInstanceDerivativesPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V2OdsInstanceDerivativesPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V2OdsInstanceDerivativesPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V2OdsInstanceDerivativesPostApiResponse(ILogger<V2OdsInstanceDerivativesPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
