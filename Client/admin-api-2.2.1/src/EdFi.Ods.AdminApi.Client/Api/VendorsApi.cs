// <auto-generated>
/*
 * Admin API Documentation
 *
 * The Ed-Fi Admin API is a REST API-based administrative interface for managing vendors, applications, client credentials, and authorization rules for accessing an Ed-Fi API.
 *
 * The version of the OpenAPI document: v2
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Net;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text.Json;
using EdFi.Ods.AdminApi.Client.Client;
using EdFi.Ods.AdminApi.Client.Model;

namespace EdFi.Ods.AdminApi.Client.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// This class is registered as transient.
    /// </summary>
    public interface IVendorsApi : IApi
    {
        /// <summary>
        /// The class containing the events
        /// </summary>
        VendorsApiEvents Events { get; }

        /// <summary>
        /// Retrieves all vendors.
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="id">Vendor/ company id (optional)</param>
        /// <param name="company">Vendor/ company name (optional)</param>
        /// <param name="namespacePrefixes">Namespace prefix for the vendor. Multiple namespace prefixes can be provided as comma separated list if required. (optional)</param>
        /// <param name="contactName">Vendor contact name (optional)</param>
        /// <param name="contactEmailAddress">Vendor contact email id (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2VendorsGetApiResponse"/>&gt;</returns>
        Task<IV2VendorsGetApiResponse> V2VendorsGetAsync(Option<int> offset = default, Option<int> limit = default, Option<string> orderBy = default, Option<string> direction = default, Option<int> id = default, Option<string> company = default, Option<string> namespacePrefixes = default, Option<string> contactName = default, Option<string> contactEmailAddress = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves all vendors.
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="id">Vendor/ company id (optional)</param>
        /// <param name="company">Vendor/ company name (optional)</param>
        /// <param name="namespacePrefixes">Namespace prefix for the vendor. Multiple namespace prefixes can be provided as comma separated list if required. (optional)</param>
        /// <param name="contactName">Vendor contact name (optional)</param>
        /// <param name="contactEmailAddress">Vendor contact email id (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2VendorsGetApiResponse"/>&gt;</returns>
        Task<IV2VendorsGetApiResponse> V2VendorsGetOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> orderBy = default, Option<string> direction = default, Option<int> id = default, Option<string> company = default, Option<string> namespacePrefixes = default, Option<string> contactName = default, Option<string> contactEmailAddress = default, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves applications assigned to a specific vendor based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2VendorsIdApplicationsGetApiResponse"/>&gt;</returns>
        Task<IV2VendorsIdApplicationsGetApiResponse> V2VendorsIdApplicationsGetAsync(int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves applications assigned to a specific vendor based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2VendorsIdApplicationsGetApiResponse"/>&gt;</returns>
        Task<IV2VendorsIdApplicationsGetApiResponse> V2VendorsIdApplicationsGetOrDefaultAsync(int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes an existing vendor using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2VendorsIdDeleteApiResponse"/>&gt;</returns>
        Task<IV2VendorsIdDeleteApiResponse> V2VendorsIdDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Deletes an existing vendor using the resource identifier.
        /// </summary>
        /// <remarks>
        /// The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2VendorsIdDeleteApiResponse"/>&gt;</returns>
        Task<IV2VendorsIdDeleteApiResponse> V2VendorsIdDeleteOrDefaultAsync(int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific vendor based on the identifier.
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2VendorsIdGetApiResponse"/>&gt;</returns>
        Task<IV2VendorsIdGetApiResponse> V2VendorsIdGetAsync(int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Retrieves a specific vendor based on the identifier.
        /// </summary>
        /// <remarks>
        /// This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2VendorsIdGetApiResponse"/>&gt;</returns>
        Task<IV2VendorsIdGetApiResponse> V2VendorsIdGetOrDefaultAsync(int id, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates vendor based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="editVendorRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2VendorsIdPutApiResponse"/>&gt;</returns>
        Task<IV2VendorsIdPutApiResponse> V2VendorsIdPutAsync(int id, EditVendorRequest editVendorRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Updates vendor based on the resource identifier.
        /// </summary>
        /// <remarks>
        /// The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </remarks>
        /// <param name="id"></param>
        /// <param name="editVendorRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2VendorsIdPutApiResponse"/>&gt;</returns>
        Task<IV2VendorsIdPutApiResponse> V2VendorsIdPutOrDefaultAsync(int id, EditVendorRequest editVendorRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates vendor based on the supplied values.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addVendorRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2VendorsPostApiResponse"/>&gt;</returns>
        Task<IV2VendorsPostApiResponse> V2VendorsPostAsync(AddVendorRequest addVendorRequest, System.Threading.CancellationToken cancellationToken = default);

        /// <summary>
        /// Creates vendor based on the supplied values.
        /// </summary>
        /// <remarks>
        /// The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </remarks>
        /// <param name="addVendorRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2VendorsPostApiResponse"/>&gt;</returns>
        Task<IV2VendorsPostApiResponse> V2VendorsPostOrDefaultAsync(AddVendorRequest addVendorRequest, System.Threading.CancellationToken cancellationToken = default);
    }

    /// <summary>
    /// The <see cref="IV2VendorsGetApiResponse"/>
    /// </summary>
    public interface IV2VendorsGetApiResponse : EdFi.Ods.AdminApi.Client.Client.IApiResponse, IOk<List<VendorModel>>
    {
        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV2VendorsIdApplicationsGetApiResponse"/>
    /// </summary>
    public interface IV2VendorsIdApplicationsGetApiResponse : EdFi.Ods.AdminApi.Client.Client.IApiResponse, IOk<List<ApplicationModel>>
    {
        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV2VendorsIdDeleteApiResponse"/>
    /// </summary>
    public interface IV2VendorsIdDeleteApiResponse : EdFi.Ods.AdminApi.Client.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV2VendorsIdGetApiResponse"/>
    /// </summary>
    public interface IV2VendorsIdGetApiResponse : EdFi.Ods.AdminApi.Client.Client.IApiResponse, IOk<EdFi.Ods.AdminApi.Client.Model.VendorModel>
    {
        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV2VendorsIdPutApiResponse"/>
    /// </summary>
    public interface IV2VendorsIdPutApiResponse : EdFi.Ods.AdminApi.Client.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 404 NotFound
        /// </summary>
        /// <returns></returns>
        bool IsNotFound { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 200 Ok
        /// </summary>
        /// <returns></returns>
        bool IsOk { get; }
    }

    /// <summary>
    /// The <see cref="IV2VendorsPostApiResponse"/>
    /// </summary>
    public interface IV2VendorsPostApiResponse : EdFi.Ods.AdminApi.Client.Client.IApiResponse
    {
        /// <summary>
        /// Returns true if the response is 401 Unauthorized
        /// </summary>
        /// <returns></returns>
        bool IsUnauthorized { get; }

        /// <summary>
        /// Returns true if the response is 403 Forbidden
        /// </summary>
        /// <returns></returns>
        bool IsForbidden { get; }

        /// <summary>
        /// Returns true if the response is 409 Conflict
        /// </summary>
        /// <returns></returns>
        bool IsConflict { get; }

        /// <summary>
        /// Returns true if the response is 500 InternalServerError
        /// </summary>
        /// <returns></returns>
        bool IsInternalServerError { get; }

        /// <summary>
        /// Returns true if the response is 400 BadRequest
        /// </summary>
        /// <returns></returns>
        bool IsBadRequest { get; }

        /// <summary>
        /// Returns true if the response is 201 Created
        /// </summary>
        /// <returns></returns>
        bool IsCreated { get; }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class VendorsApiEvents
    {
        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnV2VendorsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorV2VendorsGet;

        internal void ExecuteOnV2VendorsGet(VendorsApi.V2VendorsGetApiResponse apiResponse)
        {
            OnV2VendorsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV2VendorsGet(Exception exception)
        {
            OnErrorV2VendorsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnV2VendorsIdApplicationsGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorV2VendorsIdApplicationsGet;

        internal void ExecuteOnV2VendorsIdApplicationsGet(VendorsApi.V2VendorsIdApplicationsGetApiResponse apiResponse)
        {
            OnV2VendorsIdApplicationsGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV2VendorsIdApplicationsGet(Exception exception)
        {
            OnErrorV2VendorsIdApplicationsGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnV2VendorsIdDelete;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorV2VendorsIdDelete;

        internal void ExecuteOnV2VendorsIdDelete(VendorsApi.V2VendorsIdDeleteApiResponse apiResponse)
        {
            OnV2VendorsIdDelete?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV2VendorsIdDelete(Exception exception)
        {
            OnErrorV2VendorsIdDelete?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnV2VendorsIdGet;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorV2VendorsIdGet;

        internal void ExecuteOnV2VendorsIdGet(VendorsApi.V2VendorsIdGetApiResponse apiResponse)
        {
            OnV2VendorsIdGet?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV2VendorsIdGet(Exception exception)
        {
            OnErrorV2VendorsIdGet?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnV2VendorsIdPut;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorV2VendorsIdPut;

        internal void ExecuteOnV2VendorsIdPut(VendorsApi.V2VendorsIdPutApiResponse apiResponse)
        {
            OnV2VendorsIdPut?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV2VendorsIdPut(Exception exception)
        {
            OnErrorV2VendorsIdPut?.Invoke(this, new ExceptionEventArgs(exception));
        }

        /// <summary>
        /// The event raised after the server response
        /// </summary>
        public event EventHandler<ApiResponseEventArgs> OnV2VendorsPost;

        /// <summary>
        /// The event raised after an error querying the server
        /// </summary>
        public event EventHandler<ExceptionEventArgs> OnErrorV2VendorsPost;

        internal void ExecuteOnV2VendorsPost(VendorsApi.V2VendorsPostApiResponse apiResponse)
        {
            OnV2VendorsPost?.Invoke(this, new ApiResponseEventArgs(apiResponse));
        }

        internal void ExecuteOnErrorV2VendorsPost(Exception exception)
        {
            OnErrorV2VendorsPost?.Invoke(this, new ExceptionEventArgs(exception));
        }
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public sealed partial class VendorsApi : IVendorsApi
    {
        private JsonSerializerOptions _jsonSerializerOptions;

        /// <summary>
        /// The logger factory
        /// </summary>
        public ILoggerFactory LoggerFactory { get; }

        /// <summary>
        /// The logger
        /// </summary>
        public ILogger<VendorsApi> Logger { get; }

        /// <summary>
        /// The HttpClient
        /// </summary>
        public HttpClient HttpClient { get; }

        /// <summary>
        /// The class containing the events
        /// </summary>
        public VendorsApiEvents Events { get; }

        /// <summary>
        /// A token provider of type <see cref="OauthTokenProvider"/>
        /// </summary>
        public TokenProvider<OAuthToken> OauthTokenProvider { get; }

        /// <summary>
        /// Initializes a new instance of the <see cref="VendorsApi"/> class.
        /// </summary>
        /// <returns></returns>
        public VendorsApi(ILogger<VendorsApi> logger, ILoggerFactory loggerFactory, HttpClient httpClient, JsonSerializerOptionsProvider jsonSerializerOptionsProvider, VendorsApiEvents vendorsApiEvents,
            TokenProvider<OAuthToken> oauthTokenProvider)
        {
            _jsonSerializerOptions = jsonSerializerOptionsProvider.Options;
            LoggerFactory = loggerFactory;
            Logger = LoggerFactory.CreateLogger<VendorsApi>();
            HttpClient = httpClient;
            Events = vendorsApiEvents;
            OauthTokenProvider = oauthTokenProvider;
        }

        partial void FormatV2VendorsGet(ref Option<int> offset, ref Option<int> limit, ref Option<string> orderBy, ref Option<string> direction, ref Option<int> id, ref Option<string> company, ref Option<string> namespacePrefixes, ref Option<string> contactName, ref Option<string> contactEmailAddress);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="orderBy"></param>
        /// <param name="direction"></param>
        /// <param name="company"></param>
        /// <param name="namespacePrefixes"></param>
        /// <param name="contactName"></param>
        /// <param name="contactEmailAddress"></param>
        /// <returns></returns>
        private void ValidateV2VendorsGet(Option<string> orderBy, Option<string> direction, Option<string> company, Option<string> namespacePrefixes, Option<string> contactName, Option<string> contactEmailAddress)
        {
            if (orderBy.IsSet && orderBy.Value == null)
                throw new ArgumentNullException(nameof(orderBy));

            if (direction.IsSet && direction.Value == null)
                throw new ArgumentNullException(nameof(direction));

            if (company.IsSet && company.Value == null)
                throw new ArgumentNullException(nameof(company));

            if (namespacePrefixes.IsSet && namespacePrefixes.Value == null)
                throw new ArgumentNullException(nameof(namespacePrefixes));

            if (contactName.IsSet && contactName.Value == null)
                throw new ArgumentNullException(nameof(contactName));

            if (contactEmailAddress.IsSet && contactEmailAddress.Value == null)
                throw new ArgumentNullException(nameof(contactEmailAddress));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="orderBy"></param>
        /// <param name="direction"></param>
        /// <param name="id"></param>
        /// <param name="company"></param>
        /// <param name="namespacePrefixes"></param>
        /// <param name="contactName"></param>
        /// <param name="contactEmailAddress"></param>
        private void AfterV2VendorsGetDefaultImplementation(IV2VendorsGetApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> orderBy, Option<string> direction, Option<int> id, Option<string> company, Option<string> namespacePrefixes, Option<string> contactName, Option<string> contactEmailAddress)
        {
            bool suppressDefaultLog = false;
            AfterV2VendorsGet(ref suppressDefaultLog, apiResponseLocalVar, offset, limit, orderBy, direction, id, company, namespacePrefixes, contactName, contactEmailAddress);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="orderBy"></param>
        /// <param name="direction"></param>
        /// <param name="id"></param>
        /// <param name="company"></param>
        /// <param name="namespacePrefixes"></param>
        /// <param name="contactName"></param>
        /// <param name="contactEmailAddress"></param>
        partial void AfterV2VendorsGet(ref bool suppressDefaultLog, IV2VendorsGetApiResponse apiResponseLocalVar, Option<int> offset, Option<int> limit, Option<string> orderBy, Option<string> direction, Option<int> id, Option<string> company, Option<string> namespacePrefixes, Option<string> contactName, Option<string> contactEmailAddress);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="orderBy"></param>
        /// <param name="direction"></param>
        /// <param name="id"></param>
        /// <param name="company"></param>
        /// <param name="namespacePrefixes"></param>
        /// <param name="contactName"></param>
        /// <param name="contactEmailAddress"></param>
        private void OnErrorV2VendorsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> orderBy, Option<string> direction, Option<int> id, Option<string> company, Option<string> namespacePrefixes, Option<string> contactName, Option<string> contactEmailAddress)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV2VendorsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, offset, limit, orderBy, direction, id, company, namespacePrefixes, contactName, contactEmailAddress);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="offset"></param>
        /// <param name="limit"></param>
        /// <param name="orderBy"></param>
        /// <param name="direction"></param>
        /// <param name="id"></param>
        /// <param name="company"></param>
        /// <param name="namespacePrefixes"></param>
        /// <param name="contactName"></param>
        /// <param name="contactEmailAddress"></param>
        partial void OnErrorV2VendorsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, Option<int> offset, Option<int> limit, Option<string> orderBy, Option<string> direction, Option<int> id, Option<string> company, Option<string> namespacePrefixes, Option<string> contactName, Option<string> contactEmailAddress);

        /// <summary>
        /// Retrieves all vendors. This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="id">Vendor/ company id (optional)</param>
        /// <param name="company">Vendor/ company name (optional)</param>
        /// <param name="namespacePrefixes">Namespace prefix for the vendor. Multiple namespace prefixes can be provided as comma separated list if required. (optional)</param>
        /// <param name="contactName">Vendor contact name (optional)</param>
        /// <param name="contactEmailAddress">Vendor contact email id (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2VendorsGetApiResponse"/>&gt;</returns>
        public async Task<IV2VendorsGetApiResponse> V2VendorsGetOrDefaultAsync(Option<int> offset = default, Option<int> limit = default, Option<string> orderBy = default, Option<string> direction = default, Option<int> id = default, Option<string> company = default, Option<string> namespacePrefixes = default, Option<string> contactName = default, Option<string> contactEmailAddress = default, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V2VendorsGetAsync(offset, limit, orderBy, direction, id, company, namespacePrefixes, contactName, contactEmailAddress, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves all vendors. This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="offset">Indicates how many items should be skipped before returning results. (optional)</param>
        /// <param name="limit">Indicates the maximum number of items that should be returned in the results. (optional)</param>
        /// <param name="orderBy">Indicates the property name by which the results will be sorted. (optional, default to &quot;&quot;)</param>
        /// <param name="direction">Indicates whether the result should be sorted in descending order (DESC) or ascending order (ASC). (optional, default to Descending)</param>
        /// <param name="id">Vendor/ company id (optional)</param>
        /// <param name="company">Vendor/ company name (optional)</param>
        /// <param name="namespacePrefixes">Namespace prefix for the vendor. Multiple namespace prefixes can be provided as comma separated list if required. (optional)</param>
        /// <param name="contactName">Vendor contact name (optional)</param>
        /// <param name="contactEmailAddress">Vendor contact email id (optional)</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2VendorsGetApiResponse"/>&gt;</returns>
        public async Task<IV2VendorsGetApiResponse> V2VendorsGetAsync(Option<int> offset = default, Option<int> limit = default, Option<string> orderBy = default, Option<string> direction = default, Option<int> id = default, Option<string> company = default, Option<string> namespacePrefixes = default, Option<string> contactName = default, Option<string> contactEmailAddress = default, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV2VendorsGet(orderBy, direction, company, namespacePrefixes, contactName, contactEmailAddress);

                FormatV2VendorsGet(ref offset, ref limit, ref orderBy, ref direction, ref id, ref company, ref namespacePrefixes, ref contactName, ref contactEmailAddress);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v2/vendors"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v2/vendors");

                    System.Collections.Specialized.NameValueCollection parseQueryStringLocalVar = System.Web.HttpUtility.ParseQueryString(string.Empty);

                    if (offset.IsSet)
                        parseQueryStringLocalVar["offset"] = ClientUtils.ParameterToString(offset.Value);

                    if (limit.IsSet)
                        parseQueryStringLocalVar["limit"] = ClientUtils.ParameterToString(limit.Value);

                    if (orderBy.IsSet)
                        parseQueryStringLocalVar["orderBy"] = ClientUtils.ParameterToString(orderBy.Value);

                    if (direction.IsSet)
                        parseQueryStringLocalVar["direction"] = ClientUtils.ParameterToString(direction.Value);

                    if (id.IsSet)
                        parseQueryStringLocalVar["id"] = ClientUtils.ParameterToString(id.Value);

                    if (company.IsSet)
                        parseQueryStringLocalVar["company"] = ClientUtils.ParameterToString(company.Value);

                    if (namespacePrefixes.IsSet)
                        parseQueryStringLocalVar["namespacePrefixes"] = ClientUtils.ParameterToString(namespacePrefixes.Value);

                    if (contactName.IsSet)
                        parseQueryStringLocalVar["contactName"] = ClientUtils.ParameterToString(contactName.Value);

                    if (contactEmailAddress.IsSet)
                        parseQueryStringLocalVar["contactEmailAddress"] = ClientUtils.ParameterToString(contactEmailAddress.Value);

                    uriBuilderLocalVar.Query = parseQueryStringLocalVar.ToString();

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<V2VendorsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V2VendorsGetApiResponse>();

                        V2VendorsGetApiResponse apiResponseLocalVar = new V2VendorsGetApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/vendors", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV2VendorsGetDefaultImplementation(apiResponseLocalVar, offset, limit, orderBy, direction, id, company, namespacePrefixes, contactName, contactEmailAddress);

                        Events.ExecuteOnV2VendorsGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV2VendorsGetDefaultImplementation(e, "/v2/vendors", uriBuilderLocalVar.Path, offset, limit, orderBy, direction, id, company, namespacePrefixes, contactName, contactEmailAddress);
                Events.ExecuteOnErrorV2VendorsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V2VendorsGetApiResponse"/>
        /// </summary>
        public partial class V2VendorsGetApiResponse : EdFi.Ods.AdminApi.Client.Client.ApiResponse, IV2VendorsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V2VendorsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V2VendorsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V2VendorsGetApiResponse(ILogger<V2VendorsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<VendorModel> Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<VendorModel>>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out List<VendorModel> result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV2VendorsIdApplicationsGet(ref int id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterV2VendorsIdApplicationsGetDefaultImplementation(IV2VendorsIdApplicationsGetApiResponse apiResponseLocalVar, int id)
        {
            bool suppressDefaultLog = false;
            AfterV2VendorsIdApplicationsGet(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterV2VendorsIdApplicationsGet(ref bool suppressDefaultLog, IV2VendorsIdApplicationsGetApiResponse apiResponseLocalVar, int id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorV2VendorsIdApplicationsGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV2VendorsIdApplicationsGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorV2VendorsIdApplicationsGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id);

        /// <summary>
        /// Retrieves applications assigned to a specific vendor based on the resource identifier. 
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2VendorsIdApplicationsGetApiResponse"/>&gt;</returns>
        public async Task<IV2VendorsIdApplicationsGetApiResponse> V2VendorsIdApplicationsGetOrDefaultAsync(int id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V2VendorsIdApplicationsGetAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves applications assigned to a specific vendor based on the resource identifier. 
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2VendorsIdApplicationsGetApiResponse"/>&gt;</returns>
        public async Task<IV2VendorsIdApplicationsGetApiResponse> V2VendorsIdApplicationsGetAsync(int id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatV2VendorsIdApplicationsGet(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v2/vendors/{id}/applications"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v2/vendors/{id}/applications");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<V2VendorsIdApplicationsGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V2VendorsIdApplicationsGetApiResponse>();

                        V2VendorsIdApplicationsGetApiResponse apiResponseLocalVar = new V2VendorsIdApplicationsGetApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/vendors/{id}/applications", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV2VendorsIdApplicationsGetDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnV2VendorsIdApplicationsGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV2VendorsIdApplicationsGetDefaultImplementation(e, "/v2/vendors/{id}/applications", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorV2VendorsIdApplicationsGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V2VendorsIdApplicationsGetApiResponse"/>
        /// </summary>
        public partial class V2VendorsIdApplicationsGetApiResponse : EdFi.Ods.AdminApi.Client.Client.ApiResponse, IV2VendorsIdApplicationsGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V2VendorsIdApplicationsGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V2VendorsIdApplicationsGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V2VendorsIdApplicationsGetApiResponse(ILogger<V2VendorsIdApplicationsGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public List<ApplicationModel> Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<List<ApplicationModel>>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out List<ApplicationModel> result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV2VendorsIdDelete(ref int id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterV2VendorsIdDeleteDefaultImplementation(IV2VendorsIdDeleteApiResponse apiResponseLocalVar, int id)
        {
            bool suppressDefaultLog = false;
            AfterV2VendorsIdDelete(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterV2VendorsIdDelete(ref bool suppressDefaultLog, IV2VendorsIdDeleteApiResponse apiResponseLocalVar, int id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorV2VendorsIdDeleteDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV2VendorsIdDelete(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorV2VendorsIdDelete(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id);

        /// <summary>
        /// Deletes an existing vendor using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2VendorsIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IV2VendorsIdDeleteApiResponse> V2VendorsIdDeleteOrDefaultAsync(int id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V2VendorsIdDeleteAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Deletes an existing vendor using the resource identifier. The DELETE operation is used to delete an existing resource by identifier. If the resource doesn&#39;t exist, an error will result (the resource will not be found).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2VendorsIdDeleteApiResponse"/>&gt;</returns>
        public async Task<IV2VendorsIdDeleteApiResponse> V2VendorsIdDeleteAsync(int id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatV2VendorsIdDelete(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v2/vendors/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v2/vendors/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");
                    httpRequestMessageLocalVar.Method = new HttpMethod("DELETE");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<V2VendorsIdDeleteApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V2VendorsIdDeleteApiResponse>();

                        V2VendorsIdDeleteApiResponse apiResponseLocalVar = new V2VendorsIdDeleteApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/vendors/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV2VendorsIdDeleteDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnV2VendorsIdDelete(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV2VendorsIdDeleteDefaultImplementation(e, "/v2/vendors/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorV2VendorsIdDelete(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V2VendorsIdDeleteApiResponse"/>
        /// </summary>
        public partial class V2VendorsIdDeleteApiResponse : EdFi.Ods.AdminApi.Client.Client.ApiResponse, IV2VendorsIdDeleteApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V2VendorsIdDeleteApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V2VendorsIdDeleteApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V2VendorsIdDeleteApiResponse(ILogger<V2VendorsIdDeleteApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV2VendorsIdGet(ref int id);

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        private void AfterV2VendorsIdGetDefaultImplementation(IV2VendorsIdGetApiResponse apiResponseLocalVar, int id)
        {
            bool suppressDefaultLog = false;
            AfterV2VendorsIdGet(ref suppressDefaultLog, apiResponseLocalVar, id);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        partial void AfterV2VendorsIdGet(ref bool suppressDefaultLog, IV2VendorsIdGetApiResponse apiResponseLocalVar, int id);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        private void OnErrorV2VendorsIdGetDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV2VendorsIdGet(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        partial void OnErrorV2VendorsIdGet(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id);

        /// <summary>
        /// Retrieves a specific vendor based on the identifier. This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2VendorsIdGetApiResponse"/>&gt;</returns>
        public async Task<IV2VendorsIdGetApiResponse> V2VendorsIdGetOrDefaultAsync(int id, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V2VendorsIdGetAsync(id, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Retrieves a specific vendor based on the identifier. This GET operation provides access to resources using the \&quot;Get\&quot; search pattern. The values of any properties of the resource that are specified will be used to return all matching results (if it exists).
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2VendorsIdGetApiResponse"/>&gt;</returns>
        public async Task<IV2VendorsIdGetApiResponse> V2VendorsIdGetAsync(int id, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                FormatV2VendorsIdGet(ref id);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v2/vendors/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v2/vendors/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] acceptLocalVars = new string[] {
                        "application/json"
                    };

                    string acceptLocalVar = ClientUtils.SelectHeaderAccept(acceptLocalVars);

                    if (acceptLocalVar != null)
                        httpRequestMessageLocalVar.Headers.Accept.Add(new MediaTypeWithQualityHeaderValue(acceptLocalVar));
                    httpRequestMessageLocalVar.Method = new HttpMethod("GET");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<V2VendorsIdGetApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V2VendorsIdGetApiResponse>();

                        V2VendorsIdGetApiResponse apiResponseLocalVar = new V2VendorsIdGetApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/vendors/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV2VendorsIdGetDefaultImplementation(apiResponseLocalVar, id);

                        Events.ExecuteOnV2VendorsIdGet(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV2VendorsIdGetDefaultImplementation(e, "/v2/vendors/{id}", uriBuilderLocalVar.Path, id);
                Events.ExecuteOnErrorV2VendorsIdGet(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V2VendorsIdGetApiResponse"/>
        /// </summary>
        public partial class V2VendorsIdGetApiResponse : EdFi.Ods.AdminApi.Client.Client.ApiResponse, IV2VendorsIdGetApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V2VendorsIdGetApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V2VendorsIdGetApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V2VendorsIdGetApiResponse(ILogger<V2VendorsIdGetApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            /// <summary>
            /// Deserializes the response if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public EdFi.Ods.AdminApi.Client.Model.VendorModel Ok()
            {
                // This logic may be modified with the AsModel.mustache template
                return IsOk
                    ? System.Text.Json.JsonSerializer.Deserialize<EdFi.Ods.AdminApi.Client.Model.VendorModel>(RawContent, _jsonSerializerOptions)
                    : default;
            }

            /// <summary>
            /// Returns true if the response is 200 Ok and the deserialized response is not null
            /// </summary>
            /// <param name="result"></param>
            /// <returns></returns>
            public bool TryOk(out EdFi.Ods.AdminApi.Client.Model.VendorModel result)
            {
                result = null;

                try
                {
                    result = Ok();
                } catch (Exception e)
                {
                    OnDeserializationErrorDefaultImplementation(e, (HttpStatusCode)200);
                }

                return result != null;
            }

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV2VendorsIdPut(ref int id, EditVendorRequest editVendorRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="editVendorRequest"></param>
        /// <returns></returns>
        private void ValidateV2VendorsIdPut(EditVendorRequest editVendorRequest)
        {
            if (editVendorRequest == null)
                throw new ArgumentNullException(nameof(editVendorRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="editVendorRequest"></param>
        private void AfterV2VendorsIdPutDefaultImplementation(IV2VendorsIdPutApiResponse apiResponseLocalVar, int id, EditVendorRequest editVendorRequest)
        {
            bool suppressDefaultLog = false;
            AfterV2VendorsIdPut(ref suppressDefaultLog, apiResponseLocalVar, id, editVendorRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="editVendorRequest"></param>
        partial void AfterV2VendorsIdPut(ref bool suppressDefaultLog, IV2VendorsIdPutApiResponse apiResponseLocalVar, int id, EditVendorRequest editVendorRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="editVendorRequest"></param>
        private void OnErrorV2VendorsIdPutDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id, EditVendorRequest editVendorRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV2VendorsIdPut(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, id, editVendorRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="id"></param>
        /// <param name="editVendorRequest"></param>
        partial void OnErrorV2VendorsIdPut(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, int id, EditVendorRequest editVendorRequest);

        /// <summary>
        /// Updates vendor based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <param name="id"></param>
        /// <param name="editVendorRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2VendorsIdPutApiResponse"/>&gt;</returns>
        public async Task<IV2VendorsIdPutApiResponse> V2VendorsIdPutOrDefaultAsync(int id, EditVendorRequest editVendorRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V2VendorsIdPutAsync(id, editVendorRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Updates vendor based on the resource identifier. The PUT operation is used to update a resource by identifier. If the resource identifier (\&quot;id\&quot;) is provided in the JSON body, it will be ignored. Additionally, this API resource is not configured for cascading natural key updates. Natural key values for this resource cannot be changed using PUT operation, so the recommendation is to use POST as that supports upsert behavior.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="id"></param>
        /// <param name="editVendorRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2VendorsIdPutApiResponse"/>&gt;</returns>
        public async Task<IV2VendorsIdPutApiResponse> V2VendorsIdPutAsync(int id, EditVendorRequest editVendorRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV2VendorsIdPut(editVendorRequest);

                FormatV2VendorsIdPut(ref id, editVendorRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v2/vendors/{id}"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v2/vendors/{id}");
                    uriBuilderLocalVar.Path = uriBuilderLocalVar.Path.Replace("%7Bid%7D", Uri.EscapeDataString(id.ToString()));

                    httpRequestMessageLocalVar.Content = (editVendorRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(editVendorRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = new HttpMethod("PUT");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<V2VendorsIdPutApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V2VendorsIdPutApiResponse>();

                        V2VendorsIdPutApiResponse apiResponseLocalVar = new V2VendorsIdPutApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/vendors/{id}", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV2VendorsIdPutDefaultImplementation(apiResponseLocalVar, id, editVendorRequest);

                        Events.ExecuteOnV2VendorsIdPut(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV2VendorsIdPutDefaultImplementation(e, "/v2/vendors/{id}", uriBuilderLocalVar.Path, id, editVendorRequest);
                Events.ExecuteOnErrorV2VendorsIdPut(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V2VendorsIdPutApiResponse"/>
        /// </summary>
        public partial class V2VendorsIdPutApiResponse : EdFi.Ods.AdminApi.Client.Client.ApiResponse, IV2VendorsIdPutApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V2VendorsIdPutApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V2VendorsIdPutApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V2VendorsIdPutApiResponse(ILogger<V2VendorsIdPutApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 404 NotFound
            /// </summary>
            /// <returns></returns>
            public bool IsNotFound => 404 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 200 Ok
            /// </summary>
            /// <returns></returns>
            public bool IsOk => 200 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }

        partial void FormatV2VendorsPost(AddVendorRequest addVendorRequest);

        /// <summary>
        /// Validates the request parameters
        /// </summary>
        /// <param name="addVendorRequest"></param>
        /// <returns></returns>
        private void ValidateV2VendorsPost(AddVendorRequest addVendorRequest)
        {
            if (addVendorRequest == null)
                throw new ArgumentNullException(nameof(addVendorRequest));
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="addVendorRequest"></param>
        private void AfterV2VendorsPostDefaultImplementation(IV2VendorsPostApiResponse apiResponseLocalVar, AddVendorRequest addVendorRequest)
        {
            bool suppressDefaultLog = false;
            AfterV2VendorsPost(ref suppressDefaultLog, apiResponseLocalVar, addVendorRequest);
            if (!suppressDefaultLog)
                Logger.LogInformation("{0,-9} | {1} | {3}", (apiResponseLocalVar.DownloadedAt - apiResponseLocalVar.RequestedAt).TotalSeconds, apiResponseLocalVar.StatusCode, apiResponseLocalVar.Path);
        }

        /// <summary>
        /// Processes the server response
        /// </summary>
        /// <param name="suppressDefaultLog"></param>
        /// <param name="apiResponseLocalVar"></param>
        /// <param name="addVendorRequest"></param>
        partial void AfterV2VendorsPost(ref bool suppressDefaultLog, IV2VendorsPostApiResponse apiResponseLocalVar, AddVendorRequest addVendorRequest);

        /// <summary>
        /// Logs exceptions that occur while retrieving the server response
        /// </summary>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="addVendorRequest"></param>
        private void OnErrorV2VendorsPostDefaultImplementation(Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AddVendorRequest addVendorRequest)
        {
            bool suppressDefaultLogLocalVar = false;
            OnErrorV2VendorsPost(ref suppressDefaultLogLocalVar, exceptionLocalVar, pathFormatLocalVar, pathLocalVar, addVendorRequest);
            if (!suppressDefaultLogLocalVar)
                Logger.LogError(exceptionLocalVar, "An error occurred while sending the request to the server.");
        }

        /// <summary>
        /// A partial method that gives developers a way to provide customized exception handling
        /// </summary>
        /// <param name="suppressDefaultLogLocalVar"></param>
        /// <param name="exceptionLocalVar"></param>
        /// <param name="pathFormatLocalVar"></param>
        /// <param name="pathLocalVar"></param>
        /// <param name="addVendorRequest"></param>
        partial void OnErrorV2VendorsPost(ref bool suppressDefaultLogLocalVar, Exception exceptionLocalVar, string pathFormatLocalVar, string pathLocalVar, AddVendorRequest addVendorRequest);

        /// <summary>
        /// Creates vendor based on the supplied values. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <param name="addVendorRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2VendorsPostApiResponse"/>&gt;</returns>
        public async Task<IV2VendorsPostApiResponse> V2VendorsPostOrDefaultAsync(AddVendorRequest addVendorRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            try
            {
                return await V2VendorsPostAsync(addVendorRequest, cancellationToken).ConfigureAwait(false);
            }
            catch (Exception)
            {
                return null;
            }
        }

        /// <summary>
        /// Creates vendor based on the supplied values. The POST operation can be used to create or update resources. In database terms, this is often referred to as an \&quot;upsert\&quot; operation (insert + update). Clients should NOT include the resource \&quot;id\&quot; in the JSON body because it will result in an error. The web service will identify whether the resource already exists based on the natural key values provided, and update or create the resource appropriately. It is recommended to use POST for both create and update except while updating natural key of a resource in which case PUT operation must be used.
        /// </summary>
        /// <exception cref="ApiException">Thrown when fails to make API call</exception>
        /// <param name="addVendorRequest"></param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns><see cref="Task"/>&lt;<see cref="IV2VendorsPostApiResponse"/>&gt;</returns>
        public async Task<IV2VendorsPostApiResponse> V2VendorsPostAsync(AddVendorRequest addVendorRequest, System.Threading.CancellationToken cancellationToken = default)
        {
            UriBuilder uriBuilderLocalVar = new UriBuilder();

            try
            {
                ValidateV2VendorsPost(addVendorRequest);

                FormatV2VendorsPost(addVendorRequest);

                using (HttpRequestMessage httpRequestMessageLocalVar = new HttpRequestMessage())
                {
                    uriBuilderLocalVar.Host = HttpClient.BaseAddress.Host;
                    uriBuilderLocalVar.Port = HttpClient.BaseAddress.Port;
                    uriBuilderLocalVar.Scheme = HttpClient.BaseAddress.Scheme;
                    uriBuilderLocalVar.Path = HttpClient.BaseAddress.AbsolutePath == "/"
                        ? "/v2/vendors"
                        : string.Concat(HttpClient.BaseAddress.AbsolutePath, "/v2/vendors");

                    httpRequestMessageLocalVar.Content = (addVendorRequest as object) is System.IO.Stream stream
                        ? httpRequestMessageLocalVar.Content = new StreamContent(stream)
                        : httpRequestMessageLocalVar.Content = new StringContent(JsonSerializer.Serialize(addVendorRequest, _jsonSerializerOptions));

                    List<TokenBase> tokenBaseLocalVars = new List<TokenBase>();
                    httpRequestMessageLocalVar.RequestUri = uriBuilderLocalVar.Uri;

                    OAuthToken oauthTokenLocalVar1 = (OAuthToken) await OauthTokenProvider.GetAsync(cancellation: cancellationToken).ConfigureAwait(false);

                    tokenBaseLocalVars.Add(oauthTokenLocalVar1);

                    oauthTokenLocalVar1.UseInHeader(httpRequestMessageLocalVar, "");

                    string[] contentTypes = new string[] {
                        "application/json"
                    };

                    string contentTypeLocalVar = ClientUtils.SelectHeaderContentType(contentTypes);

                    if (contentTypeLocalVar != null && httpRequestMessageLocalVar.Content != null)
                        httpRequestMessageLocalVar.Content.Headers.ContentType = new MediaTypeHeaderValue(contentTypeLocalVar);

                    httpRequestMessageLocalVar.Method = new HttpMethod("POST");

                    DateTime requestedAtLocalVar = DateTime.UtcNow;

                    using (HttpResponseMessage httpResponseMessageLocalVar = await HttpClient.SendAsync(httpRequestMessageLocalVar, cancellationToken).ConfigureAwait(false))
                    {
                        string responseContentLocalVar = await httpResponseMessageLocalVar.Content.ReadAsStringAsync().ConfigureAwait(false);

                        ILogger<V2VendorsPostApiResponse> apiResponseLoggerLocalVar = LoggerFactory.CreateLogger<V2VendorsPostApiResponse>();

                        V2VendorsPostApiResponse apiResponseLocalVar = new V2VendorsPostApiResponse(apiResponseLoggerLocalVar, httpRequestMessageLocalVar, httpResponseMessageLocalVar, responseContentLocalVar, "/v2/vendors", requestedAtLocalVar, _jsonSerializerOptions);

                        AfterV2VendorsPostDefaultImplementation(apiResponseLocalVar, addVendorRequest);

                        Events.ExecuteOnV2VendorsPost(apiResponseLocalVar);

                        if (apiResponseLocalVar.StatusCode == (HttpStatusCode) 429)
                            foreach(TokenBase tokenBaseLocalVar in tokenBaseLocalVars)
                                tokenBaseLocalVar.BeginRateLimit();

                        return apiResponseLocalVar;
                    }
                }
            }
            catch(Exception e)
            {
                OnErrorV2VendorsPostDefaultImplementation(e, "/v2/vendors", uriBuilderLocalVar.Path, addVendorRequest);
                Events.ExecuteOnErrorV2VendorsPost(e);
                throw;
            }
        }

        /// <summary>
        /// The <see cref="V2VendorsPostApiResponse"/>
        /// </summary>
        public partial class V2VendorsPostApiResponse : EdFi.Ods.AdminApi.Client.Client.ApiResponse, IV2VendorsPostApiResponse
        {
            /// <summary>
            /// The logger
            /// </summary>
            public ILogger<V2VendorsPostApiResponse> Logger { get; }

            /// <summary>
            /// The <see cref="V2VendorsPostApiResponse"/>
            /// </summary>
            /// <param name="logger"></param>
            /// <param name="httpRequestMessage"></param>
            /// <param name="httpResponseMessage"></param>
            /// <param name="rawContent"></param>
            /// <param name="path"></param>
            /// <param name="requestedAt"></param>
            /// <param name="jsonSerializerOptions"></param>
            public V2VendorsPostApiResponse(ILogger<V2VendorsPostApiResponse> logger, System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage, string rawContent, string path, DateTime requestedAt, System.Text.Json.JsonSerializerOptions jsonSerializerOptions) : base(httpRequestMessage, httpResponseMessage, rawContent, path, requestedAt, jsonSerializerOptions)
            {
                Logger = logger;
                OnCreated(httpRequestMessage, httpResponseMessage);
            }

            partial void OnCreated(global::System.Net.Http.HttpRequestMessage httpRequestMessage, System.Net.Http.HttpResponseMessage httpResponseMessage);

            /// <summary>
            /// Returns true if the response is 401 Unauthorized
            /// </summary>
            /// <returns></returns>
            public bool IsUnauthorized => 401 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 403 Forbidden
            /// </summary>
            /// <returns></returns>
            public bool IsForbidden => 403 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 409 Conflict
            /// </summary>
            /// <returns></returns>
            public bool IsConflict => 409 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 500 InternalServerError
            /// </summary>
            /// <returns></returns>
            public bool IsInternalServerError => 500 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 400 BadRequest
            /// </summary>
            /// <returns></returns>
            public bool IsBadRequest => 400 == (int)StatusCode;

            /// <summary>
            /// Returns true if the response is 201 Created
            /// </summary>
            /// <returns></returns>
            public bool IsCreated => 201 == (int)StatusCode;

            private void OnDeserializationErrorDefaultImplementation(Exception exception, HttpStatusCode httpStatusCode)
            {
                bool suppressDefaultLog = false;
                OnDeserializationError(ref suppressDefaultLog, exception, httpStatusCode);
                if (!suppressDefaultLog)
                    Logger.LogError(exception, "An error occurred while deserializing the {code} response.", httpStatusCode);
            }

            partial void OnDeserializationError(ref bool suppressDefaultLog, Exception exception, HttpStatusCode httpStatusCode);
        }
    }
}
